{"version":3,"sources":["views/rules/actions/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","components/datepicker/index.jsx","hooks/use_actions.js","views/rules/actions/root/components/slot_action.jsx","views/rules/actions/root/datatable/slots_columns.js"],"names":["ActionsUpdate","skin","useSkin","dispatch","useDispatch","_useSearchParams","useSearchParams","searchParams","_slicedToArray","navigate","useNavigate","_useActions","useActions","getActionById","updateActionController","loadings","_useState","useState","_useState2","ExpiryTime","setExpiryTime","_useState3","Identifier","BalanceId","BalanceType","Units","Filters","TimingTags","DestinationIds","RatingSubject","Categories","SharedGroups","BalanceWeight","ExtraParameters","BalanceBlocker","BalanceDisabled","Weight","_useState4","slotFormData","setSlotFormData","getAllTpIdsLoading","useSelector","state","app","selectedTpId","slots","actions","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","style","width","height","className","ProgressLoading","Form","onSubmit","handleSubmit","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","e","_objectSpread","target","CustomDatePicker","inputPlaceholder","concat","year","month","day","type","parseFloat","checked","JSON","parse","stringify","CustomButton","onClick","array","_toConsumableArray","length","toast","error","push","Math","random","setSlots","outline","color","DataTable","noDataComponent","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","updateAction","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","Account","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","updateAccountSchema","_ref","inputClassName","minimumDate","maximumDate","_objectWithoutProperties","_excluded","DatePicker","colorPrimary","colorPrimaryLight","locale","calendarPopperPosition","calendarClassName","AiOutlineCalendar","fontSize","httpService","useHttp","getActions","createAction","deleteAction","setLoadings","listData","setListData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_response$data","_response$data$result","response","wrap","_context","prev","next","post","method","params","sent","result","t0","err","stop","apply","arguments","_ref3","_callee2","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","_context2","setFieldValue","Actions","_x","createActionController","useFormik","initialValues","validationSchema","enableReinitialize","_ref5","_callee3","newSlots","_context3","obj","status","success","_x2","_x3","_ref7","_callee4","_context4","_excluded2","_x4","_x5","_ref9","_callee5","_context5","setDeleteModal","_x6","SlotAction","Button","filter","padding","selector","row","cell","maxWidth"],"mappings":"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","file":"static/js/45.895c3318.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/actions_slice\";\nimport useActions from \"../../../../hooks/use_actions\";\nimport CustomDatePicker from \"../../../../components/datepicker/index\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\n\nconst ActionsUpdate = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n  const navigate = useNavigate();\n  const { getActionById, updateActionController, loadings } = useActions();\n\n  const [ExpiryTime, setExpiryTime] = useState(null);\n\n  const [slotFormData, setSlotFormData] = useState({\n    Identifier: \"\",\n    BalanceId: \"\",\n    BalanceType: \"\",\n    Units: \"\",\n    ExpiryTime: \"\",\n    Filters: \"\",\n    TimingTags: \"\",\n    DestinationIds: \"\",\n    RatingSubject: \"\",\n    Categories: \"\",\n    SharedGroups: \"\",\n    BalanceWeight: \"\",\n    ExtraParameters: \"\",\n    BalanceBlocker: \"false\",\n    BalanceDisabled: \"false\",\n    Weight: 0,\n  });\n\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n  const slots = useSelector((state) => state.actions.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.Identifier.length === 0) {\n      toast.error(\"Please enter Identifier.\");\n    } else if (slotFormData.BalanceId.length === 0) {\n      toast.error(\"Please enter BalanceId.\");\n    } else if (slotFormData.BalanceType.length === 0) {\n      toast.error(\"Please enter BalanceType.\");\n    } else if (slotFormData.Units.length === 0) {\n      toast.error(\"Please enter Units.\");\n    } else if (slotFormData.ExpiryTime.length === 0) {\n      toast.error(\"Please enter ExpiryTime.\");\n    } else if (slotFormData.Filters.length === 0) {\n      toast.error(\"Please enter Filters.\");\n    } else if (slotFormData.TimingTags.length === 0) {\n      toast.error(\"Please enter TimingTags.\");\n    } else if (slotFormData.DestinationIds.length === 0) {\n      toast.error(\"Please enter DestinationIds.\");\n    } else if (slotFormData.RatingSubject.length === 0) {\n      toast.error(\"Please enter RatingSubject.\");\n    } else if (slotFormData.Categories.length === 0) {\n      toast.error(\"Please enter Categories.\");\n    } else if (slotFormData.SharedGroups.length === 0) {\n      toast.error(\"Please enter SharedGroups.\");\n    } else if (slotFormData.BalanceWeight.length === 0) {\n      toast.error(\"Please enter BalanceWeight.\");\n    } else if (slotFormData.ExtraParameters.length === 0) {\n      toast.error(\"Please enter ExtraParameters.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        Identifier: \"\",\n        BalanceId: \"\",\n        BalanceType: \"\",\n        Units: \"\",\n        ExpiryTime: \"\",\n        Filters: \"\",\n        TimingTags: \"\",\n        DestinationIds: \"\",\n        RatingSubject: \"\",\n        Categories: \"\",\n        SharedGroups: \"\",\n        BalanceWeight: \"\",\n        ExtraParameters: \"\",\n        BalanceBlocker: false,\n        BalanceDisabled: false,\n        Weight: 0,\n      });\n      setExpiryTime(null);\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getActionById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/actions\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs title=\"Update Action\" data={[{ title: \"Update Action\" }]} />\n      {/* tpids loading */}\n      {getAllTpIdsLoading ? (\n        <div\n          style={{ width: \"100%\", height: \"50vh\" }}\n          className=\"d-flex justify-content-center align-items-center\"\n        >\n          Loading TPIds...\n        </div>\n      ) : null}\n      {/* get entity loading */}\n      {loadings.getActionById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getActionById ? (\n        <Form\n          onSubmit={updateActionController.handleSubmit}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Action Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row className=\"border-bottom mb-1\">\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateActionController.values.TPid}\n                    onChange={updateActionController.handleChange}\n                    invalid={\n                      updateActionController.touched.TPid &&\n                      updateActionController.errors.TPid\n                    }\n                  />\n                  {updateActionController.touched.TPid &&\n                  updateActionController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateActionController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* ID */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ID\">\n                    ID\n                  </Label>\n                  <Input\n                    id=\"ID\"\n                    name=\"ID\"\n                    disabled\n                    value={updateActionController.values.ID}\n                    onChange={updateActionController.handleChange}\n                    invalid={\n                      updateActionController.touched.ID &&\n                      updateActionController.errors.ID\n                    }\n                  />\n                  {updateActionController.touched.ID &&\n                  updateActionController.errors.ID ? (\n                    <FormFeedback>\n                      {updateActionController.errors.ID}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n              </Row>\n              {/* Actions */}\n              <Row>\n                <Col xs=\"12\">\n                  <CardTitle>Actions</CardTitle>\n                </Col>\n                {/* Identifier */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Identifier\">\n                    Identifier\n                  </Label>\n                  <Input\n                    value={slotFormData.Identifier}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Identifier: e.target.value,\n                      })\n                    }\n                    id=\"Identifier\"\n                    name=\"Identifier\"\n                  />\n                </Col>\n                {/* BalanceId */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"BalanceId\">\n                    BalanceId\n                  </Label>\n                  <Input\n                    id=\"BalanceId\"\n                    name=\"BalanceId\"\n                    value={slotFormData.BalanceId}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        BalanceId: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* BalanceType */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"BalanceType\">\n                    BalanceType\n                  </Label>\n                  <Input\n                    id=\"BalanceType\"\n                    name=\"BalanceType\"\n                    value={slotFormData.BalanceType}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        BalanceType: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* Units */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Units\">\n                    Units\n                  </Label>\n                  <Input\n                    id=\"Units\"\n                    name=\"Units\"\n                    value={slotFormData.Units}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Units: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* ExpiryTime */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ExpiryTime\">\n                    ExpiryTime\n                  </Label>\n                  <CustomDatePicker\n                    inputPlaceholder=\"Click to open calendar\"\n                    value={ExpiryTime}\n                    onChange={(value) => {\n                      setExpiryTime(value);\n                      setSlotFormData({\n                        ...slotFormData,\n                        ExpiryTime: `${value.year}-${value.month}-${value.day}T00:00:00Z`,\n                      });\n                    }}\n                  />\n                </Col>\n                {/* Filters */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Filters\">\n                    Filters\n                  </Label>\n                  <Input\n                    id=\"Filters\"\n                    name=\"Filters\"\n                    value={slotFormData.Filters}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Filters: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* TimingTags */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TimingTags\">\n                    TimingTags\n                  </Label>\n                  <Input\n                    id=\"TimingTags\"\n                    name=\"TimingTags\"\n                    value={slotFormData.TimingTags}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        TimingTags: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* DestinationIds */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"DestinationIds\">\n                    DestinationIds\n                  </Label>\n                  <Input\n                    id=\"DestinationIds\"\n                    name=\"DestinationIds\"\n                    value={slotFormData.DestinationIds}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        DestinationIds: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* RatingSubject */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"RatingSubject\">\n                    RatingSubject\n                  </Label>\n                  <Input\n                    id=\"RatingSubject\"\n                    name=\"RatingSubject\"\n                    value={slotFormData.RatingSubject}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        RatingSubject: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* Categories */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Categories\">\n                    Categories\n                  </Label>\n                  <Input\n                    id=\"Categories\"\n                    name=\"Categories\"\n                    value={slotFormData.Categories}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Categories: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* SharedGroups */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"SharedGroups\">\n                    SharedGroups\n                  </Label>\n                  <Input\n                    id=\"SharedGroups\"\n                    name=\"SharedGroups\"\n                    value={slotFormData.SharedGroups}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        SharedGroups: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* BalanceWeight */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"BalanceWeight\">\n                    BalanceWeight\n                  </Label>\n                  <Input\n                    id=\"BalanceWeight\"\n                    name=\"BalanceWeight\"\n                    value={slotFormData.BalanceWeight}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        BalanceWeight: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* ExtraParameters */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ExtraParameters\">\n                    ExtraParameters\n                  </Label>\n                  <Input\n                    id=\"ExtraParameters\"\n                    name=\"ExtraParameters\"\n                    value={slotFormData.ExtraParameters}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        ExtraParameters: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* Weight */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Weight\">\n                    Weight\n                  </Label>\n                  <Input\n                    type=\"number\"\n                    id=\"Weight\"\n                    name=\"Weight\"\n                    value={slotFormData.Weight}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Weight: parseFloat(e.target.value),\n                      })\n                    }\n                  />\n                </Col>\n                {/* BalanceBlocker */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"BalanceBlocker\">\n                    BalanceBlocker\n                  </Label>\n                  <div className=\"form-check\">\n                    <Input\n                      id=\"BalanceBlocker\"\n                      name=\"BalanceBlocker\"\n                      type=\"checkbox\"\n                      checked={JSON.parse(slotFormData.BalanceBlocker)}\n                      onChange={(e) =>\n                        setSlotFormData({\n                          ...slotFormData,\n                          BalanceBlocker: JSON.stringify(e.target.checked),\n                        })\n                      }\n                    />\n                  </div>\n                </Col>\n                {/* BalanceDisabled */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"BalanceDisabled\">\n                    BalanceDisabled\n                  </Label>\n                  <div className=\"form-check\">\n                    <Input\n                      id=\"BalanceDisabled\"\n                      name=\"BalanceDisabled\"\n                      checked={JSON.parse(slotFormData.BalanceDisabled)}\n                      type=\"checkbox\"\n                      onChange={(e) =>\n                        setSlotFormData({\n                          ...slotFormData,\n                          BalanceDisabled: JSON.stringify(e.target.checked),\n                        })\n                      }\n                    />\n                  </div>\n                </Col>\n                {/* action */}\n                <Col\n                  xs=\"12\"\n                  sm=\"6\"\n                  md=\"3\"\n                  className=\"mb-1 d-flex align-items-end\"\n                >\n                  <CustomButton\n                    onClick={handleAddSlot}\n                    outline\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Add\n                  </CustomButton>\n                </Col>\n                {/* datatable */}\n                <Col xs=\"12\">\n                  <DataTable\n                    noDataComponent={\n                      <div style={{ margin: \"24px 0\" }}>\n                        No Action Added Yet.\n                      </div>\n                    }\n                    noHeader\n                    columns={slots_columns}\n                    className=\"react-dataTable\"\n                    style={{ background: \"red\" }}\n                    sortIcon={<ChevronDown size={10} />}\n                    data={slots}\n                    theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                  />\n                </Col>\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.updateAction}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default ActionsUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n\nexport const updateAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import \"./datepicker.scss\";\nimport DatePicker from \"@hassanmojab/react-modern-calendar-datepicker\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\nimport { useSkin } from \"@hooks/useSkin\";\n\nconst CustomDatePicker = ({\n  inputClassName,\n  minimumDate,\n  maximumDate,\n  ...props\n}) => {\n  const { skin } = useSkin();\n\n  return (\n    <div className=\"custom_datepicker_wrapper\">\n      <DatePicker\n        colorPrimary=\"#73bcf0\"\n        colorPrimaryLight=\"#73bcf03b\"\n        inputClassName={`${inputClassName}\n          ${skin === \"light\" ? \"custom_datepicker\" : \"custom_datepicker_dark\"}\n        `}\n        minimumDate={minimumDate}\n        maximumDate={maximumDate}\n        locale={\"en\"}\n        calendarPopperPosition=\"top\"\n        calendarClassName=\"responsive-calendar\"\n        {...props}\n      />\n      <AiOutlineCalendar fontSize={20} />\n    </div>\n  );\n};\nexport default CustomDatePicker;\n","import { useState } from \"react\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDeleteModal, setSlots } from \"../redux/actions_slice\";\n\nconst useActions = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n  const [loadings, setLoadings] = useState({\n    getActions: false,\n    getActionById: false,\n    createAction: false,\n    updateAction: false,\n    deleteAction: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.actions.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getActions = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getActions: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPActionIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getActions: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getActions: false });\n    }\n  };\n\n  const getActionById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getActionById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPActions\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getActionById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/actions\");\n      } else {\n        updateActionController.setFieldValue(\"ID\", response?.data?.result?.ID);\n        dispatch(setSlots(response?.data?.result?.Actions));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getActionById: false });\n    }\n  };\n\n  const createActionController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      Actions: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one action.\");\n      } else {\n        createAction(values, slots);\n      }\n    },\n  });\n\n  const createAction = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createAction: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPActions\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            Actions: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createAction: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/actions\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createAction: false });\n    }\n  };\n\n  const updateActionController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      Actions: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one action.\");\n      } else {\n        updateAction(values, slots);\n      }\n    },\n  });\n\n  const updateAction = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateAction: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPActions\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            Actions: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateAction: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/actions\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateAction: false });\n    }\n  };\n\n  const deleteAction = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteAction: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPActions\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteAction: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getActions();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteAction: false });\n    }\n  };\n\n  const exports = {\n    getActions,\n    getActionById,\n    createActionController,\n    updateActionController,\n    deleteAction,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useActions;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/actions_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.actions.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"Identifier\",\n    minWidth: \"100px\",\n    selector: (row) => row.Identifier,\n  },\n  {\n    name: \"BalanceId\",\n    minWidth: \"100px\",\n    selector: (row) => row.BalanceId,\n  },\n  {\n    name: \"BalanceType\",\n    minWidth: \"120px\",\n    selector: (row) => row.BalanceType,\n  },\n  {\n    name: \"Units\",\n    minWidth: \"100px\",\n    selector: (row) => row.Units,\n  },\n  {\n    name: \"ExpiryTime\",\n    minWidth: \"120px\",\n    selector: (row) => row.ExpiryTime,\n  },\n  {\n    name: \"Filters\",\n    minWidth: \"100px\",\n    selector: (row) => row.Filters,\n  },\n  {\n    name: \"TimingTags\",\n    minWidth: \"120px\",\n    selector: (row) => row.TimingTags,\n  },\n  {\n    name: \"DestinationIds\",\n    minWidth: \"140px\",\n    selector: (row) => row.DestinationIds,\n  },\n  {\n    name: \"RatingSubject\",\n    minWidth: \"130px\",\n    selector: (row) => row.RatingSubject,\n  },\n  {\n    name: \"Categories\",\n    minWidth: \"100px\",\n    selector: (row) => row.Categories,\n  },\n  {\n    name: \"SharedGroups\",\n    minWidth: \"130px\",\n    selector: (row) => row.SharedGroups,\n  },\n  {\n    name: \"BalanceWeight\",\n    minWidth: \"130px\",\n    selector: (row) => row.BalanceWeight,\n  },\n  {\n    name: \"ExtraParameters\",\n    minWidth: \"140px\",\n    selector: (row) => row.ExtraParameters,\n  },\n  {\n    name: \"BalanceBlocker\",\n    minWidth: \"130px\",\n    selector: (row) => row.BalanceBlocker,\n    cell: (row) => {\n      return row.BalanceBlocker;\n    },\n  },\n  {\n    name: \"BalanceDisabled\",\n    minWidth: \"140px\",\n    selector: (row) => row.BalanceDisabled,\n    cell: (row) => {\n      return row.BalanceDisabled;\n    },\n  },\n  {\n    name: \"Weight\",\n    minWidth: \"100px\",\n    selector: (row) => row.Weight,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}