{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/remove.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","props","disabled","subject","subscribe","next","callback","useSubscribe","_updateSubscription","skipEarlySubscription","useController","methods","control","shouldUnregister","_formValues","_defaultValues","setInputStateValue","_formState","updateFormState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","event","target","isCheckBoxInput","checked","getControllerValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","add","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","delayError","updatedFormState","context","getResolverOptions","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","getValues","_getWatch","isGlobal","fieldValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","Promise","shouldFocus","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_removeUnmounted","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","info","setValue","isFieldArray","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","clearErrors","inputName","setError","setFocus","useForm","_formControl"],"mappings":"wXAEA,EAAe,SAACA,GAAqB,MAClB,aAAjBA,EAAQC,IAAmB,ECH7B,EAAe,SAACC,GAAa,OAAKA,aAAgBC,IAAI,ECAtD,EAAe,SAACC,GAAc,OAAyC,MAATA,CAAa,ECG9DC,EAAe,SAACD,GAAc,MAAsB,kBAAVA,CAAkB,EAEzE,EAAe,SAAmBA,GAAc,OAC7CE,EAAkBF,KAClBG,MAAMC,QAAQJ,IACfC,EAAaD,KACZK,EAAaL,EAAM,ECLtB,EAAe,SAACM,EAA+BC,GAAuB,OACpE,YAAID,GAAOE,MAAK,SAACC,GAAO,OCLX,SAACF,GAAY,OAAKA,EAAKG,UAAU,EAAGH,EAAKI,OAAO,SAAWJ,CAAI,CDK/CK,CAAkBL,KAAUE,CAAO,GAAC,EELnE,EAAe,SAACT,GAAY,OAAKA,EAAMa,OAAOC,QAAQ,ECAtD,EAAe,SAACC,GAAY,YAA+BC,IAARD,CAAiB,ECKpE,EAAe,SAAIE,EAAQC,EAAcC,GACvC,GAAIC,EAASH,IAAQC,EAAM,CACzB,IAAMG,EAASC,EAAQJ,EAAKK,MAAM,cAAcC,QAC9C,SAACH,EAAQI,GAAG,OAAMvB,EAAkBmB,GAAUA,EAASA,EAAOI,EAAI,GAClER,GAGF,OAAOS,EAAYL,IAAWA,IAAWJ,EACrCS,EAAYT,EAAIC,IACdC,EACAF,EAAIC,GACNG,CACL,CAGH,EClBaM,EAAS,CACpBC,KAAM,OACNC,OAAQ,UAGGC,EAAkC,CAC7CC,OAAQ,SACRC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,IAAK,OAGMC,EACN,MADMA,EAEN,MAFMA,EAGA,YAHAA,EAIA,YAJAA,EAKF,UALEA,EAMD,WANCA,EAOD,WCtBZ,EAAe,SACbC,EACAZ,GAEA,IAAMa,EAAO,OAAH,UAAQD,GAGlB,cAFOC,EAAKb,GAELa,CACT,ECHMC,EAAkB,gBAA0C,MAErDC,EAAiB,WAAH,OAGzB,aAAiBD,EAAe,ECPlC,EAAe,SACbE,EACAC,EACAC,GACa,IAAbC,IAAS,UAAH,+CAEN,SAASC,EAAaC,GACpB,OAAO,WACL,GAAIA,KAAQL,EAKV,OAJIC,EAAgBI,KAAUhB,EAAgBK,MAC5CO,EAAgBI,IAASF,GAAUd,EAAgBK,KAErDQ,IAAwBA,EAAoBG,IAAQ,GAC7CL,EAAUK,E,CAItB,CAED,IAAMzB,EAAS,CAAC,EAChB,IAAK,IAAMI,KAAOgB,EAChBM,OAAOC,eAAe3B,EAAQI,EAAK,CACjCwB,IAAKJ,EAAapB,KAItB,OAAOJ,CACT,EC1BA,EAAe,SAACrB,GAAc,OAC5BoB,EAASpB,KAAW+C,OAAOG,KAAKlD,GAAOmD,MAAM,ECA/C,EAAe,SACbC,EACAV,EACAE,GAEA,IAAMH,EAAYY,EAAKD,EAAe,QAEtC,OACEE,EAAcb,IACdM,OAAOG,KAAKT,GAAWU,QAAUJ,OAAOG,KAAKR,GAAiBS,QAC9DJ,OAAOG,KAAKT,GAAWc,MACrB,SAAC9B,GAAG,OACFiB,EAAgBjB,OACdmB,GAAUd,EAAgBK,IAAI,GAGxC,ECrBA,EAAe,SAAInC,GAAQ,OAAMG,MAAMC,QAAQJ,GAASA,EAAQ,CAACA,EAAM,ECEvE,EAAe,SAAIO,EAAUiD,GAAmB,OAC7CjD,IACAiD,GACDC,EAAsBlD,GAAMC,MAC1B,SAACkD,GAAW,OACVA,IACCA,EAAYC,WAAWH,IACtBA,EAAWG,WAAWD,GAAa,GACxC,ECSGE,EAAW,SACfC,GAEIA,EAAapD,UACfoD,EAAapD,QAAQqD,cACrBD,EAAapD,aAAUO,EAE3B,EAEM+C,EACJ,SAD2B,OACrBF,EAAY,EAAZA,aAAcG,EAAK,EAALA,MAAK,OACzB,WACMA,EAAMC,SACRL,EAASC,GACCA,EAAapD,UACvBoD,EAAapD,QAAUuD,EAAME,QAAQC,UAAU,CAC7CC,KAAMJ,EAAMK,WAGlB,CAAC,E,SAEaC,EAAgBN,GAC9B,IAAMH,EAAe,WACfU,EAAsB,UAAmB,eAE/CA,EAAoB9D,QAAUsD,EAAwB,CACpDF,eACAG,WAGDA,EAAMQ,uBAAyBD,EAAoB9D,UAEpD,aAAgB,WAEd,OADA8D,EAAoB9D,UACb,kBAAMmD,EAASC,EAAa,C,GAClC,GACL,C,SCrCgBY,EAIdT,GAEA,IAAMU,EAAUlC,IACRjC,EAAsDyD,EAAtDzD,KAAI,EAAkDyD,EAAhDW,eAAO,IAAG,EAAAD,EAAQC,QAAO,EAAEC,EAAqBZ,EAArBY,iBACzC,EAAoC,WAClC3B,EACE0B,EAAQE,YACRtE,EACA0C,EAAI0B,EAAQG,eAAgBvE,EAAMyD,EAAM7C,gBAE3C,mBANMnB,EAAK,KAAE+E,EAAkB,KAO1BtC,ECxBR,SACEuB,GAEA,IAAMU,EAAUlC,IAChB,EAAsDwB,GAAS,CAAC,EAAC,IAAzDW,eAAO,IAAG,EAAAD,EAAQC,QAAO,EAAEV,EAAQ,EAARA,SAAU1D,EAAI,EAAJA,KAC7C,EAAqC,WAAeoE,EAAQK,YAAW,mBAAhEvC,EAAS,KAAEwC,EAAe,KAC3BC,EAAuB,SAAa,CACxCC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,IAEJC,EAAQ,SAAalF,GAiB3B,OAfAkF,EAAMhF,QAAUF,EAEhB+D,EAAa,CACXL,WACAI,SAAU,SAAC5B,GAAS,OAClBiD,EAAsBD,EAAMhF,QAASgC,EAAUlC,OAC/CoF,EAAsBlD,EAAWyC,EAAqBzE,UACtDwE,EAAgB,OAAD,wBACVN,EAAQK,YACRvC,GACH,EACJyB,QAASS,EAAQiB,UAAUC,MAC3BrB,uBAAuB,IAGlBsB,EACLrD,EACAkC,EAAQjC,gBACRwC,EAAqBzE,SACrB,EAEJ,CDboBsF,CAAa,CAC7BpB,QAASA,GAAWD,EAAQC,QAC5BpE,SAEIkF,EAAQ,SAAalF,GAE3BkF,EAAMhF,QAAUF,EAEhB+D,EAAa,CACXJ,QAASS,EAAQiB,UAAUjB,QAC3BN,SAAU,SAACvE,GAAI,QACXA,EAAKS,MAAQkF,EAAMhF,UAAYX,EAAKS,OACtCwE,EAAmB9B,EAAInD,EAAKkG,OAAQP,EAAMhF,SAAS,EACrD+D,uBAAuB,IAGzB,IAAMyB,EAAgBtB,EAAQuB,SAAS3F,EAAM,OAAF,wBACtCyD,EAAMmC,OAAK,CACdnG,WAGIoG,EAAgB,eACpB,SAAC7F,EAAyBP,GACxB,IAAMqG,EAAepD,EAAI0B,EAAQ2B,QAAS/F,GAEtC8F,IACFA,EAAME,GAAGC,MAAQxG,E,GAGrB,CAAC2E,IAsBH,OAnBA,aAAgB,WAGd,OAFAyB,EAAc7F,GAAM,GAEb,WACL,IAAMkG,EACJ9B,EAAQ+B,SAAS9B,kBAAoBA,GAGrC+B,EAAmBhC,EAAQiC,OAAOC,MAAOtG,GACrCkG,IAA2B9B,EAAQmC,YAAYC,OAC/CN,GAEJ9B,EAAQqC,WAAWzG,GAEnB6F,EAAc7F,GAAM,E,IAGvB,CAACA,EAAMoE,EAASC,EAAkBwB,IAE9B,CACLC,MAAO,CACLrE,SAAU,SAACiF,GACT,IAAMjH,EElFC,SAACiH,GAAc,OAC5B7F,EAAS6F,IAAWA,EAAgBC,OAChCC,EAAiBF,EAAgBC,QAC9BD,EAAgBC,OAAOE,QACvBH,EAAgBC,OAAOlH,MAC1BiH,CAAK,CF6EWI,CAAmBJ,GACjClC,EAAmB/E,GAEnBiG,EAAcjE,SAAS,CACrBkF,OAAQ,CACNlH,QACAO,KAAMA,GAERV,KAAM8B,EAAOE,Q,EAGjBE,OAAQ,WACNkE,EAAclE,OAAO,CACnBmF,OAAQ,CACNlH,QACAO,KAAMA,GAERV,KAAM8B,EAAOC,M,EAGjBrB,OACAP,QACAsH,IAAK,SAACC,GACJ,IAAMlB,EAAQpD,EAAI0B,EAAQ2B,QAAS/F,GAE/BgH,GAAOlB,GAASkB,EAAIC,QACtBnB,EAAME,GAAGe,IAAM,CACbE,MAAO,kBAAMD,EAAIC,OAAO,EACxBC,kBAAmB,SAACC,GAAe,OACjCH,EAAIE,kBAAkBC,EAAQ,EAChCC,eAAgB,kBAAMJ,EAAII,gBAAgB,GAG/C,GAEHlF,YACAmF,WAAY,CACVC,UAAW5E,EAAIR,EAAU+C,OAAQjF,GACjC4E,UAAWlC,EAAIR,EAAU2C,YAAa7E,GACtCuH,YAAa7E,EAAIR,EAAU4C,cAAe9E,GAC1CwH,MAAO9E,EAAIR,EAAU+C,OAAQjF,IAGnC,C,IG/HMyH,EAAa,SAIjBhE,GAA2C,OACxCA,EAAMiE,OAAOxD,EAAmCT,GAAM,ECF3D,EAAe,SACbzD,EACA2H,EACA1C,EACA3F,EACA6H,GAAuB,OAEvBQ,E,+BAES1C,EAAOjF,IAAK,CACf4H,MAAO,OAAF,wBACC3C,EAAOjF,IAASiF,EAAOjF,GAAO4H,MAAQ3C,EAAOjF,GAAO4H,MAAQ,CAAC,GAAC,eACjEtI,EAAO6H,IAAW,MAGvB,CAAC,CAAC,ECrBR,EAAe,SAAC1H,GAAa,MAAK,QAAQoI,KAAKpI,EAAM,ECErD,EAAe,SAACqI,GAAa,OAC3B/G,EAAQ+G,EAAMC,QAAQ,YAAa,IAAI/G,MAAM,SAAS,E,SCGhCgH,EACtBC,EACAtH,EACAlB,GAOA,IALA,IAAIyI,GAAS,EACPC,EAAWC,EAAMzH,GAAQ,CAACA,GAAQ0H,EAAa1H,GAC/CiC,EAASuF,EAASvF,OAClB0F,EAAY1F,EAAS,IAElBsF,EAAQtF,GAAQ,CACvB,IAAM1B,EAAMiH,EAASD,GACjBK,EAAW9I,EAEf,GAAIyI,IAAUI,EAAW,CACvB,IAAME,EAAWP,EAAO/G,GACxBqH,EACE1H,EAAS2H,IAAa5I,MAAMC,QAAQ2I,GAChCA,EACCC,OAAON,EAASD,EAAQ,IAEzB,CAAC,EADD,EAEP,CACDD,EAAO/G,GAAOqH,EACdN,EAASA,EAAO/G,EACjB,CACD,OAAO+G,CACT,CC3BA,IAAMS,EAAe,SAAfA,EACJC,EACA7E,EACA8E,GAA0D,IAEN,EAFM,cAExCA,GAAepG,OAAOG,KAAKgG,IAAO,IAApD,IAAK,EAAL,qBAAsD,KAA3CzH,EAAG,QACN4E,EAAQpD,EAAIiG,EAAQzH,GAE1B,GAAI4E,EAAO,CACT,IAAME,EAAKF,EAAME,GACX9F,EAAU4C,EAAKgD,EAAO,MAE5B,GAAIE,GAAMlC,EAASkC,EAAGhG,MAAO,CAC3B,GAAIgG,EAAGe,IAAIE,OAAS9F,EAAY6E,EAAGe,IAAIE,SACrC,MACK,GAAIjB,EAAG6C,KAAM,CAClB7C,EAAG6C,KAAK,GAAG5B,QACX,KACD,C,MACQpG,EAASX,IAClBwI,EAAaxI,EAAS4D,EAEzB,C,CACF,+BACH,ECdA,IChBA,EAAe,SAACrE,GAAc,MACX,oBAAVA,CAAoB,E,SCELqJ,EAAevJ,GACrC,IAAIwC,EACElC,EAAUD,MAAMC,QAAQN,GAE9B,GAAIA,aAAgBC,KAClBuC,EAAO,IAAIvC,KAAKD,QACX,GAAIA,aAAgBwJ,IACzBhH,EAAO,IAAIgH,IAAIxJ,OACV,KAAIM,IAAWgB,EAAStB,GAU7B,OAAOA,EARP,IAAK,IAAM2B,KADXa,EAAOlC,EAAU,GAAK,CAAC,EACLN,EAAM,CACtB,GAAIyJ,EAAWzJ,EAAK2B,IAAO,CACzBa,EAAOxC,EACP,KACD,CACDwC,EAAKb,GAAO4H,EAAYvJ,EAAK2B,GAC9B,CAGF,CAED,OAAOa,CACT,C,SCmCwBkH,IACtB,IAAIC,EAA4B,GAmBhC,MAAO,CACDC,gBACF,OAAOD,C,EAETrF,KArBW,SAACpE,GACZ,IAAK,IAAL,MAAuByJ,EAAU,eAAE,CAAhB,KACRrF,KAAKpE,EACf,C,EAmBDmE,UAhBgB,SAACwF,GACjB,IAAMC,EAhDV,WACE,IAAIC,EAAwB,GAa5B,MAAO,CACLC,IAZU,SAAClG,GACXiG,EAAUE,KAAKnG,E,EAYfE,YATkB,WAClB,IAAK,IAAL,MAAuB+F,EAAS,gBAC9BG,EADiB,QAGnBH,EAAY,E,EAOhB,CA8ByBI,GACfC,EA7BV,SACEP,EACAC,GAEA,IAAIO,GAAS,EASb,OARAP,EAAaE,KAAI,kBAAOK,GAAS,CAAI,IAQ9B,CACL/F,KAPW,SAACpE,GACPmK,GACHR,EAASvF,KAAKpE,E,EAOpB,CAauBoK,CAAiBT,EAAUC,GAE9C,OADAH,EAAWM,KAAKG,GACTN,C,EAaP9F,YAVkB,WAClB2F,EAAa,E,EAWjB,CCnFA,MAAe,SAACzJ,GAAc,OAC5BE,EAAkBF,KAAWC,EAAaD,EAAM,E,SCD1BqK,EAAUC,EAAcC,GAC9C,GAAIC,EAAYF,IAAYE,EAAYD,GACtC,OAAOD,IAAYC,EAGrB,GAAIlK,EAAaiK,IAAYjK,EAAakK,GACxC,OAAOD,EAAQG,YAAcF,EAAQE,UAGvC,IAAMC,EAAQ3H,OAAOG,KAAKoH,GACpBK,EAAQ5H,OAAOG,KAAKqH,GAE1B,GAAIG,EAAMvH,SAAWwH,EAAMxH,OACzB,OAAO,EAGT,IAAK,IAAL,MAAkBuH,EAAK,eAAE,CAApB,IAAMjJ,EAAG,KACNmJ,EAAON,EAAQ7I,GAErB,IAAKkJ,EAAME,SAASpJ,GAClB,OAAO,EAGT,GAAY,QAARA,EAAe,CACjB,IAAMqJ,EAAOP,EAAQ9I,GAErB,GACGpB,EAAauK,IAASvK,EAAayK,IACnC1J,EAASwJ,IAASxJ,EAAS0J,IAC3B3K,MAAMC,QAAQwK,IAASzK,MAAMC,QAAQ0K,IACjCT,EAAUO,EAAME,GACjBF,IAASE,EAEb,OAAO,CAEV,CACF,CAED,OAAO,CACT,CCzCA,MAAe,SACbC,GAAW,MAOP,CACJC,YAAaD,GAAQA,IAASjJ,EAAgBG,SAC9CgJ,SAAUF,IAASjJ,EAAgBC,OACnCmJ,WAAYH,IAASjJ,EAAgBE,SACrCmJ,QAASJ,IAASjJ,EAAgBK,IAClCiJ,UAAWL,IAASjJ,EAAgBI,UACrC,ECjBD,EAAe,SAAClC,GAAc,MAAwC,mBAAVA,CAAmB,ECE/E,EAAe,SAACJ,GAAqB,MAClB,SAAjBA,EAAQC,IAAe,ECHzB,GAAe,SAACG,GAAU,OACxBA,aAAiBqL,WAAW,ECC9B,GAAe,SAACzL,GAAqB,MAClB,oBAAjBA,EAAQC,IAA0B,ECDpC,GAAe,SAACD,GAAqB,MAClB,UAAjBA,EAAQC,IAAgB,ECE1B,GAAe,SAACyH,GAAiB,OAC/BgE,GAAahE,IAAQH,EAAgBG,EAAI,ECN3C,GAAe,SAACtH,GAAc,MAAuC,kBAAVA,CAAkB,ECA7E,GAAiC,qBAAXuL,QACU,qBAAvBA,OAAOF,aACM,qBAAbG,SCET,GAAe,SAAClE,GAAQ,OAAKmE,GAAcnE,IAAQkE,SAASE,SAASpE,EAAI,E,SCcjDqE,GAAMnD,EAAatH,GACzC,IAII0K,EAJEC,EAAalD,EAAMzH,GAAQ,CAACA,GAAQ0H,EAAa1H,GACjD4K,EACiB,GAArBD,EAAW1I,OAAcqF,EAd7B,SAAiBA,EAAaqD,GAI5B,IAHA,IAAM1I,EAAS0I,EAAWE,MAAM,GAAI,GAAG5I,OACnCsF,EAAQ,EAELA,EAAQtF,GACbqF,EAAS9G,EAAY8G,GAAUC,IAAUD,EAAOqD,EAAWpD,MAG7D,OAAOD,CACT,CAKsCwD,CAAQxD,EAAQqD,GAC9CpK,EAAMoK,EAAWA,EAAW1I,OAAS,GAGvC2I,UACKA,EAAYrK,GAGrB,IAAK,IAAIwK,EAAI,EAAGA,EAAIJ,EAAWE,MAAM,GAAI,GAAG5I,OAAQ8I,IAAK,CACvD,IAAIxD,GAAS,EACTyD,OAAS,EACPC,EAAeN,EAAWE,MAAM,IAAKE,EAAI,IACzCG,EAAqBD,EAAahJ,OAAS,EAMjD,IAJI8I,EAAI,IACNL,EAAiBpD,KAGVC,EAAQ0D,EAAahJ,QAAQ,CACpC,IAAMkJ,EAAOF,EAAa1D,GAC1ByD,EAAYA,EAAYA,EAAUG,GAAQ7D,EAAO6D,GAG/CD,IAAuB3D,IACrBrH,EAAS8K,IAAc5I,EAAc4I,IACpC/L,MAAMC,QAAQ8L,KACZA,EAAUrL,QACT,SAACf,GAAI,OACFsB,EAAStB,KAAUwD,EAAcxD,IAAUwM,EAAUxM,EAAK,IAC7DqD,UAENyI,SAAwBA,EAAeS,UAAe7D,EAAO6D,IAG/DT,EAAiBM,CAClB,CACF,CAED,OAAO1D,CACT,CCrDA,IAAM+D,GAAqC,CACzCvM,OAAO,EACPuF,SAAS,GAGLiH,GAAc,CAAExM,OAAO,EAAMuF,SAAS,GAE5C,GAAe,SAACkH,GACd,GAAItM,MAAMC,QAAQqM,GAAU,CAC1B,GAAIA,EAAQtJ,OAAS,EAAG,CACtB,IAAM6C,EAASyG,EACZ5L,QAAO,SAAC6L,GAAM,OAAKA,GAAUA,EAAOtF,UAAYsF,EAAOzI,QAAQ,IAC/D0I,KAAI,SAACD,GAAM,OAAKA,EAAO1M,KAAK,IAC/B,MAAO,CAAEA,MAAOgG,EAAQT,UAAWS,EAAO7C,OAC3C,CAED,OAAOsJ,EAAQ,GAAGrF,UAAYqF,EAAQ,GAAGxI,SAErCwI,EAAQ,GAAGG,aAAelL,EAAY+K,EAAQ,GAAGG,WAAW5M,OAC1D0B,EAAY+K,EAAQ,GAAGzM,QAA+B,KAArByM,EAAQ,GAAGzM,MAC1CwM,GACA,CAAExM,MAAOyM,EAAQ,GAAGzM,MAAOuF,SAAS,GACtCiH,GACFD,EACL,CAED,OAAOA,EACT,EC/BA,GAAe,SACbvM,EAAU,OACR6M,EAAa,EAAbA,cAAeC,EAAW,EAAXA,YAAaC,EAAU,EAAVA,WAAU,OAExCrL,EAAY1B,GACRA,EACA6M,EACU,KAAV7M,EACEgN,KACChN,EACH8M,EACA,IAAI/M,KAAKC,GACT+M,EACAA,EAAW/M,GACXA,CAAK,ECZLiN,GAAkC,CACtC1H,SAAS,EACTvF,MAAO,MAGT,GAAe,SAACyM,GAA4B,OAC1CtM,MAAMC,QAAQqM,GACVA,EAAQjL,QACN,SAAC0L,EAAUR,GAAM,OACfA,GAAUA,EAAOtF,UAAYsF,EAAOzI,SAChC,CACEsB,SAAS,EACTvF,MAAO0M,EAAO1M,OAEhBkN,CAAQ,GACdD,IAEFA,EAAa,E,SCXKE,GAAc5G,GACpC,IAAMe,EAAMf,EAAGe,IAEf,KAAIf,EAAG6C,KAAO7C,EAAG6C,KAAKgE,OAAM,SAAC9F,GAAG,OAAKA,EAAIrD,QAAQ,IAAIqD,EAAIrD,UAIzD,OAAIoJ,EAAY/F,GACPA,EAAIgG,MAGThC,GAAahE,GACRiG,GAAchH,EAAG6C,MAAMpJ,MAG5BwN,GAAiBlG,GACZ,YAAIA,EAAImG,iBAAiBd,KAAI,YAAQ,SAAL3M,KAAiB,IAGtD0N,EAAWpG,GACNqG,GAAiBpH,EAAG6C,MAAMpJ,MAG5B4N,GAAgBlM,EAAY4F,EAAItH,OAASuG,EAAGe,IAAItH,MAAQsH,EAAItH,MAAOuG,EAC5E,CCzBA,OAAe,SACb4C,EACA7C,EACAuH,EACAC,GAEA,IAE8B,EAFxB5E,EAAiD,CAAC,EAAE,cAEvCC,GAAW,IAA9B,IAAK,EAAL,qBAAgC,KAArB5I,EAAI,QACP8F,EAAepD,EAAIqD,EAAS/F,GAElC8F,GAASkC,EAAIW,EAAQ3I,EAAM8F,EAAME,G,CAClC,+BAED,MAAO,CACLsH,eACAvN,MAAO,OAAF,IAAE,CAAI6I,GACXD,SACA4E,4BAEJ,EC5BA,GAAe,SAACrB,GAAoB,OAClCA,EAAQjG,QACPiG,EAAQsB,UACPtB,EAAQuB,KACRvB,EAAQwB,KACRxB,EAAQyB,WACRzB,EAAQ0B,WACR1B,EAAQ2B,SACR3B,EAAQ4B,SAAS,E,SCNGC,GACtB9I,EACAc,EACA/F,GAKA,IAAMwH,EAAQ9E,EAAIuC,EAAQjF,GAE1B,GAAIwH,GAASY,EAAMpI,GACjB,MAAO,CACLwH,QACAxH,QAMJ,IAFA,IAAMD,EAAQC,EAAKgB,MAAM,KAElBjB,EAAM6C,QAAQ,CACnB,IAAMoL,EAAYjO,EAAMkO,KAAK,KACvBnI,EAAQpD,EAAIqD,EAASiI,GACrBE,EAAaxL,EAAIuC,EAAQ+I,GAE/B,GAAIlI,IAAUlG,MAAMC,QAAQiG,IAAU9F,IAASgO,EAC7C,MAAO,CAAEhO,QAGX,GAAIkO,GAAcA,EAAW5O,KAC3B,MAAO,CACLU,KAAMgO,EACNxG,MAAO0G,GAIXnO,EAAMoO,KACP,CAED,MAAO,CACLnO,OAEJ,C,SC1CgBoO,GAGdzH,EAAW7E,GACX,GAAImI,EAAYtD,IAAWsD,EAAYnI,GACrC,OAAOA,EAGT,IAAK,IAAMZ,KAAOY,EAAQ,CACxB,IAAMuM,EAAc1H,EAAOzF,GACrBoN,EAAcxM,EAAOZ,GAE3B,IACEyF,EAAOzF,GACJL,EAASwN,IAAgBxN,EAASyN,IAClC1O,MAAMC,QAAQwO,IAAgBzO,MAAMC,QAAQyO,GACzCF,GAAUC,EAAaC,GACvBA,C,CACN,SAAO,CACV,CAED,OAAO3H,CACT,CCnBA,SAAS4H,GAKP9I,EACA+I,EACA3J,EACA4J,EACAC,GAIA,IAFA,IAAIxG,GAAS,IAEJA,EAAQzC,EAAO7C,QAAQ,CAC9B,IAAK,IAAM1B,KAAOuE,EAAOyC,GACnBtI,MAAMC,QAAQ4F,EAAOyC,GAAOhH,MAC7B2D,EAAYqD,KAAWrD,EAAYqD,GAAS,CAAC,GAC9CrD,EAAYqD,GAAOhH,GAAO,GAC1BqN,GACE9I,EAAOyC,GAAOhH,GACdwB,EAAI8L,EAActG,IAAU,CAAC,EAAGhH,EAAK,IACrC2D,EAAYqD,GAAOhH,GACnB2D,EAAYqD,GACZhH,KAGDvB,EAAkB6O,IACnB1E,EAAUpH,EAAI8L,EAActG,IAAU,CAAC,EAAGhH,GAAMuE,EAAOyC,GAAOhH,IAC1D8G,EAAInD,EAAYqD,IAAU,CAAC,EAAGhH,GAC7B2D,EAAYqD,GAAS,OAAH,wBACdrD,EAAYqD,IAAM,eACpBhH,GAAM,IAKjBuN,IACG5J,EAAYjC,eACN6L,EAAWC,EACrB,CAED,OAAO7J,CACT,CAEA,OAAe,SACbY,EACA+I,EACA3J,GAA2C,OAE3CuJ,GACEG,GAAe9I,EAAQ+I,EAAe3J,EAAY2G,MAAM,EAAG/F,EAAO7C,SAClE2L,GAAeC,EAAe/I,EAAQZ,EAAY2G,MAAM,EAAG/F,EAAO7C,SACnE,EC1DH,GAAe,SACb+L,EACApH,EACAqH,EACAC,EAIArE,GAQA,OAAIA,EAAKI,WAEGgE,GAAepE,EAAKK,YACrBtD,GAAaoH,IACbC,EAAcC,EAAenE,SAAWF,EAAKE,WAC9CiE,IACCC,EAAcC,EAAelE,WAAaH,EAAKG,aACjDgE,EAGX,ECtBA,GAAe,SAAI5H,EAAQ/G,GAAY,OACpCe,EAAQ2B,EAAIqE,EAAK/G,EAAM,KAAK4C,QAAUwI,GAAMrE,EAAK/G,EAAK,ECAzD,GAAe,SAACP,GAAc,OAC5BqP,GAASrP,IAAU,iBAAqBA,EAAqB,ECN/D,GAAe,SAACA,GAAc,OAAsBA,aAAiBsP,MAAM,E,SCInDC,GACtBlO,EACAiG,GACiB,IAAjBzH,EAAO,UAAH,6CAAG,WAEP,GACE2P,GAAUnO,IACTlB,MAAMC,QAAQiB,IAAWA,EAAO+L,MAAMoC,KACtClD,EAAUjL,KAAYA,EAEvB,MAAO,CACLxB,OACA6H,QAAS8H,GAAUnO,GAAUA,EAAS,GACtCiG,MAGN,CChBA,OAAe,SAACmI,GAA+B,OAC7CrO,EAASqO,KAAoBC,GAAQD,GACjCA,EACA,CACEzP,MAAOyP,EACP/H,QAAS,GACV,ECUP,oDAAe,WACbrB,EACAsJ,EACAzH,EACA4F,GAAmC,kLAezB,GAfyB,EAgB/BzH,EAAME,GAbRe,EAAG,EAAHA,IACA8B,EAAI,EAAJA,KACA2E,EAAQ,EAARA,SACAG,EAAS,EAATA,UACAC,EAAS,EAATA,UACAH,EAAG,EAAHA,IACAC,EAAG,EAAHA,IACAG,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACA9N,EAAI,EAAJA,KACAsM,EAAa,EAAbA,cACArG,EAAK,EAALA,MACAvC,EAAQ,EAARA,SAEGuC,IAASvC,EAAQ,yCACb,CAAC,GAAC,OAqCV,GAnCK2L,EAA6BxG,EAAOA,EAAK,GAAM9B,EAC/CuI,EAAmB,SAACnI,GACpBoG,GAA6B8B,EAASjI,iBACxCiI,EAASnI,kBAAkB6E,EAAU5E,GAAW,GAAKA,GAAW,KAChEkI,EAASjI,iB,EAGPI,EAA6B,CAAC,EAC9B+H,EAAUxE,GAAahE,GACvBoG,EAAavG,EAAgBG,GAC7ByI,EAAoBD,GAAWpC,EAC/BsC,GACFnD,GAAiBQ,EAAY/F,MAAUA,EAAItH,OAC9B,KAAf2P,GACCxP,MAAMC,QAAQuP,KAAgBA,EAAWxM,OACtC8M,EAAoBC,EAAaC,KACrC,KACA5P,EACA2H,EACAH,GAEIqI,EAAmB,SACvBC,EACAC,EACAC,GAE0C,IAD1CC,EAAU,UAAH,6CAAGpO,EACVqO,EAAU,UAAH,6CAAGrO,EAEJsF,EAAU2I,EAAYC,EAAmBC,EAC/CxI,EAAMxH,GAAQ,OAAH,QACTV,KAAMwQ,EAAYG,EAAUC,EAC5B/I,UACAJ,OACG2I,EAAkBI,EAAYG,EAAUC,EAAS/I,G,GAKtDqG,MACGgC,IAAsBC,GAAW9P,EAAkByP,KACnDrD,EAAUqD,KAAgBA,GAC1BjC,IAAeC,GAAiBvE,GAAM7D,SACtCuK,IAAYvC,GAAcnE,GAAM7D,SAAS,iBAEtB,GAFsB,EAEjBiK,GAAUzB,GACjC,CAAE/N,QAAS+N,EAAUrG,QAASqG,GAC9B2C,GAAmB3C,GAFf/N,EAAK,EAALA,MAAO0H,EAAO,EAAPA,SAIX1H,EAAO,CAAF,gBAML,GALF+H,EAAMxH,GAAQ,OAAH,QACTV,KAAMuC,EACNsF,UACAJ,IAAKsI,GACFK,EAAkB7N,EAAiCsF,IAEnDQ,EAA0B,CAAF,gBACD,OAA1B2H,EAAiBnI,GAAS,kBACnBK,GAAK,WAKbiI,GAAa9P,EAAkB8N,IAAS9N,EAAkB+N,GAAK,iBAwBjE,GArBK0C,EAAYD,GAAmBzC,GAC/B2C,EAAYF,GAAmB1C,GAEhChF,MAAM2G,IAUHkB,EACHvJ,EAAyBwF,aAAe,IAAI/M,KAAK4P,GAChDN,GAASsB,EAAU3Q,SACrBqQ,EAAYQ,EAAY,IAAI9Q,KAAK4Q,EAAU3Q,QAEzCqP,GAASuB,EAAU5Q,SACrB8Q,EAAYD,EAAY,IAAI9Q,KAAK6Q,EAAU5Q,UAfvC+Q,EACHzJ,EAAyBuF,eAAiBmE,WAAWrB,GACnDzP,EAAkByQ,EAAU3Q,SAC/BqQ,EAAYU,EAAcJ,EAAU3Q,OAEjCE,EAAkB0Q,EAAU5Q,SAC/B8Q,EAAYC,EAAcH,EAAU5Q,SAapCqQ,IAAaS,EAAS,iBAOtB,GANFV,IACIC,EACFM,EAAUjJ,QACVkJ,EAAUlJ,QACVtF,EACAA,GAEG8F,EAA0B,CAAF,gBACY,OAAvC2H,EAAiB9H,EAAMxH,GAAOmH,SAAS,kBAChCK,GAAK,YAKbmG,IAAaC,GAAe6B,IAAWX,GAASM,GAAW,iBAQnB,GAPrCsB,EAAkBP,GAAmBxC,GACrCgD,GAAkBR,GAAmBvC,GACrC,IACHjO,EAAkB+Q,EAAgBjR,QACnC2P,EAAWxM,OAAS8N,EAAgBjR,MAChC,IACHE,EAAkBgR,GAAgBlR,QACnC2P,EAAWxM,OAAS+N,GAAgBlR,OAElC,KAAa,GAAS,iBAKtB,GAJFoQ,EACE,GACAa,EAAgBvJ,QAChBwJ,GAAgBxJ,SAEbQ,EAA0B,CAAF,gBACY,OAAvC2H,EAAiB9H,EAAMxH,GAAOmH,SAAS,kBAChCK,GAAK,YAKdqG,GAAY4B,IAAWX,GAASM,GAAW,iBACT,GADS,GACJe,GAAmBtC,GAA7C+C,GAAY,GAAnBnR,MAAqB,GAAO,GAAP0H,SAEzBgI,GAAQyB,KAAkBxB,EAAWyB,MAAMD,IAAa,iBAMxD,GALFpJ,EAAMxH,GAAQ,OAAH,QACTV,KAAMuC,EACNsF,QAAA,GACAJ,OACG2I,EAAkB7N,EAAgC,KAElD8F,EAA0B,CAAF,gBACD,OAA1B2H,EAAiB,IAAS,kBACnB9H,GAAK,YAKdsG,EAAU,CAAF,oBACN9E,EAAW8E,GAAW,CAAF,iCACDA,EAASsB,GAAW,QACe,GADlDtO,GAAS,EAAH,OACNgQ,GAAgB9B,GAAiBlO,GAAQuO,IAE5B,CAAF,gBAOb,GANF7H,EAAMxH,GAAQ,OAAH,wBACN8Q,IACApB,EACD7N,EACAiP,GAAc3J,UAGbQ,EAA0B,CAAF,gBACa,OAAxC2H,EAAiBwB,GAAc3J,SAAS,kBACjCK,GAAK,oCAGP3G,EAASiN,GAAW,CAAF,gBACvBiD,GAAmB,CAAC,EAAe,wBAErBjD,GAAQ,+CAAZ,GAAH5M,GAAG,WACP6B,EAAcgO,KAAsBpJ,EAAwB,qDAI3B,OAJ2B,KAI3CqH,GAAgB,UAC9BlB,EAAS5M,IAAKkO,GAAW,yBAC/BC,EAAQ,KACRnO,IAHI,IAAgB,EAAH,yBAOjB6P,GAAmB,OAAH,wBACX,IACArB,EAAkBxO,GAAK,GAAciG,UAG1CmI,EAAiB,GAAcnI,SAE3BQ,IACFH,EAAMxH,GAAQ+Q,KAEjB,2BAGEhO,EAAcgO,IAAmB,CAAF,gBAIhC,GAHFvJ,EAAMxH,GAAQ,OAAH,QACT+G,IAAKsI,GACF0B,IAEApJ,EAA0B,CAAF,yCACpBH,GAAK,QAMG,OAAvB8H,GAAiB,GAAM,kBAChB9H,GAAK,4CACb,gBAnOD,4CC4DMwJ,GAAiB,CACrBxG,KAAMjJ,EAAgBG,SACtBmN,eAAgBtN,EAAgBE,SAChCwP,kBAAkB,GAGdC,GAAsC,qBAAXlG,O,SAEjBmG,KAIkC,IAkC5CC,EAlCJ3N,EAAA,uDAA8C,CAAC,EAE3C0C,EAAW,OAAH,wBACP6K,IACAvN,GAEDgB,EAAsC,CACxCG,SAAS,EACTG,cAAc,EACdF,YAAa,CAAC,EACd+J,aAAa,EACbyC,YAAa,EACbvM,cAAe,CAAC,EAChBwM,cAAc,EACdC,oBAAoB,EACpBvM,SAAS,EACTC,OAAQ,CAAC,GAEPc,EAAU,CAAC,EACXxB,EAAiB4B,EAASqI,eAAiB,CAAC,EAC5ClK,EAAc6B,EAAS9B,iBACvB,CAAC,EACDyE,EAAYvE,GACZgC,EAAc,CAChBC,QAAQ,EACRP,OAAO,EACPuL,OAAO,GAELnL,EAAgB,CAClBJ,MAAO,IAAI8C,IACX0I,QAAS,IAAI1I,IACbzC,MAAO,IAAIyC,IACXyI,MAAO,IAAIzI,KAGT2I,EAAQ,EACRC,EAAoD,CAAC,EACnDxP,EAAkB,CACtByC,SAAS,EACTC,aAAa,EACbC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,QAAQ,GAEJI,EAAoC,CACxCmM,MAAOvI,IACP7E,QAAS6E,IACT3C,MAAO2C,IACP3D,MAAO2D,KAGH2I,EAA6BC,EAAmB1L,EAASqE,MACzDsH,EAA4BD,EAAmB1L,EAAS0I,gBACxDkD,EACJ5L,EAASmH,eAAiB/L,EAAgBK,IAEtCoQ,EACJ,SAAqBlO,EAAamO,GAAY,OAC9C,WAAa,2BAATC,EAAS,yBAATA,EAAS,gBACXC,aAAaT,GACbA,EAAQ1G,OAAOoH,YAAW,kBAAMtO,EAAQ,aAAIoO,EAAK,GAAED,E,CACpD,EAEGI,EAAiB,SACrBrS,EACA2O,GAAqB,OAEpBA,IACAtI,EAAOiM,UACNjM,EAAOmL,MAAMe,IAAIvS,IACjBqG,EAAOmL,MAAMe,KAAKvS,EAAK6Q,MAAM,QAAU,IAAI,IAAI,EAE7C2B,EAAY,iDAAG,WAAOC,GAA0B,iFACjC,GAAfzN,GAAU,GAEV7C,EAAgB6C,QAAS,CAAF,oBACfmB,EAASuM,SAAQ,iBACV,OADU,KACvB3P,EAAa,SAAQ4P,IAAgB,mBAAE1N,OAAM,6DACvC2N,GAAyB7M,GAAS,GAAK,4BAFjDf,EAAU,EAAH,GAIFyN,GAAoBzN,IAAYP,EAAWO,UAC9CP,EAAWO,QAAUA,EACrBK,EAAUC,MAAMzB,KAAK,CACnBmB,aAEH,iCAGIA,GAAO,4CACf,gBAjBiB,sCA+DZ6N,EAAe,SAAC7S,EAAyBwH,GAAiB,OAC9DQ,EAAIvD,EAAWQ,OAAQjF,EAAMwH,GAC7BnC,EAAUC,MAAMzB,KAAK,CACnBoB,OAAQR,EAAWQ,QACnB,EAGE6N,EAAsB,SAC1B9S,EACA+S,EACAhM,GAEA,IAAMjB,EAAepD,EAAIqD,EAAS/F,GAElC,GAAI8F,EAAO,CACT,IAAMlF,EAAe8B,EAAI4B,EAAatE,EAAM0C,EAAI6B,EAAgBvE,IAEhEmB,EAAYP,IACXmG,GAAQA,EAAyBiM,gBAClCD,EACI/K,EACE1D,EACAtE,EACA+S,EAAuBnS,EAAegM,GAAc9G,EAAME,KAE5DiN,GAAcjT,EAAMY,EACzB,CAED2F,EAAYN,OAASuM,G,EAGjBU,EAAsB,SAC1BlT,EACAmT,EACAC,GACmB,IAAnBC,IAAe,UAAH,+CAIRC,GAAe,EACbC,EAA8D,CAClEvT,QAEIwT,EAAyB9Q,EAAI+B,EAAWK,cAAe9E,GAE7D,GAAImC,EAAgByC,QAAS,CAC3B,IAAM6O,EAAsBhP,EAAWG,QAEvCH,EAAWG,QAAU2O,EAAO3O,QAAU8O,KACtCJ,EAAeG,IAAwBF,EAAO3O,OAC/C,CAED,GAAIzC,EAAgB0C,cAAgBuO,EAAkB,CACpD,IAAMO,EAAuBjR,EAAI+B,EAAWI,YAAa7E,GAC1B8J,EAC7BpH,EAAI6B,EAAgBvE,GACpBmT,GAIE/H,GAAM3G,EAAWI,YAAa7E,GAC9BgI,EAAIvD,EAAWI,YAA6B7E,GAAM,GACtDuT,EAAO1O,YAAcJ,EAAWI,YAChCyO,EACEA,GACAK,IAAyBjR,EAAI+B,EAAWI,YAAa7E,EACxD,CAaD,OAXIoT,IAAqBI,IACvBxL,EAAIvD,EAAWK,cAA+B9E,EAAMoT,GACpDG,EAAOzO,cAAgBL,EAAWK,cAClCwO,EACEA,GACCnR,EAAgB2C,eACf0O,IAA2BJ,GAGjCE,GAAgBD,GAAgBhO,EAAUC,MAAMzB,KAAK0P,GAE9CD,EAAeC,EAAS,CAAC,C,EAG5BK,EAAwB,SAAC5T,EAAWP,GAAU,OAClDuI,EACEvD,EAAWI,YACX7E,EACA6T,GACEpU,EACAiD,EAAI6B,EAAgBvE,EAAM,IAC1B0C,EAAI+B,EAAWI,YAAa7E,EAAM,MAGtC8T,GAAgBrP,EAAWI,YAAa7E,EAAK,EAGzC+T,EAAmB,iDAAG,WAC1BtB,EACAzS,EACAgF,EACAwC,EACAH,GAIC,qFAEK2M,EAAqBtR,EAAI+B,EAAWQ,OAAQjF,GAC5CiU,EACJ9R,EAAgB6C,SAAWP,EAAWO,UAAYA,EAEhDvB,EAAMyQ,YAAc1M,GACtB4J,EACEA,GAAsBY,EAASa,EAAcpP,EAAMyQ,aAClClU,EAAMwH,IAEzB2K,aAAaT,GACblK,EACIQ,EAAIvD,EAAWQ,OAAQjF,EAAMwH,GAC7B4D,GAAM3G,EAAWQ,OAAQjF,KAI3BwH,EAASsC,EAAUkK,EAAoBxM,IAASwM,IAC/CjR,EAAcsE,KACf4M,GACDxB,IAEK0B,EAAmB,OAAH,sCACjB9M,GACC4M,EAAoB,CAAEjP,WAAY,CAAC,GAAC,CACxCC,OAAQR,EAAWQ,OACnBjF,SAGFyE,EAAa,OAAH,wBACLA,GACA0P,GAGL9O,EAAUC,MAAMzB,KAAKsQ,IAGvBxC,EAAe3R,KAEXmC,EAAgB4C,eAAiB4M,EAAe3R,KAClDqF,EAAUC,MAAMzB,KAAK,CACnBkB,cAAc,IAEhB4M,EAAiB,CAAC,GACnB,2CACF,gBAvDwB,8CAyDnBgB,EAAc,iDAAG,WAAO3S,GAA0B,+EACtDmG,EAASuM,SAAQ,gCACPvM,EAASuM,SACb,iBAAKpO,GACL6B,EAASiO,QACTC,GACErU,GAAQqG,EAAOJ,MACfF,EACAI,EAASmH,aACTnH,EAASoH,4BAEZ,8CACA,CAAC,EAAkC,iGAZtB,sCAcd+G,EAA2B,iDAAG,WAAOvU,GAA2B,2GAC3C4S,IAAgB,OAEzC,GAFyC,SAAjC1N,EAAM,EAANA,OAEJlF,EAAO,eACUA,GAAK,IAAxB,IAAK,EAAL,qBAAW,EAAI,SACP,EAAQ2C,EAAIuC,EAAQ,IAEtB+C,EAAIvD,EAAWQ,OAAQ,EAAM,GAC7BmG,GAAM3G,EAAWQ,OAAQ,EAC9B,+B,MAEDR,EAAWQ,OAASA,EACrB,yBAEMA,GAAM,2CACd,gBAfgC,sCAiB3B2N,GAAwB,iDAAG,WAC/BjK,EACA4L,GAA8B,uGAC9BH,EAAU,EAAH,6BAAG,CACRI,OAAO,GACR,wBAEkB7L,GAAM,8CACG,GADjB,EAAI,aACP7C,EAAQ6C,EAAO,IAEV,CAAF,gBAE6B,GAD9B8L,EAAiB3O,EAAME,GACvBmN,EAAarQ,EAAKgD,EAAO,OAE3B2O,EAAgB,CAAF,iCACSC,GACvB5O,EACApD,EAAI4B,EAAamQ,EAAezU,MAChC+R,EACA5L,EAASoH,2BACV,QALe,KAAVoH,EAAa,EAAH,MAODF,EAAezU,MAAO,CAAF,gBACX,GAAtBoU,EAAQI,OAAQ,GAEZD,EAAsB,CAAF,oDAKrBA,IACHI,EAAWF,EAAezU,MACtBgI,EACEvD,EAAWQ,OACXwP,EAAezU,KACf2U,EAAWF,EAAezU,OAE5BoL,GAAM3G,EAAWQ,OAAQwP,EAAezU,OAC7C,QAGO,GAHP,KAGHmT,GAAU,uCACDP,GACLO,EACAoB,EACAH,GACD,wDAIAA,EAAQI,OAAK,4CACrB,gBAnD6B,wCAmExBd,GAAwB,SAAC1T,EAAMT,GAAI,OACvCS,GAAQT,GAAQyI,EAAI1D,EAAatE,EAAMT,IACtCuK,EAAU8K,KAAarQ,EAAe,EAGnCsQ,GAAyC,SAC7C9U,EACAa,EACAkU,GAEA,IAAMC,EAAc,OAAH,UACXxO,EAAYN,MACZ3B,EACAnD,EAAYP,GACZ2D,EACAuK,GAAS/O,GAAM,eACZA,EAAQa,GACXA,GAGN,GAAIb,EAAO,CACT,IAAMe,EAASoC,EAAsBnD,GAAOqM,KAC1C,SAAC4B,GAAS,OACR8G,GAAYzO,EAAOmL,MAAMjI,IAAIyE,GAC7BtL,EAAIqS,EAAa/G,EAA+B,IAIpD,OAAOpO,MAAMC,QAAQE,GAASe,EAASA,EAAO,EAC/C,CAGD,OADAgU,IAAazO,EAAOiM,UAAW,GACxByC,C,EAUH9B,GAAgB,SACpBjT,EACAP,GAEsB,IADtByM,EAAA,uDAA0B,CAAC,EAC3BmH,EAAsB,uCAEhBvN,EAAepD,EAAIqD,EAAS/F,GAC9BmT,EAAsB1T,EAE1B,GAAIqG,EAAO,CACT,IAAM2O,EAAiB3O,EAAME,GAEzByO,IACFzM,EAAI1D,EAAatE,EAAMqN,GAAgB5N,EAAOgV,IAE9CtB,EACE6B,IAAS9J,GAAcuJ,EAAe1N,MAAQpH,EAAkBF,GAC5D,GACAA,EAEFqN,EAAY2H,EAAe1N,OAAS+H,GAASqE,GAC/CsB,EAAe1N,IAAIgG,MAAQoG,EAClBlG,GAAiBwH,EAAe1N,KACzC,YAAI0N,EAAe1N,IAAImF,SAAS+I,SAC9B,SAACC,GAAS,OACPA,EAAUC,SACThC,EACA7I,SAAS4K,EAAUzV,MAAM,IAEtBgV,EAAe5L,KACpBjC,EAAgB6N,EAAe1N,KACjC0N,EAAe5L,KAAKjG,OAAS,EACzB6R,EAAe5L,KAAKoM,SAClB,SAACG,GAAW,OACTA,EAAYvO,QAAUjH,MAAMC,QAAQsT,KAC9BA,EAAkBnQ,MACnB,SAACzD,GAAY,OAAKA,IAAS6V,EAAY3V,KAAK,IAE9C0T,IAAeiC,EAAY3V,KAAK,IAEvCgV,EAAe5L,KAAK,GAAGhC,UAAYsM,EAExCsB,EAAe5L,KAAKoM,SAClB,SAACI,GAA0B,OACxBA,EAASxO,QAAUwO,EAAS5V,QAAU0T,CAAU,IAIvDsB,EAAe1N,IAAItH,MAAQ0T,EAG7BE,GACEhO,EAAUjB,QAAQP,KAAK,CACrB4B,OAAQnB,EACRtE,SAGP,EAEAkM,EAAQoJ,aAAepJ,EAAQqJ,cAC9BrC,EAAoBlT,EAAMmT,EAAYjH,EAAQqJ,aAEhDrJ,EAAQsJ,gBAAkBC,GAAQzV,E,EAG9B0V,GAAY,SAAZA,EACJ1V,EACAP,EACAyM,GAEA,IAAK,IAAMyJ,KAAYlW,EAAO,CAC5B,IAAM0T,EAA0C1T,EAAMkW,GAChD3H,EAAY,GAAH,OAAMhO,EAAI,YAAI2V,GACvB7P,EAAQpD,EAAIqD,EAASiI,IAE1B3H,EAAOC,MAAMiM,IAAIvS,IACfiK,EAAYkJ,MACZrN,GAAUA,EAAME,KAClBlG,EAAaqT,GAEVF,GAAcjF,EAAWmF,EAAYjH,GAAS,GAD9CwJ,EAAU1H,EAAWmF,EAAYjH,EAEtC,C,EA2CG0J,GAAY,iDAAkB,WAAOlP,GAAK,6GAGP,GAFjCC,EAASD,EAAMC,OACjB3G,EAAO2G,EAAO3G,OACZ8F,EAAepD,EAAIqD,EAAS/F,IAEvB,CAAF,gBAwCF,GArCCmT,EAAaxM,EAAOrH,KAAOsN,GAAc9G,EAAME,IAAMW,EAAOlH,MAC5DkP,EAAcjI,EAAMpH,OAAS8B,EAAOC,KACpCwU,GACFC,GAAchQ,EAAME,MACnBG,EAASuM,WACThQ,EAAI+B,EAAWQ,OAAQjF,KACvB8F,EAAME,GAAG+P,MACZC,GACErH,EACAjM,EAAI+B,EAAWK,cAAe9E,GAC9ByE,EAAWmK,YACXkD,EACAF,GAEEqE,EAAY5D,EAAerS,EAAM2O,GAEnCA,EACF7I,EAAME,GAAGxE,QAAUsE,EAAME,GAAGxE,OAAOkF,GAC1BZ,EAAME,GAAGvE,UAClBqE,EAAME,GAAGvE,SAASiF,GAGpBsB,EAAI1D,EAAatE,EAAMmT,GAEjB9L,EAAa6L,EACjBlT,EACAmT,EACAxE,GACA,GAGI0E,GAAgBtQ,EAAcsE,IAAe4O,GAElDtH,GACCtJ,EAAUmM,MAAM3N,KAAK,CACnB7D,OACAV,KAAMoH,EAAMpH,QAGZuW,EAAsB,CAAF,yCAEpBxC,GACAhO,EAAUC,MAAMzB,KAAK,OAAD,QAAG7D,QAAUiW,EAAY,CAAC,EAAI5O,KAAc,QAW/D,IAPJsH,GAAesH,GAAa5Q,EAAUC,MAAMzB,KAAK,CAAC,GAEnD8N,EAAe3R,IAAQ2R,EAAe3R,GAAQ,GAE9CmC,EAAgB4C,cACdM,EAAUC,MAAMzB,KAAK,CACnBkB,cAAc,KAGdoB,EAASuM,SAAU,CAAF,iCACMC,EAAe,CAAC3S,IAAM,iBAAvCiF,EAAM,EAANA,OACFiR,EAA4BnI,GAChCtJ,EAAWQ,OACXc,EACA/F,GAEImW,EAAoBpI,GACxB9I,EACAc,EACAmQ,EAA0BlW,MAAQA,GAGpC,EAAQmW,EAAkB3O,MAC1BxH,EAAOmW,EAAkBnW,KAEzBgF,EAAUjC,EAAckC,GAAQ,yCAGxByP,GACJ5O,EACApD,EAAI4B,EAAatE,GACjB+R,EACA5L,EAASoH,2BACV,QANE,OAMF,KACDvN,EAPF,EAAQ,EAAH,qBASWwS,GAAa,GAAK,QAAlCxN,EAAU,EAAH,aAGTc,EAAME,GAAG+P,MAAQN,GAAQ3P,EAAME,GAAG+P,MAElChC,GAAoB,EAAO/T,EAAMgF,EAAS,EAAOqC,GAAY,4CAEhE,gBAjGiB,sCAmGZoO,GAAO,iDAAiC,WAAOzV,GAAI,qGAOpD,GAPsDkM,EAAU,EAAH,6BAAG,CAAC,EAG9DkK,EAAalT,EAAsBlD,GAEzCqF,EAAUC,MAAMzB,KAAK,CACnBkB,cAAc,KAGZoB,EAASuM,SAAU,CAAF,gCACE4B,EACnBnT,EAAYnB,GAAQA,EAAOoW,GAC5B,OAFKnR,EAAS,EAAH,KAIZD,EAAUjC,EAAckC,GACxB8L,EAAmB/Q,GACdoW,EAAWnW,MAAK,SAACD,GAAI,OAAK0C,EAAIuC,EAAQjF,EAAK,IAC5CgF,EAAQ,4BACHhF,EAAM,CAAF,iCAELqW,QAAQzU,IACZwU,EAAWhK,IAAG,iDAAC,WAAO4B,GAAS,iFACQ,OAA/BlI,EAAQpD,EAAIqD,EAASiI,GAAU,SACxB4E,GACX9M,GAASA,EAAME,GAAK,OAAH,IAAG,CAAH,GAAMgI,EAAYlI,GAAUA,GAC9C,mFACF,mDALa,KAMf,QARHiL,EAAmB,EAAH,KASdlE,MAAMtM,SACRiS,IAAe,yCAEoBI,GAAyB7M,GAAQ,QAApEgL,EAAmB/L,EAAU,EAAH,aAmBxB,OAhBJK,EAAUC,MAAMzB,KAAK,OAAD,uCACbiL,GAAS9O,IACbmC,EAAgB6C,SAAWA,IAAYP,EAAWO,QAC/C,CAAC,EACD,CAAEhF,SACFmG,EAASuM,SAAW,CAAE1N,WAAY,CAAC,GAAC,CACxCC,OAAQR,EAAWQ,OACnBF,cAAc,KAGhBmH,EAAQoK,cACLvF,GACDrI,EACE3C,GACA,SAAC7E,GAAG,OAAKwB,EAAI+B,EAAWQ,OAAQ/D,EAAI,GACpClB,EAAOoW,EAAa/P,EAAOJ,OAC3B,kBAEG8K,GAAgB,4CACxB,gBArDY,sCAuDP6D,GAA4C,SAChDwB,GAIA,IAAM3Q,EAAS,OAAH,wBACPlB,GACCgC,EAAYN,MAAQ3B,EAAc,CAAC,GAGzC,OAAOnD,EAAYiV,GACf3Q,EACAqJ,GAASsH,GACT1T,EAAI+C,EAAQ2Q,GACZA,EAAWhK,KAAI,SAACpM,GAAI,OAAK0C,EAAI+C,EAAQzF,EAA0B,G,EAyD/DyG,GAA8C,SAACzG,GAAkB,IACI,EADhBkM,EAAU,UAAH,6CAAG,CAAC,EAAC,cAC7ClM,EAAOkD,EAAsBlD,GAAQqG,EAAOJ,OAAK,IAAzE,IAAK,EAAL,qBAA2E,KAAhE+H,EAAS,QAClB3H,EAAOJ,MAAMsQ,OAAOvI,GACpB3H,EAAOC,MAAMiQ,OAAOvI,GAEhBtL,EAAIqD,EAASiI,KACV9B,EAAQsK,YACXpL,GAAMrF,EAASiI,GACf5C,GAAM9G,EAAa0J,KAGpB9B,EAAQuK,WAAarL,GAAM3G,EAAWQ,OAAQ+I,IAC9C9B,EAAQwK,WAAatL,GAAM3G,EAAWI,YAAamJ,IACnD9B,EAAQyK,aAAevL,GAAM3G,EAAWK,cAAekJ,IACvD7H,EAAS9B,mBACP6H,EAAQ0K,kBACTxL,GAAM7G,EAAgByJ,G,CAE3B,+BAED3I,EAAUmM,MAAM3N,KAAK,CAAC,GAEtBwB,EAAUC,MAAMzB,KAAK,OAAD,wBACfY,GACEyH,EAAQwK,UAAiB,CAAE9R,QAAS8O,MAAhB,CAAC,KAG3BxH,EAAQ2K,aAAerE,G,EAGpB7M,GAA0C,SAA1CA,EAA2C3F,GAAkB,IAAZkM,EAAU,UAAH,6CAAG,CAAC,EAC1DpG,EAAQpD,EAAIqD,EAAS/F,GAyB3B,OAvBAgI,EAAIjC,EAAS/F,EAAM,CACjBgG,GAAI,OAAF,sCACIF,GAASA,EAAME,GAAKF,EAAME,GAAK,CAAEe,IAAK,CAAE/G,UAAQ,CACpDA,OACAiG,OAAO,IACJiG,KAGP7F,EAAOJ,MAAMsD,IAAIvJ,IAEhBmB,EAAY+K,EAAQzM,QAAUuI,EAAI1D,EAAatE,EAAMkM,EAAQzM,OAE9DqG,EACIiG,EAAUG,EAAQxI,WAClBsE,EACE1D,EACAtE,EACAkM,EAAQxI,cACJjD,EACAiC,EAAI4B,EAAatE,EAAM4M,GAAc9G,EAAME,MAEjD8M,EAAoB9S,GAAM,GAEvBkR,GACF,CAAElR,KAAMA,G,6BAEPA,QACI+L,EAAUG,EAAQxI,UAClB,CAAEA,SAAUwI,EAAQxI,UACpB,CAAC,GAAC,CACNjC,SAAUmU,GACVpU,OAAQoU,GACR7O,IAAK,SAAF,oGAAE,WAACA,GACJ,GAAIA,EAAK,CACPpB,EAAS3F,EAAMkM,GACf,IAAI,EAAexJ,EAAIqD,EAAS/F,GAC1B8W,EAAW3V,EAAY4F,EAAItH,QAC7BsH,EAAIgQ,kBACDhQ,EAAIgQ,iBAAiB,yBAAyB,IAGjDhQ,EAEEyI,EAAoBwH,GAA0BF,GAEpD,GACEA,IAAa,EAAM9Q,GAAGe,KACrByI,GACCzO,EAAQ,EAAMiF,GAAG6C,MAAQ,IAAI7F,MAC3B,SAACmJ,GAAM,OAAKA,IAAW2K,CAAQ,IAGnC,OAGF,EAAQ,CACN9Q,GAAIwJ,E,+BAEK,EAAMxJ,IAAE,CACX6C,KAAM,GAAF,mBACC9H,EAAQ,EAAMiF,GAAG6C,MAAQ,IAAIvI,OAAO2W,KAAK,CAC5CH,IAEF/P,IAAK,CAAEzH,KAAMwX,EAASxX,KAAMU,UAAM,+BAG/B,EAAMgG,IAAE,CACXe,IAAK+P,KAIb9O,EAAIjC,EAAS/F,EAAM,KAEjBkM,IAAYA,EAAQxI,WACpBoP,EAAoB9S,GAAM,EAAO8W,E,KAC9B,CACL,IAAM,EAAepU,EAAIqD,EAAS/F,EAAM,CAAC,GACnCqE,EACJ8B,EAAS9B,kBAAoB6H,EAAQ7H,iBAEnC,EAAM2B,KACR,EAAMA,GAAGC,OAAQ,GAGnB5B,KAEI+B,EAAmBC,EAAOC,MAAOtG,KAASuG,EAAYC,SAExDH,EAAOoL,QAAQlI,IAAIvJ,EACtB,C,OAiKX,MAAO,CACLoE,QAAS,CACPuB,YACAc,cACAkM,iBACAkC,aACAnB,aACAlB,eACA0E,iBAxrBqB,eACU,EADV,cACJ7Q,EAAOoL,SAAO,IAAjC,IAAK,EAAL,qBAAmC,KAAxB,EAAI,QACP3L,EAAepD,EAAIqD,EAAS,GAElCD,IACGA,EAAME,GAAG6C,KACN/C,EAAME,GAAG6C,KAAKgE,OAAM,SAAC9F,GAAG,OAAMkQ,GAAKlQ,EAAI,KACtCkQ,GAAKnR,EAAME,GAAGe,OACnBN,GAAW,E,CACd,+BAEDJ,EAAOoL,QAAU,IAAI1I,G,EA8qBnBoO,kBAj9B6C,SAC/CnX,EACAoX,EACAlF,GAGsB,IAFtBzM,EAAS,UAAH,6CAAG,GACT4R,IAAkB,UAAH,+CACfC,IAAkB,UAAH,+CAIf,GAFA/Q,EAAYC,QAAS,EAEjB8Q,GAAmB5U,EAAIqD,EAAS/F,GAAO,CACzC,IAAM+U,EAAcqC,EAAO1U,EAAIqD,EAAS/F,GAAOkS,EAAKqF,KAAMrF,EAAKsF,MAC/DH,GAAmBrP,EAAIjC,EAAS/F,EAAM+U,EACvC,CAED,GAAInV,MAAMC,QAAQ6C,EAAI+B,EAAWQ,OAAQjF,IAAQ,CAC/C,IAAMiF,EAASmS,EAAO1U,EAAI+B,EAAWQ,OAAQjF,GAAOkS,EAAKqF,KAAMrF,EAAKsF,MACpEH,GAAmBrP,EAAIvD,EAAWQ,OAAQjF,EAAMiF,GAChD6O,GAAgBrP,EAAWQ,OAAQjF,EACpC,CAED,GAAImC,EAAgB2C,eAAiBpC,EAAI+B,EAAWK,cAAe9E,GAAO,CACxE,IAAM8E,EAAgBsS,EACpB1U,EAAI+B,EAAWK,cAAe9E,GAC9BkS,EAAKqF,KACLrF,EAAKsF,MAEPH,GACErP,EAAIvD,EAAWK,cAA+B9E,EAAM8E,GACtDgP,GAAgBrP,EAAWK,cAAe9E,EAC3C,EAEGmC,EAAgB0C,aAAe1C,EAAgByC,UACjDgP,EAAsB5T,EAAMyF,GAG9BJ,EAAUC,MAAMzB,KAAK,CACnBe,QAAS8O,GAAU1T,EAAMyF,GACzBZ,YAAaJ,EAAWI,YACxBI,OAAQR,EAAWQ,OACnBD,QAASP,EAAWO,S,EA06BpByS,eAzoBmB,SAACzX,GAAuB,OAC7C0C,EACE6D,EAAYN,MAAQ3B,EAAcC,EAClCvE,EACAyD,EAAMY,iBAAmB3B,EAAI6B,EAAgBvE,EAAM,IAAM,GAC1D,EAqoBCqF,YACAlD,kBACI4D,cACF,OAAOA,C,EAELA,YAAQtG,GACVsG,EAAUtG,C,EAER6E,kBACF,OAAOA,C,EAELA,gBAAY7E,GACd6E,EAAc7E,C,EAEZ8G,kBACF,OAAOA,C,EAELA,gBAAY9G,GACd8G,EAAc9G,C,EAEZ8E,qBACF,OAAOA,C,EAELA,mBAAe9E,GACjB8E,EAAiB9E,C,EAEf4G,aACF,OAAOA,C,EAELA,WAAO5G,GACT4G,EAAS5G,C,EAEPgF,iBACF,OAAOA,C,EAELA,eAAWhF,GACbgF,EAAahF,C,EAEX0G,eACF,OAAOA,C,EAELA,aAAS1G,GACX0G,EAAW,OAAH,wBACHA,GACA1G,EAEN,GAEHgW,WACA9P,YACA+R,aAxNA,SAACC,EAASC,GAAS,wDAAK,WAAOC,GAAC,yFAU3B,GATCA,IACFA,EAAEC,gBAAkBD,EAAEC,iBACtBD,EAAEE,SAAWF,EAAEE,WAEbC,GAAoB,EACpBjD,EAAW,iBAAazQ,GAE5Be,EAAUC,MAAMzB,KAAK,CACnByN,cAAc,IACb,UAGGnL,EAASuM,SAAU,CAAF,gCACcC,IAAgB,gBAAzC1N,EAAM,EAANA,OAAQQ,EAAM,EAANA,OAChBhB,EAAWQ,OAASA,EACpB8P,EAActP,EAAO,yCAEfmN,GAAyB7M,GAAQ,YAIvChD,EAAc0B,EAAWQ,UACzBzC,OAAOG,KAAK8B,EAAWQ,QAAQ4H,OAAM,SAAC7M,GAAI,OAAK0C,EAAIqS,EAAa/U,EAAK,IAAC,iBAKnE,OAHHqF,EAAUC,MAAMzB,KAAK,CACnBoB,OAAQ,CAAC,EACTqM,cAAc,IACb,UACGqG,EAAQ5C,EAAa8C,GAAE,gCAEpB,GAFoB,KAE7BD,GAAS,uCAAWA,EAAUnT,EAAWQ,OAAQ4S,GAAE,QACnD1R,EAAS8K,kBACPvI,EACE3C,GACA,SAAC7E,GAAG,OAAKwB,EAAI+B,EAAWQ,OAAQ/D,EAAI,GACpCmF,EAAOJ,OACP,gCAGoB,MAHpB,0BAGN+R,GAAoB,EAAM,aAWvB,OAXuB,UAG1BvT,EAAWmK,aAAc,EACzBvJ,EAAUC,MAAMzB,KAAK,CACnB+K,aAAa,EACb0C,cAAc,EACdC,mBACExO,EAAc0B,EAAWQ,SAAW+S,EACtC3G,YAAa5M,EAAW4M,YAAc,EACtCpM,OAAQR,EAAWQ,SAClB,6EAEN,mDArDkB,EAqDlB,EAoKDuM,MAjXwC,SACxCxR,EAIAY,GAAsB,OAEtBoI,EAAWhJ,GACPqF,EAAUmM,MAAM5N,UAAU,CACxBC,KAAM,SAACoU,GAAS,OACdjY,EACE6U,QACEpU,EACAG,GAEFqX,EACD,IAELpD,GACE7U,EACAY,GACA,EACD,EA4VLsX,SAnmB8C,SAC9ClY,EACAP,GACY,IAAZyM,EAAU,UAAH,6CAAG,CAAC,EAELpG,EAAQpD,EAAIqD,EAAS/F,GACrBmY,EAAe9R,EAAOC,MAAMiM,IAAIvS,GAEtCgI,EAAI1D,EAAatE,EAAMP,GAEnB0Y,GACF9S,EAAUiB,MAAMzC,KAAK,CACnB7D,OACAyF,OAAQnB,KAIPnC,EAAgByC,SAAWzC,EAAgB0C,cAC5CqH,EAAQoJ,cAER1B,EAAsB5T,EAAMP,GAE5B4F,EAAUC,MAAMzB,KAAK,CACnB7D,OACA6E,YAAaJ,EAAWI,YACxBD,QAAS8O,GAAU1T,EAAMP,QAI7BqG,GAAUA,EAAME,IAAOrG,EAAkBF,GAErCwT,GAAcjT,EAAMP,EAAOyM,GAAS,GADpCwJ,GAAU1V,EAAMP,EAAOyM,GAI7BmG,EAAerS,IAASqF,EAAUC,MAAMzB,KAAK,CAAC,GAC9CwB,EAAUmM,MAAM3N,KAAK,CACnB7D,Q,EAgkBF4U,aACAwD,MArKwC,SACxCC,GACqB,IAArBC,EAAmB,UAAH,6CAAG,CAAC,EAEdC,GAAwBxV,EAAcsV,GACtCG,EAAgBH,GAAc9T,EAC9BkU,EAAqB3P,EAAY0P,GAMvC,GAJKF,EAAiBI,oBACpBnU,EAAiBiU,IAGdF,EAAiBK,WAAY,CAChC,GAAI3D,GAAO,KACsB,EADtB,cACU3O,EAAOJ,OAAK,IAA/B,IAAK,EAAL,qBAAiC,KAAtB,EAAI,QACPH,EAAQpD,EAAIqD,EAAS,GAC3B,GAAID,GAASA,EAAME,GAAI,CACrB,IAAMyO,EAAiB7U,MAAMC,QAAQiG,EAAME,GAAG6C,MAC1C/C,EAAME,GAAG6C,KAAK,GACd/C,EAAME,GAAGe,IAEb,IACEmE,GAAcuJ,IACZA,EAAemE,QAAQ,QAASR,QAClC,K,CACA,SAAO,CACV,C,CACF,+BACF,CAED9T,EAAcb,EAAMY,iBAChBiU,EAAiBI,kBACf5P,EAAYvE,GACZ,CAAC,EACHkU,EACJ1S,EAAU,CAAC,EAEXV,EAAUjB,QAAQP,KAAK,CACrB4B,OAAQ8S,EAAuBE,EAAqBlU,IAGtDc,EAAUmM,MAAM3N,KAAK,CAAC,GAEtBwB,EAAUiB,MAAMzC,KAAK,CACnB4B,OAAQgT,GAEX,CAEDpS,EAAS,CACPJ,MAAO,IAAI8C,IACX0I,QAAS,IAAI1I,IACbzC,MAAO,IAAIyC,IACXyI,MAAO,IAAIzI,IACXuJ,UAAU,EACVrL,MAAO,IAGT5B,EAAUC,MAAMzB,KAAK,CACnBwN,YAAaiH,EAAiBO,gBAC1BpU,EAAW4M,YACX,EACJzM,QAAS0T,EAAiB5B,UACtBjS,EAAWG,UACX0T,EAAiBI,oBAChB5O,EAAUuO,EAAY9T,GAE3BqK,cAAa0J,EAAiBQ,iBAC1BrU,EAAWmK,YAEf/J,YAAayT,EAAiB5B,UAC1BjS,EAAWI,YACTyT,EAAiBI,mBAAqBL,EACpC7V,OAAOuW,QAAQV,GAAYpX,QACzB,SAAC0L,EAAU,GAAF,uBAAGzL,EAAG,KAAEzB,EAAK,YAAC,+BAClBkN,GAAQ,eACVzL,EAAMzB,IAAUiD,EAAI6B,EAAgBrD,IAAI,GAE3C,CAAC,GAEH,CAAC,EACT4D,cAAewT,EAAiB3B,YAC5BlS,EAAWK,cACV,CAAC,EACNG,OAAQqT,EAAiBU,WACrBvU,EAAWQ,OACV,CAAC,EACNqM,cAAc,EACdC,oBAAoB,IAGtBhL,EAAYN,OACT9D,EAAgB6C,WAAasT,EAAiBzB,YACjDtQ,EAAYiL,QAAU/N,EAAMY,gB,EA0E5B4U,YAnZoD,SAACjZ,GACrDA,EACIkD,EAAsBlD,GAAMiV,SAAQ,SAACiE,GAAS,OAC5C9N,GAAM3G,EAAWQ,OAAQiU,EAAU,IAEpCzU,EAAWQ,OAAS,CAAC,EAE1BI,EAAUC,MAAMzB,KAAK,CACnBoB,OAAQR,EAAWQ,OACnBD,SAAS,G,EA2YXyB,cACA0S,SAxY8C,SAACnZ,EAAMwH,EAAO0E,GAC5D,IAAMnF,GAAQrE,EAAIqD,EAAS/F,EAAM,CAAEgG,GAAI,CAAC,IAAeA,IAAM,CAAC,GAAGe,IAEjEiB,EAAIvD,EAAWQ,OAAQjF,EAAM,OAAF,wBACtBwH,GAAK,CACRT,SAGF1B,EAAUC,MAAMzB,KAAK,CACnB7D,OACAiF,OAAQR,EAAWQ,OACnBD,SAAS,IAGXkH,GAAWA,EAAQoK,aAAevP,GAAOA,EAAIE,OAASF,EAAIE,O,EA2X1DmS,SA1E8C,SAACpZ,GAC/C,IAAM8F,EAAQpD,EAAIqD,EAAS/F,GAAMgG,IAChCF,EAAMiB,IAAIE,MAAQnB,EAAMiB,IAAMjB,EAAM+C,KAAK,IAAI5B,O,EA0ElD,C,SCxrCgBoS,KAIkC,IAAhD5V,EAAA,uDAA8C,CAAC,EAEzC6V,EAAe,WAGrB,EAAqC,WAAwC,CAC3E1U,SAAS,EACTG,cAAc,EACdF,YAAa,CAAC,EACd+J,aAAa,EACbyC,YAAa,EACbvM,cAAe,CAAC,EAChBwM,cAAc,EACdC,oBAAoB,EACpBvM,SAAS,EACTC,OAAQ,CAAC,IACT,mBAXK/C,EAAS,KAAEwC,EAAe,KAa7B4U,EAAapZ,QACfoZ,EAAapZ,QAAQkE,QAAQ+B,SAAW1C,EAExC6V,EAAapZ,QAAU,OAAH,wBACfiR,GAAkB1N,IAAM,CAC3BvB,cAIJ,IAAMkC,EAAUkV,EAAapZ,QAAQkE,QAyCrC,OAvCAL,EAAa,CACXJ,QAASS,EAAQiB,UAAUC,MAC3BxB,SAAU,SAAC5B,GACLkD,EAAsBlD,EAAWkC,EAAQjC,iBAAiB,KAC5DiC,EAAQK,WAAa,OAAH,wBACbL,EAAQK,YACRvC,GAGLwC,EAAgB,OAAD,UAAMN,EAAQK,aAEhC,IAGH,aAAgB,WACTL,EAAQmC,YAAYN,QACvB7B,EAAQjC,gBAAgB6C,SAAWZ,EAAQoO,eAC3CpO,EAAQmC,YAAYN,OAAQ,GAE1B7B,EAAQmC,YAAYiL,QACtBpN,EAAQmC,YAAYiL,OAAQ,EAC5BpN,EAAQiB,UAAUC,MAAMzB,KAAK,CAAC,IAEhCO,EAAQ8S,kB,IAGV,aACE,kBAAM,kBACJ1U,OAAOiD,OAAOrB,EAAQiB,WAAW4P,SAAQ,SAACtR,GAAO,OAC/CA,EAAQJ,aAAa,GACtB,IACH,CAACa,IAGHkV,EAAapZ,QAAQgC,UAAYqD,EAC/BrD,EACAkC,EAAQjC,iBAGHmX,EAAapZ,OACtB,C","file":"static/js/3.f78d11eb.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}