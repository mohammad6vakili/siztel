{"version":3,"sources":["views/rules/destination_rates/new/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","hooks/use_destination_rates.js","views/rules/destination_rates/root/components/slot_action.jsx","views/rules/destination_rates/root/datatable/slots_columns.js"],"names":["DestinationRatesNew","skin","useSkin","dispatch","useDispatch","createDestinationRateController","loadings","useDestinationRates","slotFormData","setSlotFormData","useState","DestinationId","RateId","RoundingMethod","RoundingDecimals","MaxCost","MaxCostStrategy","slots","useSelector","state","destinationRates","useEffect","setSlots","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","parseFloat","type","CustomButton","onClick","handleAddSlot","array","length","toast","error","push","Math","random","outline","color","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","createDestinationRate","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","Account","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","navigate","useNavigate","httpService","useHttp","setLoadings","getDestinationRates","getEntityById","updateDestinationRate","deleteEntity","listData","setListData","selectedTpId","app","async","_response$data","_response$data$result","response","post","method","params","result","err","useFormik","initialValues","DestinationRates","validationSchema","enableReinitialize","newSlots","obj","rest","status","success","updateDestinationRateController","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","setFieldValue","setDeleteModal","SlotAction","_ref","Button","filter","padding","selector","row","maxWidth","cell"],"mappings":"qJAAA,oIA4SeA,UAnRaA,KAC1B,MAAM,KAAEC,GAASC,cACXC,EAAWC,eAEX,gCAAEC,EAA+B,SAAEC,GAAaC,eAE/CC,EAAcC,GAAmBC,mBAAS,CAC/CC,cAAe,GACfC,OAAQ,GACRC,eAAgB,GAChBC,iBAAkB,EAClBC,QAAS,EACTC,gBAAiB,KAGbC,EAAQC,aAAaC,GAAUA,EAAMC,iBAAiBH,QA8B5D,OAJAI,qBAAU,KACRlB,EAASmB,YAAS,IAAI,GACrB,IAGDC,eAACC,WAAQ,CAAAC,SAAA,CACPC,cAACC,IAAW,CACVC,MAAM,uBACNC,KAAM,CAAC,CAAED,MAAO,2BAElBF,cAACI,IAAI,CACHC,SAAWC,IACTA,EAAEC,iBACFC,OAAOC,OAAO,CAAEC,IAAK,EAAGC,SAAU,WAClChC,EAAgCiC,cAAc,EAEhDC,UAAU,wCAAuCd,SAEjDF,eAACiB,IAAI,CAACD,UAAU,QAAOd,SAAA,CAErBC,cAACe,IAAU,CAACF,UAAU,gBAAed,SACnCC,cAACgB,IAAS,CAAAjB,SAAC,gCAGbF,eAACoB,IAAQ,CAACJ,UAAU,OAAMd,SAAA,CAExBF,eAACqB,KAAG,CAACL,UAAU,qBAAoBd,SAAA,CAEjCF,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,OAAMzB,SAAC,SAGzCC,cAACyB,IAAK,CACJC,GAAG,OACHC,KAAK,OACLC,UAAQ,EACRC,MAAOlD,EAAgCmD,OAAOC,KAC9CC,SAAUrD,EAAgCsD,aAC1CC,QACEvD,EAAgCwD,QAAQJ,MACxCpD,EAAgCyD,OAAOL,OAG1CpD,EAAgCwD,QAAQJ,MACzCpD,EAAgCyD,OAAOL,KACrC/B,cAACqC,IAAY,CAAAtC,SACVpB,EAAgCyD,OAAOL,OAExC,QAGNlC,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,KAAIzB,SAAC,OAGvCC,cAACyB,IAAK,CACJC,GAAG,KACHC,KAAK,KACLE,MAAOlD,EAAgCmD,OAAOQ,GAC9CN,SAAUrD,EAAgCsD,aAC1CC,QACEvD,EAAgCwD,QAAQG,IACxC3D,EAAgCyD,OAAOE,KAG1C3D,EAAgCwD,QAAQG,IACzC3D,EAAgCyD,OAAOE,GACrCtC,cAACqC,IAAY,CAAAtC,SACVpB,EAAgCyD,OAAOE,KAExC,WAIRzC,eAACqB,KAAG,CAAAnB,SAAA,CACFC,cAACmB,IAAG,CAACC,GAAG,KAAIrB,SACVC,cAACgB,IAAS,CAAAjB,SAAC,wBAGbF,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,gBAAezB,SAAC,kBAGlDC,cAACyB,IAAK,CACJI,MAAO/C,EAAaG,cACpB+C,SAAW1B,GACTvB,EAAgB,IACXD,EACHG,cAAeqB,EAAEiC,OAAOV,QAG5BH,GAAG,gBACHC,KAAK,qBAIT9B,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,SAAQzB,SAAC,WAG3CC,cAACyB,IAAK,CACJC,GAAG,SACHC,KAAK,SACLE,MAAO/C,EAAaI,OACpB8C,SAAW1B,GACTvB,EAAgB,IACXD,EACHI,OAAQoB,EAAEiC,OAAOV,aAMzBhC,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,iBAAgBzB,SAAC,mBAGnDC,cAACyB,IAAK,CACJC,GAAG,iBACHC,KAAK,iBACLE,MAAO/C,EAAaK,eACpB6C,SAAW1B,GACTvB,EAAgB,IACXD,EACHK,eAAgBmB,EAAEiC,OAAOV,aAMjChC,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,mBAAkBzB,SAAC,qBAGrDC,cAACyB,IAAK,CACJC,GAAG,mBACHC,KAAK,mBACLE,MAAO/C,EAAaM,iBACpB4C,SAAW1B,GACTvB,EAAgB,IACXD,EACHM,iBAAkBoD,WAAWlC,EAAEiC,OAAOV,SAG1CY,KAAK,cAIT5C,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,UAASzB,SAAC,YAG5CC,cAACyB,IAAK,CACJgB,KAAK,SACLf,GAAG,UACHC,KAAK,UACLE,MAAO/C,EAAaO,QACpB2C,SAAW1B,GACTvB,EAAgB,IACXD,EACHO,QAASmD,WAAWlC,EAAEiC,OAAOV,cAMrChC,eAACsB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMd,SAAA,CACzCC,cAACuB,IAAK,CAACV,UAAU,aAAaW,IAAI,kBAAiBzB,SAAC,oBAGpDC,cAACyB,IAAK,CACJC,GAAG,kBACHC,KAAK,kBACLE,MAAO/C,EAAaQ,gBACpB0C,SAAW1B,GACTvB,EAAgB,IACXD,EACHQ,gBAAiBgB,EAAEiC,OAAOV,aAMlC7B,cAACmB,IAAG,CACFC,GAAG,KACHC,GAAG,IACHC,GAAG,IACHT,UAAU,8BAA6Bd,SAEvCC,cAAC0C,IAAY,CACXC,QAtNMC,KACpB,IAAIC,EAAQ,IAAItD,GAC0B,IAAtCT,EAAaG,cAAc6D,OAC7BC,IAAMC,MAAM,+BAC4B,IAA/BlE,EAAaI,OAAO4D,OAC7BC,IAAMC,MAAM,wBACoC,IAAvClE,EAAaK,eAAe2D,OACrCC,IAAMC,MAAM,gCACqC,IAAxClE,EAAaQ,gBAAgBwD,OACtCC,IAAMC,MAAM,kCAEZH,EAAMI,KAAK,IAAKnE,EAAc4C,GAAoB,UAAhBwB,KAAKC,WACvC1E,EAASmB,YAASiD,IAClB9D,EAAgB,CACdE,cAAe,GACfC,OAAQ,GACRC,eAAgB,GAChBC,iBAAkB,EAClBC,QAAS,EACTC,gBAAiB,KAErB,EAkMc8D,SAAO,EACPC,MAAM,UACNZ,KAAK,SAAQ1C,SACd,UAKHC,cAACmB,IAAG,CAACC,GAAG,KAAIrB,SACVC,cAACsD,IAAS,CACRC,gBACEvD,cAAA,OAAKwD,MAAO,CAAEC,OAAQ,UAAW1D,SAAC,mCAIpC2D,UAAQ,EACRC,QAASC,IACT/C,UAAU,kBACV2C,MAAO,CAAEK,WAAY,OACrBC,SAAU9D,cAAC+D,IAAW,CAACC,KAAM,KAC7B7D,KAAMZ,EACN0E,MAAgB,SAAT1F,EAAkB,YAAc,aAM/CyB,cAACkE,IAAU,CAACrD,UAAU,2CAA0Cd,SAE9DC,cAAC0C,IAAY,CACXyB,QAASvF,EAASwF,sBAClB3B,KAAK,SACLY,MAAM,UACNG,MAAO,CAAEa,SAAU,KAAMtE,SAC1B,oBAME,C,mCCzSf,mDAiEeuE,IA/CMC,IAEnB,MAAM,KAAEpE,EAAI,MAAED,GAAUqE,EAqBxB,OACEvE,cAAA,OAAKa,UAAU,qBAAoBd,SACjCC,cAAA,OAAKa,UAAU,iDAAgDd,SAC7DC,cAAA,OAAKa,UAAU,sBAAqBd,SAClCF,eAAA,OAAKgB,UAAU,SAAQd,SAAA,CACpBG,EACCF,cAAA,MAAIa,UAAU,wCAAuCd,SAAEG,IAEvD,GAEFF,cAAA,OAAKa,UAAU,6DAA4Dd,SACzEF,eAAC2E,IAAU,CAAAzE,SAAA,CACTC,cAACyE,IAAc,CAACC,IAAI,KAAI3E,SACtBC,cAAC2E,IAAI,CAACC,GAAG,IAAG7E,SAAC,gBA/BpBI,EAAK0E,KAAI,CAACC,EAAMC,KACrB,MAAMC,EAAUF,EAAKG,KAAON,IAAO7E,WAC7BoF,EAAa/E,EAAK2C,OAAS,IAAMiC,EACvC,OACE/E,cAACyE,IAAc,CACbC,IAAI,KAEJS,QAASD,EACTrE,UAAWuE,IAAW,CAAE,gBAAiBF,IAAcnF,SAEvDC,cAACgF,EAAO,IAAMF,EAAKG,KAAO,CAAEL,GAAIE,EAAKG,MAAS,CAAC,EAAClF,SAC7C+E,EAAK5E,SALH6E,EAOU,iBA0Bf,C,mCC9DV,yNAEO,MAAMM,EAAqBC,IAAW,CAC3CvD,KAAMuD,MAAaC,SAAS,+BAC5BjD,GAAIgD,MAAaC,SAAS,+BAGfC,EAAsBF,IAAW,CAC5CvD,KAAMuD,MAAaC,SAAS,+BAC5BE,OAAQH,MAAaC,SAAS,iCAC9BjD,GAAIgD,MAAaC,SAAS,6BAC1BG,eAAgBJ,MAEbC,SAAS,yCACZI,WAAYL,MAAaC,SAAS,qCAClCK,MAAON,MAAaC,SAAS,gCAC7BM,UAAWP,MAAYQ,IAAI,GAAGP,SAAS,oCACvCQ,aAAcT,MAEXQ,IAAI,GACJP,SAAS,yCAGDS,EAAqBV,IAAW,CAC3CvD,KAAMuD,MAAaC,SAAS,+BAC5BjD,GAAIgD,MAAaC,SAAS,6BAC1BU,UAAWX,MAAaC,SAAS,oCACjCW,OAAQZ,MAAaC,SAAS,iCAC9BY,KAAMb,MAAaC,SAAS,+BAC5Ba,SAAUd,MAAaC,SAAS,mCAChCc,MAAOf,MAAaC,SAAS,kCAGlBe,EAA0BhB,IAAW,CAChDvD,KAAMuD,MAAaC,SAAS,+BAC5BjD,GAAIgD,MAAaC,SAAS,6BAC1BgB,SAAUjB,MAAYQ,IAAI,GAAGP,SAAS,qCAG3BiB,EAA4BlB,IAAW,CAClDvD,KAAMuD,MAAaC,SAAS,+BAC5BkB,OAAQnB,MAAaC,SAAS,iCAC9BE,OAAQH,MAAaC,SAAS,iCAC9BmB,SAAUpB,MAAaC,SAAS,mCAChCoB,QAASrB,MAAaC,SAAS,oCAGpBqB,EAAsBtB,IAAW,CAC5CuB,QAASvB,MAAaC,SAAS,kCAC/BE,OAAQH,MAAaC,SAAS,iCAC9BuB,cAAexB,MAEZyB,UAAS,GACTxB,SAAS,wCACZyB,iBAAkB1B,MAEfyB,UAAS,GACTxB,SAAS,2CACZ0B,SAAU3B,MAEPQ,IAAI,EAAG,gCACPP,SAAS,iC,mCC7Dd,wEAyMe1G,IAhMaA,KAC1B,MAAMJ,EAAWC,cACXwI,EAAWC,eACX,YAAEC,GAAgBC,eAEjBzI,EAAU0I,GAAetI,mBAAS,CACvCuI,qBAAqB,EACrBC,eAAe,EACfpD,uBAAuB,EACvBqD,uBAAuB,EACvBC,cAAc,KAGTC,EAAUC,GAAe5I,mBAAS,IAEnCO,EAAQC,aAAaC,GAAUA,EAAMC,iBAAiBH,QACtDsI,EAAerI,aAAaC,GAAUA,EAAMqI,IAAID,eAEhDN,EAAsBQ,UAC1B,IAAIlF,EAAQ,GACZ,IAAK,IAADmF,EAAAC,EACFX,EAAY,IAAK1I,EAAU2I,qBAAqB,IAChD,MAAMW,QAAiBd,EAAYe,KAAK,GAAI,CAC1CC,OAAQ,mCACRC,OAAQ,CACN,CACEtG,KAAM8F,MAIZP,EAAY,IAAK1I,EAAU2I,qBAAqB,IACxC,OAARW,QAAQ,IAARA,GAAc,QAANF,EAARE,EAAU/H,YAAI,IAAA6H,GAAQ,QAARC,EAAdD,EAAgBM,cAAM,IAAAL,GAAtBA,EAAwBpD,KAAKC,IAC3BjC,EAAMI,KAAK,CACTX,GAAIwC,GACJ,IAEJ8C,EAAY/E,EACd,CAAE,OAAO,IAAE0F,EAAG,SAAEL,IACdZ,EAAY,IAAK1I,EAAU2I,qBAAqB,GAClD,GA+BI5I,EAAkC6J,YAAU,CAChDC,cAAe,CACb1G,KAAM8F,EACNvF,GAAI,GACJoG,iBAAkB,IAEpBC,iBAAkBtD,IAClBuD,oBAAoB,EACpBvI,SAAWyB,IACY,IAAjBvC,EAAMuD,OACRC,IAAMC,MAAM,+CAEZoB,EAAsBtC,EAAQvC,EAChC,IAIE6E,EAAwB2D,MAAOjG,EAAQvC,KAC3C,MAAMsJ,EAAWtJ,EAAMsF,KAAKiE,IAC1B,MAAM,GAAEpH,KAAOqH,GAASD,EACxB,OAAOC,CAAI,IAEb,IACEzB,EAAY,IAAK1I,EAAUwF,uBAAuB,IAClD,MAAM8D,QAAiBd,EAAYe,KAAK,GAAI,CAC1CC,OAAQ,gCACRC,OAAQ,CACN,CACEtG,KAAM8F,EACNvF,GAAIR,EAAOQ,GACXoG,iBAAkBG,MAIxBvB,EAAY,IAAK1I,EAAUwF,uBAAuB,IAC1B,MAApB8D,EAASc,SACXjG,IAAMkG,QAAQ,yBACd/B,EAAS,4BACTzI,EAASmB,YAAS,KAEtB,CAAE,OAAO,IAAE2I,EAAG,SAAEL,IACdZ,EAAY,IAAK1I,EAAUwF,uBAAuB,GACpD,GAGI8E,EAAkCV,YAAU,CAChDC,cAAe,CACb1G,KAAM8F,EACNvF,GAAI,GACJoG,iBAAkB,IAEpBC,iBAAkBtD,IAClBuD,oBAAoB,EACpBvI,SAAWyB,IACY,IAAjBvC,EAAMuD,OACRC,IAAMC,MAAM,+CAEZyE,EAAsB3F,EAAQvC,EAChC,IAIEkI,EAAwBM,MAAOjG,EAAQvC,KAC3C,MAAMsJ,EAAWtJ,EAAMsF,KAAKiE,IAC1B,MAAM,GAAEpH,KAAOqH,GAASD,EACxB,OAAOC,CAAI,IAEb,IACEzB,EAAY,IAAK1I,EAAU6I,uBAAuB,IAClD,MAAMS,QAAiBd,EAAYe,KAAK,GAAI,CAC1CC,OAAQ,gCACRC,OAAQ,CACN,CACEtG,KAAM8F,EACNvF,GAAIR,EAAOQ,GACXoG,iBAAkBG,MAIxBvB,EAAY,IAAK1I,EAAU6I,uBAAuB,IAC1B,MAApBS,EAASc,SACXjG,IAAMkG,QAAQ,yBACd/B,EAAS,4BACTzI,EAASmB,YAAS,KAEtB,CAAE,OAAO,IAAE2I,EAAG,SAAEL,IACdZ,EAAY,IAAK1I,EAAU6I,uBAAuB,GACpD,GAiCF,MATgB,CACdF,sBACAC,cA7IoBO,UACpB,IAAK,IAADoB,EACF7B,EAAY,IAAK1I,EAAU4I,eAAe,IAC1C,MAAMU,QAAiBd,EAAYe,KAAK,GAAI,CAC1CC,OAAQ,gCACRC,OAAQ,CACN,CACEtG,KAAM8F,EACNvF,GAAIZ,MAKkC,IAAD0H,EAGpCC,EAAAC,EAAAC,EAAAC,EAHP,GADAlC,EAAY,IAAK1I,EAAU4I,eAAe,IACZ,eAAlB,OAARU,QAAQ,IAARA,GAAc,QAANiB,EAARjB,EAAU/H,YAAI,IAAAgJ,OAAN,EAARA,EAAgBnG,OAClBD,IAAMC,MAAc,OAARkF,QAAQ,IAARA,GAAc,QAANkB,EAARlB,EAAU/H,YAAI,IAAAiJ,OAAN,EAARA,EAAgBpG,OAC5BkE,EAAS,iCAETgC,EAAgCO,cAC9B,KACQ,OAARvB,QAAQ,IAARA,GAAc,QAANmB,EAARnB,EAAU/H,YAAI,IAAAkJ,GAAQ,QAARC,EAAdD,EAAgBf,cAAM,IAAAgB,OAAd,EAARA,EAAwBhH,IAE1B7D,EAASmB,YAAiB,OAARsI,QAAQ,IAARA,GAAc,QAANqB,EAARrB,EAAU/H,YAAI,IAAAoJ,GAAQ,QAARC,EAAdD,EAAgBjB,cAAM,IAAAkB,OAAd,EAARA,EAAwBd,kBAE9C,CAAE,OAAO,IAAEH,EAAG,SAAEL,IACdZ,EAAY,IAAK1I,EAAU4I,eAAe,GAC5C,GAqHA7I,kCACAuK,kCACAxB,aA1BmBK,UACnB,IACET,EAAY,IAAK1I,EAAU8I,cAAc,UAClBN,EAAYe,KAAK,GAAI,CAC1CC,OAAQ,mCACRC,OAAQ,CACN,CACEtG,KAAM8F,EACNvF,GAAIZ,MAIV4F,EAAY,IAAK1I,EAAU8I,cAAc,IACzCjJ,EAASiL,YAAe,OACxB3G,IAAMkG,QAAQ,yBACd1B,GACF,CAAE,OAAO,IAAEgB,EAAG,SAAEL,IACdZ,EAAY,IAAK1I,EAAU8I,cAAc,GAC3C,GASAC,WACA/I,WAEY,C,0GClLD+K,MAjBIC,IAAa,IAAZ,GAAElI,GAAIkI,EACxB,MAAMnL,EAAWC,cAEXa,EAAQC,aAAaC,GAAUA,EAAMC,iBAAiBH,QAE5D,OACES,cAAC6J,IAAM,CACLlH,QAASA,IAAMlE,EAASmB,YAASL,EAAMuK,QAAQhF,GAASA,EAAKpD,KAAOA,MACpE8B,MAAO,CAAEuG,QAAS,GAClB/F,KAAK,KACLX,MAAM,SACNZ,KAAK,SAAQ1C,SACd,UAEQ,EChBN,MAAM6D,EAAgB,CAC3B,CACEjC,KAAM,gBACN0C,SAAU,QACV2F,SAAWC,GAAQA,EAAIhL,eAEzB,CACE0C,KAAM,SACN0C,SAAU,QACV2F,SAAWC,GAAQA,EAAI/K,QAEzB,CACEyC,KAAM,iBACN0C,SAAU,QACV2F,SAAWC,GAAQA,EAAI9K,gBAEzB,CACEwC,KAAM,mBACN0C,SAAU,QACV2F,SAAWC,GAAQA,EAAI7K,kBAEzB,CACEuC,KAAM,UACN0C,SAAU,QACV2F,SAAWC,GAAQA,EAAI5K,SAEzB,CACEsC,KAAM,kBACN0C,SAAU,QACV2F,SAAWC,GAAQA,EAAI3K,iBAEzB,CACEqC,KAAM,UACN0C,SAAU,QACV6F,SAAU,QACVF,SAAWC,GAAQA,EAAIvI,GACvByI,KAAOF,GACEjK,cAAC2J,EAAU,CAACjI,GAAIuI,EAAIvI,M","file":"static/js/106.44ec9726.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/destination_rates_slice\";\nimport useDestinationRates from \"../../../../hooks/use_destination_rates\";\n\nconst DestinationRatesNew = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n\n  const { createDestinationRateController, loadings } = useDestinationRates();\n\n  const [slotFormData, setSlotFormData] = useState({\n    DestinationId: \"\",\n    RateId: \"\",\n    RoundingMethod: \"\",\n    RoundingDecimals: 0,\n    MaxCost: 0,\n    MaxCostStrategy: \"\",\n  });\n\n  const slots = useSelector((state) => state.destinationRates.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.DestinationId.length === 0) {\n      toast.error(\"Please enter DestinationId.\");\n    } else if (slotFormData.RateId.length === 0) {\n      toast.error(\"Please enter RateId.\");\n    } else if (slotFormData.RoundingMethod.length === 0) {\n      toast.error(\"Please enter RoundingMethod.\");\n    } else if (slotFormData.MaxCostStrategy.length === 0) {\n      toast.error(\"Please enter MaxCostStrategy.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        DestinationId: \"\",\n        RateId: \"\",\n        RoundingMethod: \"\",\n        RoundingDecimals: 0,\n        MaxCost: 0,\n        MaxCostStrategy: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setSlots([]));\n  }, []);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"New Destination Rate\"\n        data={[{ title: \"New Destination Rate\" }]}\n      />\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          window.scroll({ top: 0, behavior: \"smooth\" });\n          createDestinationRateController.handleSubmit();\n        }}\n        className=\"d-flex flex-column align-items-center\"\n      >\n        <Card className=\"w-100\">\n          {/* card header */}\n          <CardHeader className=\"border-bottom\">\n            <CardTitle>New Destination Rate Form</CardTitle>\n          </CardHeader>\n          {/* card body */}\n          <CardBody className=\"pt-2\">\n            {/* form fields */}\n            <Row className=\"border-bottom mb-1\">\n              {/* TPid */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"TPid\">\n                  TPid\n                </Label>\n                <Input\n                  id=\"TPid\"\n                  name=\"TPid\"\n                  disabled\n                  value={createDestinationRateController.values.TPid}\n                  onChange={createDestinationRateController.handleChange}\n                  invalid={\n                    createDestinationRateController.touched.TPid &&\n                    createDestinationRateController.errors.TPid\n                  }\n                />\n                {createDestinationRateController.touched.TPid &&\n                createDestinationRateController.errors.TPid ? (\n                  <FormFeedback>\n                    {createDestinationRateController.errors.TPid}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* ID */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"ID\">\n                  ID\n                </Label>\n                <Input\n                  id=\"ID\"\n                  name=\"ID\"\n                  value={createDestinationRateController.values.ID}\n                  onChange={createDestinationRateController.handleChange}\n                  invalid={\n                    createDestinationRateController.touched.ID &&\n                    createDestinationRateController.errors.ID\n                  }\n                />\n                {createDestinationRateController.touched.ID &&\n                createDestinationRateController.errors.ID ? (\n                  <FormFeedback>\n                    {createDestinationRateController.errors.ID}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n            </Row>\n            {/* slots */}\n            <Row>\n              <Col xs=\"12\">\n                <CardTitle>Destination Rates</CardTitle>\n              </Col>\n              {/* DestinationId */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"DestinationId\">\n                  DestinationId\n                </Label>\n                <Input\n                  value={slotFormData.DestinationId}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      DestinationId: e.target.value,\n                    })\n                  }\n                  id=\"DestinationId\"\n                  name=\"DestinationId\"\n                />\n              </Col>\n              {/* RateId */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RateId\">\n                  RateId\n                </Label>\n                <Input\n                  id=\"RateId\"\n                  name=\"RateId\"\n                  value={slotFormData.RateId}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RateId: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* RoundingMethod */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RoundingMethod\">\n                  RoundingMethod\n                </Label>\n                <Input\n                  id=\"RoundingMethod\"\n                  name=\"RoundingMethod\"\n                  value={slotFormData.RoundingMethod}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RoundingMethod: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* RoundingDecimals */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RoundingDecimals\">\n                  RoundingDecimals\n                </Label>\n                <Input\n                  id=\"RoundingDecimals\"\n                  name=\"RoundingDecimals\"\n                  value={slotFormData.RoundingDecimals}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RoundingDecimals: parseFloat(e.target.value),\n                    })\n                  }\n                  type=\"number\"\n                />\n              </Col>\n              {/* MaxCost */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"MaxCost\">\n                  MaxCost\n                </Label>\n                <Input\n                  type=\"number\"\n                  id=\"MaxCost\"\n                  name=\"MaxCost\"\n                  value={slotFormData.MaxCost}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      MaxCost: parseFloat(e.target.value),\n                    })\n                  }\n                />\n              </Col>\n              {/* MaxCostStrategy */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"MaxCostStrategy\">\n                  MaxCostStrategy\n                </Label>\n                <Input\n                  id=\"MaxCostStrategy\"\n                  name=\"MaxCostStrategy\"\n                  value={slotFormData.MaxCostStrategy}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      MaxCostStrategy: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* add button */}\n              <Col\n                xs=\"12\"\n                sm=\"6\"\n                md=\"3\"\n                className=\"mb-1 d-flex align-items-end\"\n              >\n                <CustomButton\n                  onClick={handleAddSlot}\n                  outline\n                  color=\"primary\"\n                  type=\"button\"\n                >\n                  Add\n                </CustomButton>\n              </Col>\n              {/* datatable */}\n              <Col xs=\"12\">\n                <DataTable\n                  noDataComponent={\n                    <div style={{ margin: \"24px 0\" }}>\n                      No Destination Rate Added Yet.\n                    </div>\n                  }\n                  noHeader\n                  columns={slots_columns}\n                  className=\"react-dataTable\"\n                  style={{ background: \"red\" }}\n                  sortIcon={<ChevronDown size={10} />}\n                  data={slots}\n                  theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                />\n              </Col>\n            </Row>\n          </CardBody>\n          {/* card footer */}\n          <CardFooter className=\"border-top d-flex justify-content-center\">\n            {/* submit button */}\n            <CustomButton\n              loading={loadings.createDestinationRate}\n              type=\"submit\"\n              color=\"primary\"\n              style={{ minWidth: 150 }}\n            >\n              Submit\n            </CustomButton>\n          </CardFooter>\n        </Card>\n      </Form>\n    </Fragment>\n  );\n};\nexport default DestinationRatesNew;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { setDeleteModal, setSlots } from \"../redux/destination_rates_slice\";\n\nconst useDestinationRates = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getDestinationRates: false,\n    getEntityById: false,\n    createDestinationRate: false,\n    updateDestinationRate: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.destinationRates.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getDestinationRates = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getDestinationRates: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPDestinationRateIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getDestinationRates: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getDestinationRates: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPDestinationRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/destination_rates\");\n      } else {\n        updateDestinationRateController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        dispatch(setSlots(response?.data?.result?.DestinationRates));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createDestinationRateController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      DestinationRates: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one destination rate.\");\n      } else {\n        createDestinationRate(values, slots);\n      }\n    },\n  });\n\n  const createDestinationRate = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createDestinationRate: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestinationRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            DestinationRates: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createDestinationRate: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/destination_rates\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createDestinationRate: false });\n    }\n  };\n\n  const updateDestinationRateController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      DestinationRates: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one destination rate.\");\n      } else {\n        updateDestinationRate(values, slots);\n      }\n    },\n  });\n\n  const updateDestinationRate = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateDestinationRate: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestinationRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            DestinationRates: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateDestinationRate: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/destination_rates\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateDestinationRate: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPDestinationRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getDestinationRates();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getDestinationRates,\n    getEntityById,\n    createDestinationRateController,\n    updateDestinationRateController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useDestinationRates;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/destination_rates_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.destinationRates.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"DestinationId\",\n    minWidth: \"100px\",\n    selector: (row) => row.DestinationId,\n  },\n  {\n    name: \"RateId\",\n    minWidth: \"100px\",\n    selector: (row) => row.RateId,\n  },\n  {\n    name: \"RoundingMethod\",\n    minWidth: \"100px\",\n    selector: (row) => row.RoundingMethod,\n  },\n  {\n    name: \"RoundingDecimals\",\n    minWidth: \"100px\",\n    selector: (row) => row.RoundingDecimals,\n  },\n  {\n    name: \"MaxCost\",\n    minWidth: \"100px\",\n    selector: (row) => row.MaxCost,\n  },\n  {\n    name: \"MaxCostStrategy\",\n    minWidth: \"100px\",\n    selector: (row) => row.MaxCostStrategy,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}