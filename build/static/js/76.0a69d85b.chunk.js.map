{"version":3,"sources":["views/rules/shared_groups/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","hooks/use_shared_groups.js","views/rules/shared_groups/root/components/slot_action.jsx","views/rules/shared_groups/root/datatable/slots_columns.js"],"names":["SharedGroupsUpdate","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","_useSearchParams","useSearchParams","searchParams","_slicedToArray","_useSharedGroups","useSharedGroups","getEntityById","updateSharedGroupController","loadings","_useState","useState","Account","Strategy","RatingSubject","_useState2","slotFormData","setSlotFormData","getAllTpIdsLoading","useSelector","state","app","selectedTpId","slots","sharedGroups","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","ProgressLoading","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","_objectSpread","target","CustomButton","onClick","array","_toConsumableArray","length","toast","error","push","Math","random","setSlots","outline","color","type","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","updateSharedGroup","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","updateAccountSchema","httpService","useHttp","getSharedGroups","createSharedGroup","deleteEntity","setLoadings","_useState3","_useState4","listData","setListData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_response$data","_response$data$result","response","wrap","_context","prev","next","post","method","params","sent","result","t0","err","stop","apply","arguments","_ref3","_callee2","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","_context2","setFieldValue","SharedGroups","_x","createSharedGroupController","useFormik","initialValues","validationSchema","enableReinitialize","_ref5","_callee3","newSlots","_context3","obj","_objectWithoutProperties","_excluded","status","success","_x2","_x3","_ref7","_callee4","_context4","_excluded2","_x4","_x5","_ref9","_callee5","_context5","setDeleteModal","_x6","SlotAction","Button","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/76.0a69d85b.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/shared_groups_slice\";\nimport useSharedGroups from \"../../../../hooks/use_shared_groups\";\n\nconst SharedGroupsUpdate = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  const { getEntityById, updateSharedGroupController, loadings } =\n    useSharedGroups();\n\n  const [slotFormData, setSlotFormData] = useState({\n    Account: \"\",\n    Strategy: \"\",\n    RatingSubject: \"\",\n  });\n\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n  const slots = useSelector((state) => state.sharedGroups.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.Account.length === 0) {\n      toast.error(\"Please enter Account.\");\n    } else if (slotFormData.Strategy.length === 0) {\n      toast.error(\"Please enter Strategy.\");\n    } else if (slotFormData.RatingSubject.length === 0) {\n      toast.error(\"Please enter RatingSubject.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        Account: \"\",\n        Strategy: \"\",\n        RatingSubject: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getEntityById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/shared_groups\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Shared Group\"\n        data={[{ title: \"Update Shared Group\" }]}\n      />\n      {loadings.getEntityById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getEntityById ? (\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            window.scroll({ top: 0, behavior: \"smooth\" });\n            updateSharedGroupController.handleSubmit();\n          }}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Shared Group Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row className=\"border-bottom mb-1\">\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateSharedGroupController.values.TPid}\n                    onChange={updateSharedGroupController.handleChange}\n                    invalid={\n                      updateSharedGroupController.touched.TPid &&\n                      updateSharedGroupController.errors.TPid\n                    }\n                  />\n                  {updateSharedGroupController.touched.TPid &&\n                  updateSharedGroupController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateSharedGroupController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* ID */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ID\">\n                    ID\n                  </Label>\n                  <Input\n                    id=\"ID\"\n                    name=\"ID\"\n                    disabled\n                    value={updateSharedGroupController.values.ID}\n                    onChange={updateSharedGroupController.handleChange}\n                    invalid={\n                      updateSharedGroupController.touched.ID &&\n                      updateSharedGroupController.errors.ID\n                    }\n                  />\n                  {updateSharedGroupController.touched.ID &&\n                  updateSharedGroupController.errors.ID ? (\n                    <FormFeedback>\n                      {updateSharedGroupController.errors.ID}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n              </Row>\n              {/* SharedGroups */}\n              <Row>\n                <Col xs=\"12\">\n                  <CardTitle>Shared Groups</CardTitle>\n                </Col>\n                {/* Account */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Account\">\n                    Account\n                  </Label>\n                  <Input\n                    value={slotFormData.Account}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Account: e.target.value,\n                      })\n                    }\n                    id=\"Account\"\n                    name=\"Account\"\n                  />\n                </Col>\n                {/* Strategy */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Strategy\">\n                    Strategy\n                  </Label>\n                  <Input\n                    id=\"Strategy\"\n                    name=\"Strategy\"\n                    value={slotFormData.Strategy}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Strategy: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* RatingSubject */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"RatingSubject\">\n                    RatingSubject\n                  </Label>\n                  <Input\n                    id=\"RatingSubject\"\n                    name=\"RatingSubject\"\n                    value={slotFormData.RatingSubject}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        RatingSubject: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* add button */}\n                <Col\n                  xs=\"12\"\n                  sm=\"6\"\n                  md=\"3\"\n                  className=\"mb-1 d-flex align-items-end\"\n                >\n                  <CustomButton\n                    onClick={handleAddSlot}\n                    outline\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Add\n                  </CustomButton>\n                </Col>\n                {/* datatable */}\n                <Col xs=\"12\">\n                  <DataTable\n                    noDataComponent={\n                      <div style={{ margin: \"24px 0\" }}>\n                        No Shared Group Added Yet.\n                      </div>\n                    }\n                    noHeader\n                    columns={slots_columns}\n                    className=\"react-dataTable\"\n                    style={{ background: \"red\" }}\n                    sortIcon={<ChevronDown size={10} />}\n                    data={slots}\n                    theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                  />\n                </Col>\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.updateSharedGroup}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default SharedGroupsUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n\nexport const updateAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { setSlots, setDeleteModal } from \"../redux/shared_groups_slice\";\n\nconst useSharedGroups = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getSharedGroups: false,\n    getEntityById: false,\n    createSharedGroup: false,\n    updateSharedGroup: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getSharedGroups = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getSharedGroups: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPSharedGroupIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getSharedGroups: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getSharedGroups: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/shared_groups\");\n      } else {\n        updateSharedGroupController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        dispatch(setSlots(response?.data?.result?.SharedGroups));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createSharedGroupController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      SharedGroups: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one shared group.\");\n      } else {\n        createSharedGroup(values, slots);\n      }\n    },\n  });\n\n  const createSharedGroup = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createSharedGroup: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            SharedGroups: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createSharedGroup: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/shared_groups\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createSharedGroup: false });\n    }\n  };\n\n  const updateSharedGroupController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      SharedGroups: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one shared group.\");\n      } else {\n        updateSharedGroup(values, slots);\n      }\n    },\n  });\n\n  const updateSharedGroup = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateSharedGroup: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            SharedGroups: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateSharedGroup: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/shared_groups\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateSharedGroup: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getSharedGroups();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getSharedGroups,\n    getEntityById,\n    createSharedGroupController,\n    updateSharedGroupController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useSharedGroups;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/shared_groups_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"Account\",\n    minWidth: \"100px\",\n    selector: (row) => row.Account,\n  },\n  {\n    name: \"Strategy\",\n    minWidth: \"100px\",\n    selector: (row) => row.Strategy,\n  },\n  {\n    name: \"RatingSubject\",\n    minWidth: \"100px\",\n    selector: (row) => row.RatingSubject,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}