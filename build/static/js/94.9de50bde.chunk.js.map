{"version":3,"sources":["views/rules/shared_groups/new/index.jsx","@core/components/breadcrumbs/index.js","assets/loadings/button_loading.svg","components/button/index.js","utility/schemas/index.js","hooks/use_shared_groups.js","views/rules/shared_groups/root/components/slot_action.jsx","views/rules/shared_groups/root/datatable/slots_columns.js"],"names":["SharedGroupsNew","skin","useSkin","dispatch","useDispatch","createSharedGroupController","loadings","useSharedGroups","slotFormData","setSlotFormData","useState","Account","Strategy","RatingSubject","slots","useSelector","state","sharedGroups","useEffect","setSlots","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","CustomButton","onClick","handleAddSlot","array","length","toast","error","push","Math","random","outline","color","type","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","createSharedGroup","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","_ref","Button","width","src","loadingAnimation","alt","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","navigate","useNavigate","httpService","useHttp","setLoadings","getSharedGroups","getEntityById","updateSharedGroup","deleteEntity","listData","setListData","selectedTpId","app","async","_response$data","_response$data$result","response","post","method","params","result","err","useFormik","initialValues","SharedGroups","validationSchema","enableReinitialize","newSlots","obj","rest","status","success","updateSharedGroupController","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","setFieldValue","setDeleteModal","SlotAction","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/94.9de50bde.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/shared_groups_slice\";\nimport useSharedGroups from \"../../../../hooks/use_shared_groups\";\n\nconst SharedGroupsNew = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n\n  const { createSharedGroupController, loadings } = useSharedGroups();\n\n  const [slotFormData, setSlotFormData] = useState({\n    Account: \"\",\n    Strategy: \"\",\n    RatingSubject: \"\",\n  });\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.Account.length === 0) {\n      toast.error(\"Please enter Account.\");\n    } else if (slotFormData.Strategy.length === 0) {\n      toast.error(\"Please enter Strategy.\");\n    } else if (slotFormData.RatingSubject.length === 0) {\n      toast.error(\"Please enter RatingSubject.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        Account: \"\",\n        Strategy: \"\",\n        RatingSubject: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setSlots([]));\n  }, []);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"New Shared Group\"\n        data={[{ title: \"New Shared Group\" }]}\n      />\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          window.scroll({ top: 0, behavior: \"smooth\" });\n          createSharedGroupController.handleSubmit();\n        }}\n        className=\"d-flex flex-column align-items-center\"\n      >\n        <Card className=\"w-100\">\n          {/* card header */}\n          <CardHeader className=\"border-bottom\">\n            <CardTitle>New Shared Group Form</CardTitle>\n          </CardHeader>\n          {/* card body */}\n          <CardBody className=\"pt-2\">\n            {/* form fields */}\n            <Row className=\"border-bottom mb-1\">\n              {/* TPid */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"TPid\">\n                  TPid\n                </Label>\n                <Input\n                  id=\"TPid\"\n                  name=\"TPid\"\n                  disabled\n                  value={createSharedGroupController.values.TPid}\n                  onChange={createSharedGroupController.handleChange}\n                  invalid={\n                    createSharedGroupController.touched.TPid &&\n                    createSharedGroupController.errors.TPid\n                  }\n                />\n                {createSharedGroupController.touched.TPid &&\n                createSharedGroupController.errors.TPid ? (\n                  <FormFeedback>\n                    {createSharedGroupController.errors.TPid}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* ID */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"ID\">\n                  ID\n                </Label>\n                <Input\n                  id=\"ID\"\n                  name=\"ID\"\n                  value={createSharedGroupController.values.ID}\n                  onChange={createSharedGroupController.handleChange}\n                  invalid={\n                    createSharedGroupController.touched.ID &&\n                    createSharedGroupController.errors.ID\n                  }\n                />\n                {createSharedGroupController.touched.ID &&\n                createSharedGroupController.errors.ID ? (\n                  <FormFeedback>\n                    {createSharedGroupController.errors.ID}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n            </Row>\n            {/* SharedGroups */}\n            <Row>\n              <Col xs=\"12\">\n                <CardTitle>Shared Groups</CardTitle>\n              </Col>\n              {/* Account */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"Account\">\n                  Account\n                </Label>\n                <Input\n                  value={slotFormData.Account}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      Account: e.target.value,\n                    })\n                  }\n                  id=\"Account\"\n                  name=\"Account\"\n                />\n              </Col>\n              {/* Strategy */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"Strategy\">\n                  Strategy\n                </Label>\n                <Input\n                  id=\"Strategy\"\n                  name=\"Strategy\"\n                  value={slotFormData.Strategy}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      Strategy: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* RatingSubject */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RatingSubject\">\n                  RatingSubject\n                </Label>\n                <Input\n                  id=\"RatingSubject\"\n                  name=\"RatingSubject\"\n                  value={slotFormData.RatingSubject}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RatingSubject: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* add button */}\n              <Col\n                xs=\"12\"\n                sm=\"6\"\n                md=\"3\"\n                className=\"mb-1 d-flex align-items-end\"\n              >\n                <CustomButton\n                  onClick={handleAddSlot}\n                  outline\n                  color=\"primary\"\n                  type=\"button\"\n                >\n                  Add\n                </CustomButton>\n              </Col>\n              {/* datatable */}\n              <Col xs=\"12\">\n                <DataTable\n                  noDataComponent={\n                    <div style={{ margin: \"24px 0\" }}>\n                      No Shared Group Added Yet.\n                    </div>\n                  }\n                  noHeader\n                  columns={slots_columns}\n                  className=\"react-dataTable\"\n                  style={{ background: \"red\" }}\n                  sortIcon={<ChevronDown size={10} />}\n                  data={slots}\n                  theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                />\n              </Col>\n            </Row>\n          </CardBody>\n          {/* card footer */}\n          <CardFooter className=\"border-top d-flex justify-content-center\">\n            {/* submit button */}\n            <CustomButton\n              loading={loadings.createSharedGroup}\n              type=\"submit\"\n              color=\"primary\"\n              style={{ minWidth: 150 }}\n            >\n              Submit\n            </CustomButton>\n          </CardFooter>\n        </Card>\n      </Form>\n    </Fragment>\n  );\n};\nexport default SharedGroupsNew;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","export default __webpack_public_path__ + \"static/media/button_loading.bbd49f26.svg\";","import { Button } from \"reactstrap\";\nimport loadingAnimation from \"../../assets/loadings/button_loading.svg\";\n\nconst CustomButton = ({ loading, children, ...props }) => {\n  return (\n    <Button disabled={loading} {...props}>\n      {!loading ? children : null}\n      {loading ? <img width={14} src={loadingAnimation} alt=\"loading\" /> : null}\n    </Button>\n  );\n};\nexport default CustomButton;\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\n// export const registerSchema = yup.object({\n//   first_name: yup.string().required(\"The first name field is required.\"),\n//   last_name: yup.string().required(\"The last name field is required.\"),\n//   email: yup\n//     .string()\n//     .required(\"The email field is required.\")\n//     .email(\"The entered email structure is incorrect.\"),\n//   password: yup.string().required(\"The password field is required.\"),\n//   password_confirmation: yup\n//     .string()\n//     .required(\"The repeat password field is required.\"),\n//   privacy: yup.bool().required(\"\"),\n// });\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { setSlots, setDeleteModal } from \"../redux/shared_groups_slice\";\n\nconst useSharedGroups = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getSharedGroups: false,\n    getEntityById: false,\n    createSharedGroup: false,\n    updateSharedGroup: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getSharedGroups = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getSharedGroups: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPSharedGroupIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getSharedGroups: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getSharedGroups: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/shared_groups\");\n      } else {\n        updateSharedGroupController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        dispatch(setSlots(response?.data?.result?.SharedGroups));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createSharedGroupController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      SharedGroups: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one shared group.\");\n      } else {\n        createSharedGroup(values, slots);\n      }\n    },\n  });\n\n  const createSharedGroup = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createSharedGroup: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            SharedGroups: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createSharedGroup: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/shared_groups\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createSharedGroup: false });\n    }\n  };\n\n  const updateSharedGroupController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      SharedGroups: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one shared group.\");\n      } else {\n        updateSharedGroup(values, slots);\n      }\n    },\n  });\n\n  const updateSharedGroup = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateSharedGroup: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            SharedGroups: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateSharedGroup: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/shared_groups\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateSharedGroup: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getSharedGroups();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getSharedGroups,\n    getEntityById,\n    createSharedGroupController,\n    updateSharedGroupController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useSharedGroups;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/shared_groups_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"Account\",\n    minWidth: \"100px\",\n    selector: (row) => row.Account,\n  },\n  {\n    name: \"Strategy\",\n    minWidth: \"100px\",\n    selector: (row) => row.Strategy,\n  },\n  {\n    name: \"RatingSubject\",\n    minWidth: \"100px\",\n    selector: (row) => row.RatingSubject,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}