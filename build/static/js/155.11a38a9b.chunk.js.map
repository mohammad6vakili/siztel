{"version":3,"sources":["views/components/popovers/PopoverTriggers.js","views/components/popovers/PopoverPositions.js","views/components/popovers/PopoverControlled.js","views/components/popovers/PopoverUncontrolled.js","views/components/popovers/PopoverSourceCode.js","views/components/popovers/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["PopoverTriggers","_jsxs","className","children","_jsx","Button","color","outline","id","UncontrolledPopover","trigger","placement","target","PopoverHeader","PopoverBody","PopoverPositions","PopoverControlled","_useState","useState","_useState2","_slicedToArray","popoverOpen","setPopoverOpen","Fragment","Popover","isOpen","toggle","PopoverUncontrolled","popoverControlled","popoverUncontrolled","popoverPositions","popoverTriggers","useEffect","Prism","highlightAll","BreadCrumbs","title","data","Row","Col","md","sm","Card","code","CardText","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","length","active","classnames","_objectSpread","CardSnippet","noBody","iconCode","setIsOpen","IconCode","Code","size","CardBody","CardHeader","CardTitle","onClick","Collapse"],"mappings":"yMA4CeA,EAzCS,WACtB,OACEC,eAAA,OAAKC,UAAU,sBAAqBC,SAAA,CAClCC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,WAAUL,SAAC,UAG9CF,eAACQ,KAAmB,CAACC,QAAQ,QAAQC,UAAU,MAAMC,OAAO,WAAUT,SAAA,CACpEC,cAACS,KAAa,CAAAV,SAAC,kBACfC,cAACU,KAAW,CAAAX,SAAC,wLAMfC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,WAAUL,SAAC,UAG9CF,eAACQ,KAAmB,CAACC,QAAQ,QAAQC,UAAU,MAAMC,OAAO,WAAUT,SAAA,CACpEC,cAACS,KAAa,CAAAV,SAAC,kBACfC,cAACU,KAAW,CAAAX,SAAC,2OAOfC,cAACC,IAAM,CAACK,QAAQ,SAASJ,MAAM,UAAUC,SAAO,EAACC,GAAG,YAAWL,SAAC,WAGhEF,eAACQ,KAAmB,CAACE,UAAU,MAAMC,OAAO,YAAWT,SAAA,CACrDC,cAACS,KAAa,CAAAV,SAAC,mBACfC,cAACU,KAAW,CAAAX,SAAC,qZASrB,ECFeY,EAtCU,WACvB,OACEd,eAAA,OAAKC,UAAU,sBAAqBC,SAAA,CAClCC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,SAAQL,SAAC,QAG5CF,eAACQ,KAAmB,CAACE,UAAU,MAAMC,OAAO,SAAQT,SAAA,CAClDC,cAACS,KAAa,CAAAV,SAAC,gBACfC,cAACU,KAAW,CAAAX,SAAC,oFAGfC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,WAAUL,SAAC,UAG9CF,eAACQ,KAAmB,CAACE,UAAU,QAAQC,OAAO,WAAUT,SAAA,CACtDC,cAACS,KAAa,CAAAV,SAAC,kBACfC,cAACU,KAAW,CAAAX,SAAC,oFAGfC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,YAAWL,SAAC,WAG/CF,eAACQ,KAAmB,CAACE,UAAU,SAASC,OAAO,YAAWT,SAAA,CACxDC,cAACS,KAAa,CAAAV,SAAC,mBACfC,cAACU,KAAW,CAAAX,SAAC,oFAGfC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,UAASL,SAAC,SAG7CF,eAACQ,KAAmB,CAACE,UAAU,OAAOC,OAAO,UAAST,SAAA,CACpDC,cAACS,KAAa,CAAAV,SAAC,iBACfC,cAACU,KAAW,CAAAX,SAAC,sFAIrB,E,QCXea,EAtBW,WACxB,IAAAC,EAAsCC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAA9CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAElC,OACElB,eAACsB,WAAQ,CAAApB,SAAA,CACPC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,oBAAmBL,SAAC,eAGvDF,eAACuB,KAAO,CACNb,UAAU,MACVc,OAAQJ,EACRT,OAAO,oBACPc,OAAQ,kBAAMJ,GAAgBD,EAAY,EAAClB,SAAA,CAE3CC,cAACS,KAAa,CAAAV,SAAC,uBACfC,cAACU,KAAW,CAAAX,SAAC,oHAMrB,ECNewB,EAfa,WAC1B,OACE1B,eAACsB,WAAQ,CAAApB,SAAA,CACPC,cAACC,IAAM,CAACC,MAAM,UAAUC,SAAO,EAACC,GAAG,sBAAqBL,SAAC,iBAGzDF,eAACQ,KAAmB,CAACE,UAAU,MAAMC,OAAO,sBAAqBT,SAAA,CAC/DC,cAACS,KAAa,CAAAV,SAAC,yBACfC,cAACU,KAAW,CAAAX,SAAC,oHAMrB,E,kBCpBayB,EACXxB,cAAA,OAAAD,SACEC,cAAA,QAAMF,UAAU,eAAcC,SAAA,y0BAkCrB0B,EACXzB,cAAA,OAAAD,SACEC,cAAA,QAAMF,UAAU,eAAcC,SAAA,urBAgCrB2B,EACX1B,cAAA,OAAAD,SACEC,cAAA,QAAMF,UAAU,eAAcC,SAAA,+lDAiDrB4B,EACX3B,cAAA,OAAAD,SACEC,cAAA,QAAMF,UAAU,eAAcC,SAAA,q/DCnDnBqB,UAlDC,WAKd,OAJAQ,qBAAU,WACRC,IAAMC,cACR,GAAG,IAGDjC,eAACsB,WAAQ,CAAApB,SAAA,CACPC,cAAC+B,IAAW,CAACC,MAAM,WAAWC,KAAM,CAAC,CAAED,MAAO,cAAgB,CAAEA,MAAO,eACvEnC,eAACqC,KAAG,CAAAnC,SAAA,CACFC,cAACmC,IAAG,CAACC,GAAG,IAAIC,GAAG,KAAItC,SACjBF,eAACyC,IAAI,CAACN,MAAM,qBAAqBO,KAAMf,EAAkBzB,SAAA,CACvDF,eAAC2C,IAAQ,CAAAzC,SAAA,CAAC,8FACoF,IAC5FC,cAAA,QAAAD,SAAM,WAAa,QAAKC,cAAA,QAAAD,SAAM,WAAa,qBAE7CC,cAACY,EAAiB,SAGtBZ,cAACmC,IAAG,CAACC,GAAG,IAAIC,GAAG,KAAItC,SACjBF,eAACyC,IAAI,CAACN,MAAM,uBAAuBO,KAAMd,EAAoB1B,SAAA,CAC3DC,cAACwC,IAAQ,CAAAzC,SAAC,mJAIVC,cAACuB,EAAmB,YAI1B1B,eAACqC,KAAG,CAAAnC,SAAA,CACFC,cAACmC,IAAG,CAACE,GAAG,KAAItC,SACVF,eAACyC,IAAI,CAACN,MAAM,oBAAoBO,KAAMb,EAAiB3B,SAAA,CACrDF,eAAC2C,IAAQ,CAAC1C,UAAU,OAAMC,SAAA,CAAC,YAChBC,cAAA,QAAAD,SAAM,cAAgB,gDAEjCC,cAACW,EAAgB,SAGrBX,cAACmC,IAAG,CAACE,GAAG,KAAItC,SACVF,eAACyC,IAAI,CAACN,MAAM,mBAAmBO,KAAMZ,EAAgB5B,SAAA,CACnDF,eAAC2C,IAAQ,CAAC1C,UAAU,OAAMC,SAAA,CAAC,YAChBC,cAAA,QAAAD,SAAM,YAAc,8FAG/BC,cAACJ,EAAe,cAM5B,C,+FCNemC,IA/CK,SAACU,GAEnB,IAAQR,EAAgBQ,EAAhBR,KAAMD,EAAUS,EAAVT,MAqBd,OACEhC,cAAA,OAAKF,UAAU,qBAAoBC,SACjCC,cAAA,OAAKF,UAAU,iDAAgDC,SAC7DC,cAAA,OAAKF,UAAU,sBAAqBC,SAClCF,eAAA,OAAKC,UAAU,SAAQC,SAAA,CACpBiC,EACChC,cAAA,MAAIF,UAAU,wCAAuCC,SAAEiC,IAEvD,GAEFhC,cAAA,OAAKF,UAAU,6DAA4DC,SACzEF,eAAC6C,IAAU,CAAA3C,SAAA,CACTC,cAAC2C,IAAc,CAACC,IAAI,KAAI7C,SACtBC,cAAC6C,IAAI,CAACC,GAAG,IAAG/C,SAAC,gBA/BpBkC,EAAKc,KAAI,SAACC,EAAMC,GACrB,IAAMC,EAAUF,EAAKG,KAAON,IAAO1B,WAC7BiC,EAAanB,EAAKoB,OAAS,IAAMJ,EACvC,OACEjD,cAAC2C,IAAc,CACbC,IAAI,KAEJU,QAASF,EACTtD,UAAWyD,IAAW,CAAE,gBAAiBH,IAAcrD,SAEvDC,cAACkD,EAAOM,wBAAA,GAAMR,EAAKG,KAAO,CAAEL,GAAIE,EAAKG,MAAS,CAAC,GAAC,IAAApD,SAC7CiD,EAAKhB,UALHiB,EASX,iBA0BJ,C,+ECtBeQ,IAhCK,SAAAhB,GAElB,IAAQT,EAA4CS,EAA5CT,MAAOjC,EAAqC0C,EAArC1C,SAAU2D,EAA2BjB,EAA3BiB,OAAQnB,EAAmBE,EAAnBF,KAAMoB,EAAalB,EAAbkB,SAGvC9C,EAA4BC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAApCQ,EAAMN,EAAA,GAAE6C,EAAS7C,EAAA,GAGlB8C,EAAWF,GAAsB3D,cAAC8D,IAAI,CAACC,KAAM,KAM7Cb,EAAUQ,EAASvC,WAAW6C,IAEpC,OACEnE,eAACyC,IAAI,CAACxC,UAAU,eAAcC,SAAA,CAC5BF,eAACoE,IAAU,CAAAlE,SAAA,CACTC,cAACkE,IAAS,CAACtB,IAAI,KAAI7C,SAAEiC,IACrBhC,cAAA,OAAKF,UAAU,uBAAuBqE,QAT7B,WAAH,OAASP,GAAWvC,EAAO,EASqBtB,SACnD8D,OAGL7D,cAACkD,EAAO,CAAAnD,SAAEA,IACVC,cAACoE,IAAQ,CAAC/C,OAAQA,EAAOtB,SACvBC,cAACgE,IAAQ,CAAAjE,SAAEwC,QAInB,C","file":"static/js/155.11a38a9b.chunk.js","sourcesContent":["// ** Reactstrap Imports\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverTriggers = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline id='popFocus'>\n        Focus\n      </Button>\n      <UncontrolledPopover trigger='focus' placement='top' target='popFocus'>\n        <PopoverHeader>Focus Trigger</PopoverHeader>\n        <PopoverBody>\n          Focusing on the trigging element makes this popover appear. Blurring (clicking away) makes it disappear. You\n          cannot select this text as the popover will disappear when you try.\n        </PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popClick'>\n        Click\n      </Button>\n      <UncontrolledPopover trigger='click' placement='top' target='popClick'>\n        <PopoverHeader>Click Trigger</PopoverHeader>\n        <PopoverBody>\n          Clicking on the triggering element makes this popover appear. Clicking on it again will make it disappear. You\n          can select this text, but clicking away (somewhere other than the triggering element) will not dismiss this\n          popover.\n        </PopoverBody>\n      </UncontrolledPopover>\n\n      <Button trigger='legacy' color='primary' outline id='popLegacy'>\n        Legacy\n      </Button>\n      <UncontrolledPopover placement='top' target='popLegacy'>\n        <PopoverHeader>Legacy Trigger</PopoverHeader>\n        <PopoverBody>\n          Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap\n          correctly supported click and focus, it had a hybrid which was very useful and has been brought back as\n          trigger=\"legacy\". One advantage of the legacy trigger is that it allows the popover text to be selected while\n          also closing when clicking outside the triggering element and popover itself.\n        </PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  )\n}\nexport default PopoverTriggers\n","// ** Reactstrap Imports\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverPositions = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline id='popTop'>\n        Top\n      </Button>\n      <UncontrolledPopover placement='top' target='popTop'>\n        <PopoverHeader>Popover Top</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popRight'>\n        Right\n      </Button>\n      <UncontrolledPopover placement='right' target='popRight'>\n        <PopoverHeader>Popover Right</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popBottom'>\n        Bottom\n      </Button>\n      <UncontrolledPopover placement='bottom' target='popBottom'>\n        <PopoverHeader>Popover Bottom</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popLeft'>\n        Left\n      </Button>\n      <UncontrolledPopover placement='left' target='popLeft'>\n        <PopoverHeader>Popover Left</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  )\n}\n\nexport default PopoverPositions\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverControlled = () => {\n  const [popoverOpen, setPopoverOpen] = useState(false)\n\n  return (\n    <Fragment>\n      <Button color='primary' outline id='controlledPopover'>\n        Controlled\n      </Button>\n      <Popover\n        placement='top'\n        isOpen={popoverOpen}\n        target='controlledPopover'\n        toggle={() => setPopoverOpen(!popoverOpen)}\n      >\n        <PopoverHeader>Controlled Popover</PopoverHeader>\n        <PopoverBody>\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon drops. Muffin sugar plum marzipan pie.\n        </PopoverBody>\n      </Popover>\n    </Fragment>\n  )\n}\nexport default PopoverControlled\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverUncontrolled = () => {\n  return (\n    <Fragment>\n      <Button color='primary' outline id='uncontrolledPopover'>\n        Uncontrolled\n      </Button>\n      <UncontrolledPopover placement='top' target='uncontrolledPopover'>\n        <PopoverHeader>Uncontrolled Popover</PopoverHeader>\n        <PopoverBody>\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon drops. Muffin sugar plum marzipan pie.\n        </PopoverBody>\n      </UncontrolledPopover>\n    </Fragment>\n  )\n}\nexport default PopoverUncontrolled\n","export const popoverControlled = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Button, Popover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverControlled = () => {\n  const [popoverOpen, setPopoverOpen] = useState(false)\n\n  return (\n    <React.Fragment>\n      <Button color='primary' outline id='controlledPopover'>\n        Controlled\n      </Button>\n      <Popover\n        placement='top'\n        target='controlledPopover'\n        isOpen={popoverOpen}\n        toggle={() => setPopoverOpen(!popoverOpen)}\n      >\n        <PopoverHeader>Controlled Popover</PopoverHeader>\n        <PopoverBody>\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon\n          drops. Muffin sugar plum marzipan pie.\n        </PopoverBody>\n      </Popover>\n    </React.Fragment>\n  )\n}\nexport default PopoverControlled\n`}\n    </code>\n  </pre>\n)\n\nexport const popoverUncontrolled = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport {\n  Button,\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody\n} from 'reactstrap'\n\nconst PopoverUncontrolled = () => {\n  return (\n    <React.Fragment>\n      <Button color='primary' outline id='uncontrolledPopover'>\n        Uncontrolled\n      </Button>\n      <UncontrolledPopover placement='top' target='uncontrolledPopover'>\n        <PopoverHeader>Uncontrolled Popover</PopoverHeader>\n        <PopoverBody>\n          Macaroon chocolate candy. I love carrot cake gingerbread cake lemon\n          drops. Muffin sugar plum marzipan pie.\n        </PopoverBody>\n      </UncontrolledPopover>\n    </React.Fragment>\n  )\n}\nexport default PopoverUncontrolled\n`}\n    </code>\n  </pre>\n)\n\nexport const popoverPositions = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverPositions = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline id='popTop'>\n        Top\n      </Button>\n      <UncontrolledPopover placement='top' target='popTop'>\n        <PopoverHeader>Popover Top</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popRight'>\n        Right\n      </Button>\n      <UncontrolledPopover placement='right' target='popRight'>\n        <PopoverHeader>Popover Right</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popBottom'>\n        Bottom\n      </Button>\n      <UncontrolledPopover placement='bottom' target='popBottom'>\n        <PopoverHeader>Popover Bottom</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popLeft'>\n        Left\n      </Button>\n      <UncontrolledPopover placement='left' target='popLeft'>\n        <PopoverHeader>Popover Left</PopoverHeader>\n        <PopoverBody>Lorem ipsum dolor sit amet consectetur adipisicing elit. Doloremque, cumque.</PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  )\n}\n\nexport default PopoverPositions\n`}\n    </code>\n  </pre>\n)\n\nexport const popoverTriggers = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap'\n\nconst PopoverTriggers = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline id='popFocus'>\n        Focus\n      </Button>\n      <UncontrolledPopover trigger='focus' placement='top' target='popFocus'>\n        <PopoverHeader>Focus Trigger</PopoverHeader>\n        <PopoverBody>\n          Focusing on the trigging element makes this popover appear. Blurring (clicking away) makes it disappear. You\n          cannot select this text as the popover will disappear when you try.\n        </PopoverBody>\n      </UncontrolledPopover>\n\n      <Button color='primary' outline id='popClick'>\n        Click\n      </Button>\n      <UncontrolledPopover trigger='click' placement='top' target='popClick'>\n        <PopoverHeader>Click Trigger</PopoverHeader>\n        <PopoverBody>\n          Clicking on the triggering element makes this popover appear. Clicking on it again will make it disappear. You\n          can select this text, but clicking away (somewhere other than the triggering element) will not dismiss this\n          popover.\n        </PopoverBody>\n      </UncontrolledPopover>\n\n      <Button trigger='legacy' color='primary' outline id='popLegacy'>\n        Legacy\n      </Button>\n      <UncontrolledPopover placement='top' target='popLegacy'>\n        <PopoverHeader>Legacy Trigger</PopoverHeader>\n        <PopoverBody>\n          Legacy is a reactstrap special trigger value (outside of bootstrap's spec/standard). Before reactstrap\n          correctly supported click and focus, it had a hybrid which was very useful and has been brought back as\n          trigger=\"legacy\". One advantage of the legacy trigger is that it allows the popover text to be selected while\n          also closing when clicking outside the triggering element and popover itself.\n        </PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  )\n}\nexport default PopoverTriggers\n`}\n    </code>\n  </pre>\n)\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport PopoverTriggers from './PopoverTriggers'\nimport PopoverPositions from './PopoverPositions'\nimport PopoverControlled from './PopoverControlled'\nimport PopoverUncontrolled from './PopoverUncontrolled'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Source Code\nimport { popoverControlled, popoverUncontrolled, popoverPositions, popoverTriggers } from './PopoverSourceCode'\n\nconst Popover = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Popovers' data={[{ title: 'Components' }, { title: 'Popovers' }]} />\n      <Row>\n        <Col md='6' sm='12'>\n          <Card title='Controlled Popover' code={popoverControlled}>\n            <CardText>\n              For controlled Popover you'll have to manage state of component. Controlled Popover require{' '}\n              <code>isOpen</code> and <code>toggle</code> props to work.\n            </CardText>\n            <PopoverControlled />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Uncontrolled Popover' code={popoverUncontrolled}>\n            <CardText>\n              You can create an uncontrolled popover without having to manage state. All you have to do is wrap your\n              content inside UncontrolledPopover tag.\n            </CardText>\n            <PopoverUncontrolled />\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm='12'>\n          <Card title='Popover Positions' code={popoverPositions}>\n            <CardText className='mb-0'>\n              Use prop <code>placement</code> to place you popover at desired position.\n            </CardText>\n            <PopoverPositions />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Popover Triggers' code={popoverTriggers}>\n            <CardText className='mb-0'>\n              Use prop <code>trigger</code> for various trigger options. Trigger each popover to see information about\n              the trigger.\n            </CardText>\n            <PopoverTriggers />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Popover\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}