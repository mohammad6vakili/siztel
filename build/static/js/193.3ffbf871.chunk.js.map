{"version":3,"sources":["views/tables/data-tables/advance/TableServerSide.js","views/tables/data-tables/advance/TableAdvSearch.js","views/tables/data-tables/advance/index.js"],"names":["DataTableServerSide","dispatch","useDispatch","store","useSelector","state","dataTables","currentPage","setCurrentPage","useState","rowsPerPage","setRowsPerPage","searchValue","setSearchValue","useEffect","getData","page","perPage","q","_jsx","Fragment","children","_jsxs","Card","CardHeader","className","CardTitle","tag","Row","Col","sm","Label","for","Input","type","id","value","onChange","e","parseInt","target","handlePerPage","bsSize","DataTable","noHeader","pagination","paginationServer","columns","serverSideColumns","sortIcon","ChevronDown","size","paginationComponent","CustomPagination","count","Math","ceil","total","ReactPaginate","previousLabel","nextLabel","breakLabel","pageCount","marginPagesDisplayed","pageRangeDisplayed","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","breakClassName","nextLinkClassName","pageLinkClassName","breakLinkClassName","previousLinkClassName","nextClassName","previousClassName","containerClassName","data","dataToRender","filters","isFiltered","Object","keys","some","k","length","allData","slice","memo","DataTableAdvSearch","Picker","setPicker","searchName","setSearchName","searchPost","setSearchPost","searchCity","setSearchCity","searchEmail","setSearchEmail","searchSalary","setSearchSalary","filteredData","setFilteredData","handleDateFilter","range","arr","updatedData","map","i","date","Date","year","getFullYear","month","getMonth","toString","concat","day","getDate","push","filter","item","start_date","getTime","CardBody","lg","md","placeholder","startsWith","full_name","toLowerCase","includes","email","post","city","Flatpickr","options","mode","dateFormat","salary","advSearchColumns","paginationPerPage","paginationDefaultPage","Tables","Breadcrumbs","title","TableServerSide","TableAdvSearch"],"mappings":"uQAkBA,MAAMA,EAAsBA,KAE1B,MAAMC,EAAWC,cACXC,EAAQC,aAAYC,GAASA,EAAMC,cAGlCC,EAAaC,GAAkBC,mBAAS,IACxCC,EAAaC,GAAkBF,mBAAS,IACxCG,EAAaC,GAAkBJ,mBAAS,IAG/CK,qBAAU,KACRb,EACEc,YAAQ,CACNC,KAAMT,EACNU,QAASP,EACTQ,EAAGN,IAEN,GACA,CAACX,IAyFJ,OACEkB,cAACC,WAAQ,CAAAC,SACPC,eAACC,IAAI,CAAAF,SAAA,CACHF,cAACK,IAAU,CAACC,UAAU,gBAAeJ,SACnCF,cAACO,IAAS,CAACC,IAAI,KAAIN,SAAC,kBAEtBC,eAACM,KAAG,CAACH,UAAU,kBAAiBJ,SAAA,CAC9BF,cAACU,IAAG,CAACC,GAAG,IAAGT,SACTC,eAAA,OAAKG,UAAU,4BAA2BJ,SAAA,CACxCF,cAACY,IAAK,CAACC,IAAI,cAAaX,SAAC,SACzBC,eAACW,IAAK,CACJR,UAAU,mBACVS,KAAK,SACLC,GAAG,cACHC,MAAO1B,EACP2B,SAAUC,GA5EFA,KACpBrC,EACEc,YAAQ,CACNC,KAAMT,EACNU,QAASsB,SAASD,EAAEE,OAAOJ,OAC3BlB,EAAGN,KAGPD,EAAe4B,SAASD,EAAEE,OAAOJ,OAAO,EAoEbK,CAAcH,GAAGjB,SAAA,CAEhCF,cAAA,UAAQiB,MAAO,EAAEf,SAAC,MAClBF,cAAA,UAAQiB,MAAO,GAAGf,SAAC,OACnBF,cAAA,UAAQiB,MAAO,GAAGf,SAAC,OACnBF,cAAA,UAAQiB,MAAO,GAAGf,SAAC,OACnBF,cAAA,UAAQiB,MAAO,GAAGf,SAAC,OACnBF,cAAA,UAAQiB,MAAO,IAAIf,SAAC,WAEtBF,cAACY,IAAK,CAACC,IAAI,cAAaX,SAAC,iBAG7BC,eAACO,IAAG,CAACJ,UAAU,gEAAgEK,GAAG,IAAGT,SAAA,CACnFF,cAACY,IAAK,CAACN,UAAU,OAAOO,IAAI,eAAcX,SAAC,WAG3CF,cAACc,IAAK,CACJR,UAAU,mBACVS,KAAK,OACLQ,OAAO,KACPP,GAAG,eACHC,MAAOxB,EACPyB,SA3HSC,IACnBzB,EAAeyB,EAAEE,OAAOJ,OAExBnC,EACEc,YAAQ,CACNC,KAAMT,EACNU,QAASP,EACTQ,EAAGoB,EAAEE,OAAOJ,QAEf,UAsHGjB,cAAA,OAAKM,UAAU,kBAAiBJ,SAC9BF,cAACwB,IAAS,CACRC,UAAQ,EACRC,YAAU,EACVC,kBAAgB,EAChBrB,UAAU,kBACVsB,QAASC,IACTC,SAAU9B,cAAC+B,IAAW,CAACC,KAAM,KAC7BC,oBAlGeC,KACvB,MAAMC,EAAQC,KAAKC,KAAKrD,EAAMsD,MAAQ/C,GAEtC,OACES,cAACuC,IAAa,CACZC,cAAe,GACfC,UAAW,GACXC,WAAW,MACXC,UAAWP,KAAKC,KAAKF,IAAU,EAC/BS,qBAAsB,EACtBC,mBAAoB,EACpBC,gBAAgB,SAChBC,UAA2B,IAAhB3D,EAAoBA,EAAc,EAAI,EACjD4D,aAAcnD,GArCKA,KACvBf,EACEc,YAAQ,CACNC,KAAMA,EAAKoD,SAAW,EACtBnD,QAASP,EACTQ,EAAGN,KAGPJ,EAAeQ,EAAKoD,SAAW,EAAE,EA6BPC,CAAiBrD,GACvCiD,gBAAgB,SAChBK,cAAc,YACdC,eAAe,YACfC,kBAAkB,YAClBC,kBAAkB,YAClBC,mBAAmB,YACnBC,sBAAsB,YACtBC,cAAc,sBACdC,kBAAkB,sBAClBC,mBACE,8FAEF,EAyEIC,KApEWC,MACnB,MAAMC,EAAU,CACd/D,EAAGN,GAGCsE,EAAaC,OAAOC,KAAKH,GAASI,MAAK,SAAUC,GACrD,OAAOL,EAAQK,GAAGC,OAAS,CAC7B,IAEA,OAAIpF,EAAM4E,KAAKQ,OAAS,EACfpF,EAAM4E,KACkB,IAAtB5E,EAAM4E,KAAKQ,QAAgBL,EAC7B,GAEA/E,EAAMqF,QAAQC,MAAM,EAAG/E,EAChC,EAqDcsE,WAIH,EAIAU,qBAAK1F,G,yBC2JL2F,MAjUYA,KAEzB,MAAOC,EAAQC,GAAapF,mBAAS,KAC9BqF,EAAYC,GAAiBtF,mBAAS,KACtCuF,EAAYC,GAAiBxF,mBAAS,KACtCyF,EAAYC,GAAiB1F,mBAAS,KACtCF,EAAaC,GAAkBC,mBAAS,IACxC2F,EAAaC,GAAkB5F,mBAAS,KACxC6F,EAAcC,GAAmB9F,mBAAS,KAC1C+F,EAAcC,GAAmBhG,mBAAS,IAM3CuE,EAAeA,IAEjBc,EAAWP,QACXS,EAAWT,QACXa,EAAYb,QACZW,EAAWX,QACXe,EAAaf,QACbK,EAAOL,OAEAiB,EAEAzB,IAmLL2B,EAAmBC,IACvB,MAAMC,EAAM,GACZ,IAAIC,EAAc,GASlBF,EAAMG,KAAIC,IACR,MAAMC,EAAO,IAAIC,KAAKF,GAEhBG,EAAOF,EAAKG,cAElB,IAAIC,GAAS,EAAIJ,EAAKK,YAAYC,WAClCF,EAAQA,EAAM7B,OAAS,EAAI6B,EAAK,IAAAG,OAAOH,GAEvC,IAAII,EAAMR,EAAKS,UAAUH,WAIzB,OAHAE,EAAMA,EAAIjC,OAAS,EAAIiC,EAAG,IAAAD,OAAOC,GAEjCZ,EAAIc,KAAK,GAADH,OAAIH,EAAK,KAAAG,OAAIC,EAAG,KAAAD,OAAIL,KACrB,CAAI,IAGbrB,EAAUc,GAENA,EAAMpB,SACRsB,GAzBIT,EAAYb,QAAUO,EAAWP,QAAUS,EAAWT,QAAUW,EAAWX,QAAUe,EAAaf,OAC7FiB,EAEAzB,KAsBoB4C,QAAOC,GAEhC,IAAIX,KAAKW,EAAKC,YAAYC,WAAa,IAAIb,KAAKL,EAAI,IAAIkB,WACxD,IAAIb,KAAKW,EAAKC,YAAYC,WAAa,IAAIb,KAAKL,EAAI,IAAIkB,YAG5DrB,EAAgB,IAAII,IACpBhB,EAAUc,GACZ,EAGF,OACExF,cAACC,WAAQ,CAAAC,SACPC,eAACC,IAAI,CAAAF,SAAA,CACHF,cAACK,IAAU,CAACC,UAAU,gBAAeJ,SACnCF,cAACO,IAAS,CAACC,IAAI,KAAIN,SAAC,qBAEtBF,cAAC4G,IAAQ,CAAA1G,SACPC,eAACM,KAAG,CAACH,UAAU,aAAYJ,SAAA,CACzBC,eAACO,IAAG,CAACmG,GAAG,IAAIC,GAAG,IAAIxG,UAAU,OAAMJ,SAAA,CACjCF,cAACY,IAAK,CAACN,UAAU,aAAaO,IAAI,OAAMX,SAAC,UAGzCF,cAACc,IAAK,CAACE,GAAG,OAAO+F,YAAY,cAAc9F,MAAO0D,EAAYzD,SA1MjDC,IACvB,MAAMF,EAAQE,EAAEE,OAAOJ,MACvB,IAAIyE,EAAc,GASlBd,EAAc3D,GACVA,EAAMmD,SACRsB,GATIT,EAAYb,QAAUS,EAAWT,QAAUW,EAAWX,QAAUe,EAAaf,QAAUK,EAAOL,OACzFiB,EAEAzB,KAMoB4C,QAAOC,IAClC,MAAMO,EAAaP,EAAKQ,UAAUC,cAAcF,WAAW/F,EAAMiG,eAE3DC,EAAWV,EAAKQ,UAAUC,cAAcC,SAASlG,EAAMiG,eAE7D,OAAIF,KAEQA,GAAcG,EACjBA,EACK,KAAI,IAEpB7B,EAAgB,IAAII,IACpBd,EAAc3D,GAChB,OAkLQd,eAACO,IAAG,CAACmG,GAAG,IAAIC,GAAG,IAAIxG,UAAU,OAAMJ,SAAA,CACjCF,cAACY,IAAK,CAACN,UAAU,aAAaO,IAAI,QAAOX,SAAC,WAG1CF,cAACc,IAAK,CACJC,KAAK,QACLC,GAAG,QACH+F,YAAY,mBACZ9F,MAAOgE,EACP/D,SAvLYC,IACxB,MAAMF,EAAQE,EAAEE,OAAOJ,MACvB,IAAIyE,EAAc,GASlBR,EAAejE,GACXA,EAAMmD,SACRsB,GATIf,EAAWP,QAAUS,EAAWT,QAAUW,EAAWX,QAAUe,EAAaf,QAAUK,EAAOL,OACxFiB,EAEAzB,KAMoB4C,QAAOC,IAClC,MAAMO,EAAaP,EAAKW,MAAMF,cAAcF,WAAW/F,EAAMiG,eAEvDC,EAAWV,EAAKW,MAAMF,cAAcC,SAASlG,EAAMiG,eAEzD,OAAIF,KAEQA,GAAcG,EACjBA,EACK,KAAI,IAEpB7B,EAAgB,IAAII,IACpBR,EAAejE,GACjB,OAgKQd,eAACO,IAAG,CAACmG,GAAG,IAAIC,GAAG,IAAIxG,UAAU,OAAMJ,SAAA,CACjCF,cAACY,IAAK,CAACN,UAAU,aAAaO,IAAI,OAAMX,SAAC,UAGzCF,cAACc,IAAK,CAACE,GAAG,OAAO+F,YAAY,eAAe9F,MAAO4D,EAAY3D,SAhKlDC,IACvB,MAAMF,EAAQE,EAAEE,OAAOJ,MACvB,IAAIyE,EAAc,GASlBZ,EAAc7D,GACVA,EAAMmD,SACRsB,GATIT,EAAYb,QAAUO,EAAWP,QAAUW,EAAWX,QAAUe,EAAaf,QAAUK,EAAOL,OACzFiB,EAEAzB,KAMoB4C,QAAOC,IAClC,MAAMO,EAAaP,EAAKY,KAAKH,cAAcF,WAAW/F,EAAMiG,eAEtDC,EAAWV,EAAKY,KAAKH,cAAcC,SAASlG,EAAMiG,eAExD,OAAIF,KAEQA,GAAcG,EACjBA,EACK,KAAI,IAEpB7B,EAAgB,IAAII,IACpBZ,EAAc7D,GAChB,OAwIQd,eAACO,IAAG,CAACmG,GAAG,IAAIC,GAAG,IAAIxG,UAAU,OAAMJ,SAAA,CACjCF,cAACY,IAAK,CAACN,UAAU,aAAaO,IAAI,OAAMX,SAAC,UAGzCF,cAACc,IAAK,CAACE,GAAG,OAAO+F,YAAY,YAAY9F,MAAO8D,EAAY7D,SAxI/CC,IACvB,MAAMF,EAAQE,EAAEE,OAAOJ,MACvB,IAAIyE,EAAc,GASlBV,EAAc/D,GACVA,EAAMmD,SACRsB,GATIT,EAAYb,QAAUO,EAAWP,QAAUS,EAAWT,QAAUe,EAAaf,QAAUK,EAAOL,OACzFiB,EAEAzB,KAMoB4C,QAAOC,IAClC,MAAMO,EAAaP,EAAKa,KAAKJ,cAAcF,WAAW/F,EAAMiG,eAEtDC,EAAWV,EAAKa,KAAKJ,cAAcC,SAASlG,EAAMiG,eAExD,OAAIF,KAEQA,GAAcG,EACjBA,EACK,KAAI,IAEpB7B,EAAgB,IAAII,IACpBV,EAAc/D,GAChB,OAgHQd,eAACO,IAAG,CAACmG,GAAG,IAAIC,GAAG,IAAIxG,UAAU,OAAMJ,SAAA,CACjCF,cAACY,IAAK,CAACN,UAAU,aAAaO,IAAI,OAAMX,SAAC,UAGzCF,cAACuH,IAAS,CACRjH,UAAU,eACVU,GAAG,OACHC,MAAOwD,EACP+C,QAAS,CAAEC,KAAM,QAASC,WAAY,SACtCxG,SAAU2E,GAAQN,EAAiBM,QAGvC1F,eAACO,IAAG,CAACmG,GAAG,IAAIC,GAAG,IAAIxG,UAAU,OAAMJ,SAAA,CACjCF,cAACY,IAAK,CAACN,UAAU,aAAaO,IAAI,SAAQX,SAAC,YAG3CF,cAACc,IAAK,CAACE,GAAG,SAAS+F,YAAY,QAAQ9F,MAAOkE,EAAcjE,SA5H7CC,IACzB,MAAMF,EAAQE,EAAEE,OAAOJ,MACvB,IAAIyE,EAAc,GASlBN,EAAgBnE,GACZA,EAAMmD,SACRsB,GATIT,EAAYb,QAAUO,EAAWP,QAAUS,EAAWT,QAAUW,EAAWX,QAAUK,EAAOL,OACvFiB,EAEAzB,KAMoB4C,QAAOC,IAClC,MAAMO,EAAaP,EAAKkB,OAAOT,cAAcF,WAAW/F,EAAMiG,eAExDC,EAAWV,EAAKkB,OAAOT,cAAcC,SAASlG,EAAMiG,eAE1D,OAAIF,KAEQA,GAAcG,EACjBA,EACK,KAAI,IAEpB7B,EAAgB,IAAII,IACpBN,EAAgBnE,GAClB,YAsGIjB,cAAA,OAAKM,UAAU,kBAAiBJ,SAC9BF,cAACwB,IAAS,CACRC,UAAQ,EACRC,YAAU,EACVE,QAASgG,IACTC,kBAAmB,EACnBvH,UAAU,kBACVwB,SAAU9B,cAAC+B,IAAW,CAACC,KAAM,KAC7B8F,sBAAuB1I,EAAc,EACrC6C,oBAzReC,IACvBlC,cAACuC,IAAa,CACZC,cAAe,GACfC,UAAW,GACXM,UAAW3D,EACX4D,aAAcnD,GAxBOA,IAAQR,EAAeQ,EAAKoD,UAwB3BC,CAAiBrD,GACvC8C,UAAWP,KAAKC,KAAKwB,IAAeO,OAAS,IAAM,EACnD1B,WAAY,MACZG,mBAAoB,EACpBD,qBAAsB,EACtBE,gBAAgB,SAChBK,cAAc,YACdC,eAAe,YACfC,kBAAkB,YAClBC,kBAAkB,YAClBC,mBAAmB,YACnBC,sBAAsB,YACtBC,cAAc,sBACdC,kBAAkB,sBAClBC,mBAAoB,+FAuQdC,KAAMC,YAIH,E,OC/SAkE,UAhBAA,IAEX5H,eAACF,WAAQ,CAAAC,SAAA,CACPF,cAACgI,IAAW,CAACC,MAAM,qBAAqBrE,KAAM,CAAC,CAAEqE,MAAO,cAAgB,CAAEA,MAAO,yBACjF9H,eAACM,KAAG,CAAAP,SAAA,CACFF,cAACU,IAAG,CAACC,GAAG,KAAIT,SACVF,cAACkI,EAAe,MAElBlI,cAACU,IAAG,CAACC,GAAG,KAAIT,SACVF,cAACmI,EAAc,W","file":"static/js/193.3ffbf871.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect, memo } from 'react'\n\n// ** Table Columns\nimport { serverSideColumns } from '../data'\n\n// ** Store & Actions\nimport { getData } from '../store'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Input, Label, Row, Col } from 'reactstrap'\n\nconst DataTableServerSide = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.dataTables)\n\n  // ** States\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(7)\n  const [searchValue, setSearchValue] = useState('')\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: rowsPerPage,\n        q: searchValue\n      })\n    )\n  }, [dispatch])\n\n  // ** Function to handle filter\n  const handleFilter = e => {\n    setSearchValue(e.target.value)\n\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: rowsPerPage,\n        q: e.target.value\n      })\n    )\n  }\n\n  // ** Function to handle Pagination and get data\n  const handlePagination = page => {\n    dispatch(\n      getData({\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        q: searchValue\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function to handle per page\n  const handlePerPage = e => {\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: parseInt(e.target.value),\n        q: searchValue\n      })\n    )\n    setRowsPerPage(parseInt(e.target.value))\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Math.ceil(store.total / rowsPerPage)\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        breakLabel='...'\n        pageCount={Math.ceil(count) || 1}\n        marginPagesDisplayed={2}\n        pageRangeDisplayed={2}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        activeClassName='active'\n        pageClassName='page-item'\n        breakClassName='page-item'\n        nextLinkClassName='page-link'\n        pageLinkClassName='page-link'\n        breakLinkClassName='page-link'\n        previousLinkClassName='page-link'\n        nextClassName='page-item next-item'\n        previousClassName='page-item prev-item'\n        containerClassName={\n          'pagination react-paginate separated-pagination pagination-sm justify-content-end pe-1 mt-1'\n        }\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      q: searchValue\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader className='border-bottom'>\n          <CardTitle tag='h4'>Server Side</CardTitle>\n        </CardHeader>\n        <Row className='mx-0 mt-1 mb-50'>\n          <Col sm='6'>\n            <div className='d-flex align-items-center'>\n              <Label for='sort-select'>show</Label>\n              <Input\n                className='dataTable-select'\n                type='select'\n                id='sort-select'\n                value={rowsPerPage}\n                onChange={e => handlePerPage(e)}\n              >\n                <option value={7}>7</option>\n                <option value={10}>10</option>\n                <option value={25}>25</option>\n                <option value={50}>50</option>\n                <option value={75}>75</option>\n                <option value={100}>100</option>\n              </Input>\n              <Label for='sort-select'>entries</Label>\n            </div>\n          </Col>\n          <Col className='d-flex align-items-center justify-content-sm-end mt-sm-0 mt-1' sm='6'>\n            <Label className='me-1' for='search-input'>\n              Search\n            </Label>\n            <Input\n              className='dataTable-filter'\n              type='text'\n              bsSize='sm'\n              id='search-input'\n              value={searchValue}\n              onChange={handleFilter}\n            />\n          </Col>\n        </Row>\n        <div className='react-dataTable'>\n          <DataTable\n            noHeader\n            pagination\n            paginationServer\n            className='react-dataTable'\n            columns={serverSideColumns}\n            sortIcon={<ChevronDown size={10} />}\n            paginationComponent={CustomPagination}\n            data={dataToRender()}\n          />\n        </div>\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default memo(DataTableServerSide)\n","// ** React Imports\nimport { useState, Fragment } from 'react'\n\n// ** Table Columns\nimport { data, advSearchColumns } from '../data'\n\n// ** Third Party Components\nimport Flatpickr from 'react-flatpickr'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Input, Label, Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\nconst DataTableAdvSearch = () => {\n  // ** States\n  const [Picker, setPicker] = useState('')\n  const [searchName, setSearchName] = useState('')\n  const [searchPost, setSearchPost] = useState('')\n  const [searchCity, setSearchCity] = useState('')\n  const [currentPage, setCurrentPage] = useState(0)\n  const [searchEmail, setSearchEmail] = useState('')\n  const [searchSalary, setSearchSalary] = useState('')\n  const [filteredData, setFilteredData] = useState([])\n\n  // ** Function to handle Pagination\n  const handlePagination = page => setCurrentPage(page.selected)\n\n  // ** Table data to render\n  const dataToRender = () => {\n    if (\n      searchName.length ||\n      searchPost.length ||\n      searchEmail.length ||\n      searchCity.length ||\n      searchSalary.length ||\n      Picker.length\n    ) {\n      return filteredData\n    } else {\n      return data\n    }\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => (\n    <ReactPaginate\n      previousLabel={''}\n      nextLabel={''}\n      forcePage={currentPage}\n      onPageChange={page => handlePagination(page)}\n      pageCount={Math.ceil(dataToRender().length / 7) || 1}\n      breakLabel={'...'}\n      pageRangeDisplayed={2}\n      marginPagesDisplayed={2}\n      activeClassName='active'\n      pageClassName='page-item'\n      breakClassName='page-item'\n      nextLinkClassName='page-link'\n      pageLinkClassName='page-link'\n      breakLinkClassName='page-link'\n      previousLinkClassName='page-link'\n      nextClassName='page-item next-item'\n      previousClassName='page-item prev-item'\n      containerClassName={'pagination react-paginate separated-pagination pagination-sm justify-content-end pe-1 mt-1'}\n    />\n  )\n\n  // ** Function to handle name filter\n  const handleNameFilter = e => {\n    const value = e.target.value\n    let updatedData = []\n    const dataToFilter = () => {\n      if (searchEmail.length || searchPost.length || searchCity.length || searchSalary.length || Picker.length) {\n        return filteredData\n      } else {\n        return data\n      }\n    }\n\n    setSearchName(value)\n    if (value.length) {\n      updatedData = dataToFilter().filter(item => {\n        const startsWith = item.full_name.toLowerCase().startsWith(value.toLowerCase())\n\n        const includes = item.full_name.toLowerCase().includes(value.toLowerCase())\n\n        if (startsWith) {\n          return startsWith\n        } else if (!startsWith && includes) {\n          return includes\n        } else return null\n      })\n      setFilteredData([...updatedData])\n      setSearchName(value)\n    }\n  }\n\n  // ** Function to handle email filter\n  const handleEmailFilter = e => {\n    const value = e.target.value\n    let updatedData = []\n    const dataToFilter = () => {\n      if (searchName.length || searchPost.length || searchCity.length || searchSalary.length || Picker.length) {\n        return filteredData\n      } else {\n        return data\n      }\n    }\n\n    setSearchEmail(value)\n    if (value.length) {\n      updatedData = dataToFilter().filter(item => {\n        const startsWith = item.email.toLowerCase().startsWith(value.toLowerCase())\n\n        const includes = item.email.toLowerCase().includes(value.toLowerCase())\n\n        if (startsWith) {\n          return startsWith\n        } else if (!startsWith && includes) {\n          return includes\n        } else return null\n      })\n      setFilteredData([...updatedData])\n      setSearchEmail(value)\n    }\n  }\n\n  // ** Function to handle post filter\n  const handlePostFilter = e => {\n    const value = e.target.value\n    let updatedData = []\n    const dataToFilter = () => {\n      if (searchEmail.length || searchName.length || searchCity.length || searchSalary.length || Picker.length) {\n        return filteredData\n      } else {\n        return data\n      }\n    }\n\n    setSearchPost(value)\n    if (value.length) {\n      updatedData = dataToFilter().filter(item => {\n        const startsWith = item.post.toLowerCase().startsWith(value.toLowerCase())\n\n        const includes = item.post.toLowerCase().includes(value.toLowerCase())\n\n        if (startsWith) {\n          return startsWith\n        } else if (!startsWith && includes) {\n          return includes\n        } else return null\n      })\n      setFilteredData([...updatedData])\n      setSearchPost(value)\n    }\n  }\n\n  // ** Function to handle city filter\n  const handleCityFilter = e => {\n    const value = e.target.value\n    let updatedData = []\n    const dataToFilter = () => {\n      if (searchEmail.length || searchName.length || searchPost.length || searchSalary.length || Picker.length) {\n        return filteredData\n      } else {\n        return data\n      }\n    }\n\n    setSearchCity(value)\n    if (value.length) {\n      updatedData = dataToFilter().filter(item => {\n        const startsWith = item.city.toLowerCase().startsWith(value.toLowerCase())\n\n        const includes = item.city.toLowerCase().includes(value.toLowerCase())\n\n        if (startsWith) {\n          return startsWith\n        } else if (!startsWith && includes) {\n          return includes\n        } else return null\n      })\n      setFilteredData([...updatedData])\n      setSearchCity(value)\n    }\n  }\n\n  // ** Function to handle salary filter\n  const handleSalaryFilter = e => {\n    const value = e.target.value\n    let updatedData = []\n    const dataToFilter = () => {\n      if (searchEmail.length || searchName.length || searchPost.length || searchCity.length || Picker.length) {\n        return filteredData\n      } else {\n        return data\n      }\n    }\n\n    setSearchSalary(value)\n    if (value.length) {\n      updatedData = dataToFilter().filter(item => {\n        const startsWith = item.salary.toLowerCase().startsWith(value.toLowerCase())\n\n        const includes = item.salary.toLowerCase().includes(value.toLowerCase())\n\n        if (startsWith) {\n          return startsWith\n        } else if (!startsWith && includes) {\n          return includes\n        } else return null\n      })\n      setFilteredData([...updatedData])\n      setSearchSalary(value)\n    }\n  }\n\n  // ** Function to handle date filter\n  const handleDateFilter = range => {\n    const arr = []\n    let updatedData = []\n    const dataToFilter = () => {\n      if (searchEmail.length || searchName.length || searchPost.length || searchCity.length || searchSalary.length) {\n        return filteredData\n      } else {\n        return data\n      }\n    }\n\n    range.map(i => {\n      const date = new Date(i)\n\n      const year = date.getFullYear()\n\n      let month = (1 + date.getMonth()).toString()\n      month = month.length > 1 ? month : `0${month}`\n\n      let day = date.getDate().toString()\n      day = day.length > 1 ? day : `0${day}`\n\n      arr.push(`${month}/${day}/${year}`)\n      return true\n    })\n\n    setPicker(range)\n\n    if (range.length) {\n      updatedData = dataToFilter().filter(item => {\n        return (\n          new Date(item.start_date).getTime() >= new Date(arr[0]).getTime() &&\n          new Date(item.start_date).getTime() <= new Date(arr[1]).getTime()\n        )\n      })\n      setFilteredData([...updatedData])\n      setPicker(range)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader className='border-bottom'>\n          <CardTitle tag='h4'>Advance Search</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row className='mt-1 mb-50'>\n            <Col lg='4' md='6' className='mb-1'>\n              <Label className='form-label' for='name'>\n                Name:\n              </Label>\n              <Input id='name' placeholder='Bruce Wayne' value={searchName} onChange={handleNameFilter} />\n            </Col>\n            <Col lg='4' md='6' className='mb-1'>\n              <Label className='form-label' for='email'>\n                Email:\n              </Label>\n              <Input\n                type='email'\n                id='email'\n                placeholder='Bwayne@email.com'\n                value={searchEmail}\n                onChange={handleEmailFilter}\n              />\n            </Col>\n            <Col lg='4' md='6' className='mb-1'>\n              <Label className='form-label' for='post'>\n                Post:\n              </Label>\n              <Input id='post' placeholder='Web Designer' value={searchPost} onChange={handlePostFilter} />\n            </Col>\n            <Col lg='4' md='6' className='mb-1'>\n              <Label className='form-label' for='city'>\n                City:\n              </Label>\n              <Input id='city' placeholder='San Diego' value={searchCity} onChange={handleCityFilter} />\n            </Col>\n            <Col lg='4' md='6' className='mb-1'>\n              <Label className='form-label' for='date'>\n                Date:\n              </Label>\n              <Flatpickr\n                className='form-control'\n                id='date'\n                value={Picker}\n                options={{ mode: 'range', dateFormat: 'm/d/Y' }}\n                onChange={date => handleDateFilter(date)}\n              />\n            </Col>\n            <Col lg='4' md='6' className='mb-1'>\n              <Label className='form-label' for='salary'>\n                Salary:\n              </Label>\n              <Input id='salary' placeholder='10000' value={searchSalary} onChange={handleSalaryFilter} />\n            </Col>\n          </Row>\n        </CardBody>\n        <div className='react-dataTable'>\n          <DataTable\n            noHeader\n            pagination\n            columns={advSearchColumns}\n            paginationPerPage={7}\n            className='react-dataTable'\n            sortIcon={<ChevronDown size={10} />}\n            paginationDefaultPage={currentPage + 1}\n            paginationComponent={CustomPagination}\n            data={dataToRender()}\n          />\n        </div>\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default DataTableAdvSearch\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport Breadcrumbs from '@components/breadcrumbs'\n\n// ** Third Party Components\nimport { Row, Col } from 'reactstrap'\n\n// ** Demo Components\nimport TableServerSide from './TableServerSide'\nimport TableAdvSearch from './TableAdvSearch'\n\n// ** Styles\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n\nconst Tables = () => {\n  return (\n    <Fragment>\n      <Breadcrumbs title='Datatables Advance' data={[{ title: 'Datatables' }, { title: 'Datatables Advance' }]} />\n      <Row>\n        <Col sm='12'>\n          <TableServerSide />\n        </Col>\n        <Col sm='12'>\n          <TableAdvSearch />\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default Tables\n"],"sourceRoot":""}