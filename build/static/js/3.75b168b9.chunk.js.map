{"version":3,"sources":["../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/logic/shouldSubscribeByName.ts","../../src/useSubscribe.ts","../../src/useController.ts","../../src/useFormState.ts","../../src/logic/getControllerValue.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/utils/isFunction.ts","../../src/utils/cloneObject.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["element","type","data","Date","value","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","names","name","some","current","substring","search","getNodeParentName","filter","Boolean","val","undefined","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","BLUR","CHANGE","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","source","copy","HookFormContext","useFormContext","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","Object","defineProperty","get","keys","length","formStateData","omit","isEmptyObject","find","signalName","convertToArrayPayload","currentName","startsWith","tearDown","_unsubscribe","unsubscribe","updateSubscriptionProps","props","disabled","subject","subscribe","next","callback","useSubscribe","_updateSubscription","skipEarlySubscription","useController","methods","control","shouldUnregister","setInputStateValue","_formValues","_defaultValues","updateFormState","_formState","_localProxyFormState","isDirty","dirtyFields","touchedFields","isValidating","isValid","errors","_name","shouldSubscribeByName","shouldRenderFormState","_subjects","state","getProxyFormState","useFormState","values","registerProps","register","rules","updateMounted","field","_fields","_f","mount","_shouldUnregisterField","_options","isNameInFieldArray","_names","array","_stateFlags","action","unregister","event","target","isCheckBoxInput","checked","getControllerValue","ref","elm","focus","setCustomValidity","message","reportValidity","fieldState","invalid","isTouched","error","Controller","render","validateAllFieldCriteria","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","refs","cloneObject","Set","isFunction","createSubject","_observers","observers","observer","subscription","tearDowns","add","push","teardown","createSubscription","subscriber","closed","createSubscriber","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","window","document","isHTMLElement","contains","unset","updatePath","childObject","slice","baseGet","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","validResult","options","option","map","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","criteriaMode","shouldUseNativeValidation","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","fieldName","join","foundError","pop","deepMerge","targetValue","sourceValue","setDirtyFields","defaultValues","parentNode","parentName","isBlurEvent","isSubmitted","reValidateMode","isString","RegExp","getValidateError","isMessage","validationData","isRegex","async","inputValue","inputRef","setCustomValidty","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","appendErrors","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","exceedMin","maxOutput","minOutput","valueDate","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","watch","unMount","timer","validateFields","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","isFieldWatched","watchAll","has","_updateValid","resolver","_executeSchema","executeBuildInValidation","shouldSkipRender","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","isCurrentTouched","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","_getDirty","isPreviousFieldDirty","updateFieldArrayDirty","setFieldArrayDirtyFields","unsetEmptyArray","shouldRenderByError","previousFieldError","shouldUpdateValid","wait","delayError","args","clearTimeout","setTimeout","updatedFormState","context","getResolverOptions","shouldOnlyCheckValid","valid","fieldReference","fieldError","validateField","getValues","_getWatch","isGlobal","fieldValues","isWeb","forEach","selectRef","selected","checkboxRef","radioRef","shouldDirty","shouldTouch","shouldValidate","trigger","setValues","fieldKey","handleChange","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","previousErrorLookupResult","errorLookupResult","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","fieldRef","querySelectorAll","isRadioOrCheckboxFunction","live","_removeUnmounted","_updateFieldArray","method","shouldSetValues","shouldSetFields","argA","argB","_getFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","err","info","setValue","isFieldArray","reset","formValues","keepStateOptions","hasUpdatedFormValues","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","closest","keepSubmitCount","keepIsSubmitted","entries","keepErrors","clearErrors","inputName","setError","setFocus","useForm","_formControl"],"mappings":"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","file":"static/js/3.75b168b9.chunk.js","sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <HookFormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </HookFormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T>(name?: T, signalName?: string) =>\n  !name ||\n  !signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (currentName.startsWith(signalName) ||\n        signalName.startsWith(currentName)),\n  );\n","import * as React from 'react';\n\nimport { Subject, TearDown } from './utils/createSubject';\nimport { Noop } from './types';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n  skipEarlySubscription?: boolean;\n};\n\ntype Unsubscribe = { unsubscribe: TearDown };\n\ntype Payload<T> = {\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>;\n  props: Props<T>;\n};\n\nconst tearDown = (\n  _unsubscribe: React.MutableRefObject<Unsubscribe | undefined>,\n) => {\n  if (_unsubscribe.current) {\n    _unsubscribe.current.unsubscribe();\n    _unsubscribe.current = undefined;\n  }\n};\n\nconst updateSubscriptionProps =\n  <T>({ _unsubscribe, props }: Payload<T>) =>\n  () => {\n    if (props.disabled) {\n      tearDown(_unsubscribe);\n    } else if (!_unsubscribe.current) {\n      _unsubscribe.current = props.subject.subscribe({\n        next: props.callback,\n      });\n    }\n  };\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _unsubscribe = React.useRef<Unsubscribe>();\n  const _updateSubscription = React.useRef<Noop>(() => {});\n\n  _updateSubscription.current = updateSubscriptionProps({\n    _unsubscribe,\n    props,\n  });\n\n  !props.skipEarlySubscription && _updateSubscription.current();\n\n  React.useEffect(() => {\n    _updateSubscription.current();\n    return () => tearDown(_unsubscribe);\n  }, []);\n}\n","import * as React from 'react';\n\nimport getControllerValue from './logic/getControllerValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport get from './utils/get';\nimport { EVENTS } from './constants';\nimport {\n  Field,\n  FieldPath,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, control = methods.control, shouldUnregister } = props;\n  const [value, setInputStateValue] = React.useState(\n    get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n  );\n  const formState = useFormState({\n    control: control || methods.control,\n    name,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    subject: control._subjects.control,\n    callback: (data) =>\n      (!data.name || _name.current === data.name) &&\n      setInputStateValue(get(data.values, _name.current)),\n    skipEarlySubscription: true,\n  });\n\n  const registerProps = control.register(name, {\n    ...props.rules,\n    value,\n  });\n\n  const updateMounted = React.useCallback(\n    (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    },\n    [control],\n  );\n\n  React.useEffect(() => {\n    updateMounted(name, true);\n\n    return () => {\n      const _shouldUnregisterField =\n        control._options.shouldUnregister || shouldUnregister;\n\n      if (\n        isNameInFieldArray(control._names.array, name)\n          ? _shouldUnregisterField && !control._stateFlags.action\n          : _shouldUnregisterField\n      ) {\n        control.unregister(name);\n      } else {\n        updateMounted(name, false);\n      }\n    };\n  }, [name, control, shouldUnregister, updateMounted]);\n\n  return {\n    field: {\n      onChange: (event: any) => {\n        const value = getControllerValue(event);\n        setInputStateValue(value);\n\n        registerProps.onChange({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.CHANGE,\n        });\n      },\n      onBlur: () => {\n        registerProps.onBlur({\n          target: {\n            value,\n            name: name as InternalFieldName,\n          },\n          type: EVENTS.BLUR,\n        });\n      },\n      name,\n      value,\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (elm && field && elm.focus) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: {\n      invalid: !!get(formState.errors, name),\n      isDirty: !!get(formState.dirtyFields, name),\n      isTouched: !!get(formState.touchedFields, name),\n      error: get(formState.errors, name),\n    },\n  };\n}\n","import * as React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport { FieldValues, UseFormStateProps, UseFormStateReturn } from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    callback: (formState) =>\n      shouldSubscribeByName(_name.current, formState.name) &&\n      shouldRenderFormState(formState, _localProxyFormState.current) &&\n      updateFormState({\n        ...control._formState,\n        ...formState,\n      }),\n    subject: control._subjects.state,\n    skipEarlySubscription: true,\n  });\n\n  return getProxyFormState(\n    formState,\n    control._proxyFormState,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type TearDown = Noop;\n\nexport type Subscription = {\n  add: (tearDown: TearDown) => void;\n  unsubscribe: () => void;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n  unsubscribe: Noop;\n};\n\nfunction createSubscription() {\n  let tearDowns: TearDown[] = [];\n\n  const add = (tearDown: TearDown) => {\n    tearDowns.push(tearDown);\n  };\n\n  const unsubscribe = () => {\n    for (const teardown of tearDowns) {\n      teardown();\n    }\n    tearDowns = [];\n  };\n\n  return {\n    add,\n    unsubscribe,\n  };\n}\n\nfunction createSubscriber<T>(\n  observer: Observer<T>,\n  subscription: Subscription,\n): Observer<T> {\n  let closed = false;\n  subscription.add(() => (closed = true));\n\n  const next = (value: T) => {\n    if (!closed) {\n      observer.next(value);\n    }\n  };\n\n  return {\n    next,\n  };\n}\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>) => {\n    const subscription = createSubscription();\n    const subscriber = createSubscriber(observer, subscription);\n    _observers.push(subscriber);\n    return subscription;\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && document.contains(ref);\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = _options.defaultValues || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    control: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (\n    name: FieldPath<TFieldValues>,\n    isBlurEvent?: boolean,\n  ) =>\n    !isBlurEvent &&\n    (_names.watchAll ||\n      _names.watch.has(name) ||\n      _names.watch.has((name.match(/\\w+/) || [])[0]));\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    method,\n    args,\n    values = [],\n    shouldSetValues = true,\n    shouldSetFields = true,\n  ) => {\n    _stateFlags.action = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      const fieldValues = method(get(_fields, name), args.argA, args.argB);\n      shouldSetValues && set(_fields, name, fieldValues);\n    }\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const errors = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSetValues && set(_formState.errors, name, errors);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const touchedFields = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSetValues &&\n        set(_formState.touchedFields as TFieldValues, name, touchedFields);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      updateFieldArrayDirty(name, values);\n    }\n\n    _subjects.state.next({\n      isDirty: _getDirty(name, values),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => (\n    set(_formState.errors, name, error),\n    _subjects.state.next({\n      errors: _formState.errors,\n    })\n  );\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs?: boolean,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(_formValues, name, get(_defaultValues, name));\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n    }\n\n    _stateFlags.mount && _updateValid();\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isCurrentTouched);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const updateFieldArrayDirty = (name: any, value: any) => (\n    set(\n      _formState.dirtyFields as TFieldValues,\n      name,\n      setFieldArrayDirtyFields(\n        value,\n        get(_defaultValues, name, []),\n        get(_formState.dirtyFields, name, []),\n      ),\n    ),\n    unsetEmptyArray(_formState.dirtyFields, name)\n  );\n\n  const shouldRenderByError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback =\n        delayErrorCallback || debounce(updateErrors, props.delayError);\n      delayErrorCallback(name, error);\n    } else {\n      clearTimeout(timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (_proxyFormState.isValidating && !validateFields[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const fieldReference = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    if (names) {\n      const result = convertToArrayPayload(names).map(\n        (fieldName) => (\n          isGlobal && _names.watch.add(fieldName as InternalFieldName),\n          get(fieldValues, fieldName as InternalFieldName)\n        ),\n      );\n\n      return Array.isArray(names) ? result : result[0];\n    }\n\n    isGlobal && (_names.watchAll = true);\n    return fieldValues;\n  };\n\n  const _getFieldArray = (name: InternalFieldName) =>\n    get(\n      _stateFlags.mount ? _formValues : _defaultValues,\n      name,\n      props.shouldUnregister ? get(_defaultValues, name, []) : [],\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(fieldReference.ref) && !isString(fieldValue)) {\n          fieldReference.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          fieldReference.ref.value = fieldValue;\n        }\n\n        shouldRender &&\n          _subjects.control.next({\n            values: _formValues,\n            name,\n          });\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(name, fieldValue, options.shouldTouch);\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue: SetFieldValue<TFieldValues> = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options, true);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        updateFieldArrayDirty(name, value);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const handleChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type ? getFieldValue(field._f) : target.value;\n      const isBlurEvent = event.type === EVENTS.BLUR;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const isWatched = isFieldWatched(name, isBlurEvent);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      set(_formValues, name, fieldValue);\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps && trigger(field._f.deps as FieldPath<TFieldValues>[]);\n\n      shouldRenderByError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: true,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            name(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    !isUndefined(options.value) && set(_formValues, name, options.value);\n\n    field\n      ? isBoolean(options.disabled) &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isBoolean(options.disabled)\n            ? { disabled: options.disabled }\n            : {}),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              register(name, options);\n              let field: Field = get(_fields, name);\n              const fieldRef = isUndefined(ref.value)\n                ? ref.querySelectorAll\n                  ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) ||\n                    ref\n                  : ref\n                : ref;\n\n              const isRadioOrCheckbox = isRadioOrCheckboxFunction(fieldRef);\n\n              if (\n                fieldRef === field._f.ref ||\n                (isRadioOrCheckbox &&\n                  compact(field._f.refs || []).find(\n                    (option) => option === fieldRef,\n                  ))\n              ) {\n                return;\n              }\n\n              field = {\n                _f: isRadioOrCheckbox\n                  ? {\n                      ...field._f,\n                      refs: [\n                        ...compact(field._f.refs || []).filter(live),\n                        fieldRef,\n                      ],\n                      ref: { type: fieldRef.type, name },\n                    }\n                  : {\n                      ...field._f,\n                      ref: fieldRef,\n                    },\n              };\n\n              set(_fields, name, field);\n\n              (!options || !options.disabled) &&\n                updateValidAndValue(name, false, fieldRef);\n            } else {\n              const field: Field = get(_fields, name, {});\n              const shouldUnregister =\n                _options.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              shouldUnregister &&\n                !(\n                  isNameInFieldArray(_names.array, name) && _stateFlags.action\n                ) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const hasUpdatedFormValues = !isEmptyObject(formValues);\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (isWeb) {\n        for (const name of _names.mount) {\n          const field = get(_fields, name);\n          if (field && field._f) {\n            const fieldReference = Array.isArray(field._f.refs)\n              ? field._f.refs[0]\n              : field._f.ref;\n\n            try {\n              isHTMLElement(fieldReference) &&\n                fieldReference.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n      _fields = {};\n\n      _subjects.control.next({\n        values: hasUpdatedFormValues ? cloneUpdatedValues : _defaultValues,\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values: cloneUpdatedValues,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? !deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty\n        ? _formState.dirtyFields\n        : ((keepStateOptions.keepDefaultValues && formValues\n            ? Object.entries(formValues).reduce(\n                (previous, [key, value]) => ({\n                  ...previous,\n                  [key]: value !== get(_defaultValues, key),\n                }),\n                {},\n              )\n            : {}) as FieldNamesMarkedBoolean<TFieldValues>),\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n    _stateFlags.watch = !!props.shouldUnregister;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) => {\n    const field = get(_fields, name)._f;\n    (field.ref.focus ? field.ref : field.refs[0]).focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback: (formState) => {\n      if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...formState,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  React.useEffect(\n    () => () =>\n      Object.values(control._subjects).forEach((subject) =>\n        subject.unsubscribe(),\n      ),\n    [control],\n  );\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}