{"version":3,"sources":["views/apps/ecommerce/wishlist/index.js","@core/components/breadcrumbs/index.js"],"names":["Wishlist","dispatch","useDispatch","store","useSelector","state","ecommerce","useEffect","getWishlistItems","_jsxs","Fragment","children","_jsx","BreadCrumbs","title","data","wishlist","length","className","map","item","CartBtnTag","isInCart","Link","Card","to","concat","slug","src","image","alt","name","CardBody","Array","fill","listItem","index","Star","classnames","rating","price","CardText","description","Button","color","onClick","deleteWishlistItem","id","X","size","tag","handleCartBtn","addToCart","getCartItems","ShoppingCart","Alert","Info","props","Breadcrumb","BreadcrumbItem","Wrapper","link","isLastItem","active"],"mappings":"qJAAA,kIAgIeA,UA3GEA,KAEf,MAAMC,EAAWC,cACXC,EAAQC,aAAYC,GAASA,EAAMC,YAGzCC,qBAAU,KACRN,EAASO,cAAmB,GAC3B,IAkFH,OACEC,eAACC,WAAQ,CAAAC,SAAA,CACPC,cAACC,IAAW,CAACC,MAAM,WAAWC,KAAM,CAAC,CAAED,MAAO,aAAe,CAAEA,MAAO,eACrEX,EAAMa,SAASC,OACdL,cAAA,WAASM,UAAU,2BAA0BP,SAzE1CR,EAAMa,SAASG,KAAIC,IACxB,MAAMC,EAAaD,EAAKE,SAAWC,IAAO,SAC1C,OACEd,eAACe,IAAI,CAACN,UAAU,iBAAgBP,SAAA,CAC9BC,cAAA,OAAKM,UAAU,+BAA8BP,SAC3CC,cAACW,IAAI,CAACE,GAAE,kCAAAC,OAAoCN,EAAKO,MAAOhB,SACtDC,cAAA,OAAKM,UAAU,YAAYU,IAAKR,EAAKS,MAAOC,IAAKV,EAAKW,WAG1DtB,eAACuB,IAAQ,CAAArB,SAAA,CACPF,eAAA,OAAKS,UAAU,eAAcP,SAAA,CAC3BC,cAAA,OAAKM,UAAU,cAAaP,SAC1BC,cAAA,MAAIM,UAAU,4BAA2BP,SACtC,IAAIsB,MAAM,GAAGC,OAAOf,KAAI,CAACgB,EAAUC,IAEhCxB,cAAA,MAAgBM,UAAU,0BAAyBP,SACjDC,cAACyB,IAAI,CACHnB,UAAWoB,IAAW,CACpB,cAAeF,EAAQ,GAAKhB,EAAKmB,OACjC,gBAAiBH,EAAQ,EAAIhB,EAAKmB,YAJ/BH,SAYjBxB,cAAA,OAAKM,UAAU,YAAWP,SACxBF,eAAA,MAAIS,UAAU,aAAYP,SAAA,CAAC,KAAGS,EAAKoB,cAGvC5B,cAAA,OAAKM,UAAU,YAAWP,SACxBC,cAACW,IAAI,CAACE,GAAE,kCAAAC,OAAoCN,EAAKO,MAAOhB,SAAES,EAAKW,SAEjEnB,cAAC6B,IAAQ,CAACvB,UAAU,mBAAkBP,SAAES,EAAKsB,iBAE/CjC,eAAA,OAAKS,UAAU,2BAA0BP,SAAA,CACvCF,eAACkC,IAAM,CACLzB,UAAU,+BACV0B,MAAM,QACNC,QAASA,KACP5C,EAAS6C,YAAmB1B,EAAK2B,IAAI,EACrCpC,SAAA,CAEFC,cAACoC,IAAC,CAAC9B,UAAU,QAAQ+B,KAAM,KAC3BrC,cAAA,QAAAD,SAAM,cAERF,eAACkC,IAAM,CACLC,MAAM,UACNM,IAAK7B,EACLH,UAAU,qBACV2B,QAASA,KAAMM,OA7DJJ,EA6DkB3B,EAAK2B,IA5DhC,IA4DoC3B,EAAKE,UA3DnDrB,EAASmD,YAAUL,IAErB9C,EAASO,oBACTP,EAASoD,eALWF,IAACJ,CA8DQ,KACd3B,EAAKE,SACN,CACEG,GAAI,4BAEN,CAAC,EAACd,SAAA,CAGNC,cAAC0C,IAAY,CAACpC,UAAU,QAAQ+B,KAAM,KACtCrC,cAAA,QAAAD,SAAOS,EAAKE,SAAW,eAAiB,wBA1DRF,EAAKW,KA6DpC,MAWPnB,cAAC2C,IAAK,CAACX,MAAM,OAAMjC,SACjBF,eAAA,OAAKS,UAAU,aAAYP,SAAA,CACzBC,cAAC4C,IAAI,CAACP,KAAM,KACZrC,cAAA,QAAMM,UAAU,qBAAoBP,SAAC,kCAIlC,C,mCC5Hf,mDAiEeE,IA/CM4C,IAEnB,MAAM,KAAE1C,EAAI,MAAED,GAAU2C,EAqBxB,OACE7C,cAAA,OAAKM,UAAU,qBAAoBP,SACjCC,cAAA,OAAKM,UAAU,iDAAgDP,SAC7DC,cAAA,OAAKM,UAAU,sBAAqBP,SAClCF,eAAA,OAAKS,UAAU,SAAQP,SAAA,CACpBG,EACCF,cAAA,MAAIM,UAAU,wCAAuCP,SAAEG,IAEvD,GAEFF,cAAA,OAAKM,UAAU,6DAA4DP,SACzEF,eAACiD,IAAU,CAAA/C,SAAA,CACTC,cAAC+C,IAAc,CAACT,IAAI,KAAIvC,SACtBC,cAACW,IAAI,CAACE,GAAG,IAAGd,SAAC,gBA/BpBI,EAAKI,KAAI,CAACC,EAAMgB,KACrB,MAAMwB,EAAUxC,EAAKyC,KAAOtC,IAAOb,WAC7BoD,EAAa/C,EAAKE,OAAS,IAAMmB,EACvC,OACExB,cAAC+C,IAAc,CACbT,IAAI,KAEJa,QAASD,EACT5C,UAAWoB,IAAW,CAAE,gBAAiBwB,IAAcnD,SAEvDC,cAACgD,EAAO,IAAMxC,EAAKyC,KAAO,CAAEpC,GAAIL,EAAKyC,MAAS,CAAC,EAAClD,SAC7CS,EAAKN,SALHsB,EAOU,iBA0Bf,C","file":"static/js/120.1315a23e.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\nimport { Fragment, useEffect } from 'react'\n\n// ** Custom Components\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Star, X, ShoppingCart, Info } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardBody, CardText, Button, Alert } from 'reactstrap'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getWishlistItems, deleteWishlistItem, addToCart, getCartItems } from '../store'\n\n// ** Styles\nimport '@styles/base/pages/app-ecommerce.scss'\n\nconst Wishlist = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.ecommerce)\n\n  //** ComponentDidMount : get wishlist items\n  useEffect(() => {\n    dispatch(getWishlistItems())\n  }, [])\n\n  // ** Handle Move/Add to cart\n  const handleCartBtn = (id, val) => {\n    if (val === false) {\n      dispatch(addToCart(id))\n    }\n    dispatch(getWishlistItems())\n    dispatch(getCartItems())\n  }\n\n  // ** Renders wishlist products\n  const renderWishlist = () => {\n    return store.wishlist.map(item => {\n      const CartBtnTag = item.isInCart ? Link : 'button'\n      return (\n        <Card className='ecommerce-card' key={item.name}>\n          <div className='item-img text-center mx-auto'>\n            <Link to={`/apps/ecommerce/product-detail/${item.slug}`}>\n              <img className='img-fluid' src={item.image} alt={item.name} />\n            </Link>\n          </div>\n          <CardBody>\n            <div className='item-wrapper'>\n              <div className='item-rating'>\n                <ul className='unstyled-list list-inline'>\n                  {new Array(5).fill().map((listItem, index) => {\n                    return (\n                      <li key={index} className='ratings-list-item me-25'>\n                        <Star\n                          className={classnames({\n                            'filled-star': index + 1 <= item.rating,\n                            'unfilled-star': index + 1 > item.rating\n                          })}\n                        />\n                      </li>\n                    )\n                  })}\n                </ul>\n              </div>\n              <div className='item-cost'>\n                <h6 className='item-price'>$ {item.price}</h6>\n              </div>\n            </div>\n            <div className='item-name'>\n              <Link to={`/apps/ecommerce/product-detail/${item.slug}`}>{item.name}</Link>\n            </div>\n            <CardText className='item-description'>{item.description}</CardText>\n          </CardBody>\n          <div className='item-options text-center'>\n            <Button\n              className='btn-wishlist remove-wishlist'\n              color='light'\n              onClick={() => {\n                dispatch(deleteWishlistItem(item.id))\n              }}\n            >\n              <X className='me-25' size={14} />\n              <span>Remove</span>\n            </Button>\n            <Button\n              color='primary'\n              tag={CartBtnTag}\n              className='btn-cart move-cart'\n              onClick={() => handleCartBtn(item.id, item.isInCart)}\n              /*eslint-disable */\n              {...(item.isInCart\n                ? {\n                    to: '/apps/ecommerce/checkout'\n                  }\n                : {})}\n              /*eslint-enable */\n            >\n              <ShoppingCart className='me-50' size={14} />\n              <span>{item.isInCart ? 'View In Cart' : 'Add To Cart'}</span>\n            </Button>\n          </div>\n        </Card>\n      )\n    })\n  }\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Wishlist' data={[{ title: 'eCommerce' }, { title: 'Wishlist' }]} />\n      {store.wishlist.length ? (\n        <section className='grid-view wishlist-items'>{renderWishlist()}</section>\n      ) : (\n        <Alert color='info'>\n          <div className='alert-body'>\n            <Info size={14} />\n            <span className='align-middle ms-50'>Your Wishlist is empty</span>\n          </div>\n        </Alert>\n      )}\n    </Fragment>\n  )\n}\n\nexport default Wishlist\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n"],"sourceRoot":""}