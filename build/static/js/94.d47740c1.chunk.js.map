{"version":3,"sources":["views/rules/destinations/update/index.jsx","@core/components/breadcrumbs/index.js","assets/loadings/button_loading.svg","components/button/index.js","hooks/use_http.js","utility/schemas/index.js","hooks/use_destionations.js"],"names":["DestinationsUpdate","navigate","useNavigate","searchParams","useSearchParams","updateDestinationController","loadings","useDestinations","PrefixesValue","setPrefixesValue","useState","useEffect","entity_id","get","toast","success","concat","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","Prefixes","type","style","right","borderRadius","border","background","width","height","fontSize","color","cursor","onClick","length","error","array","push","setFieldValue","display","map","item","index","marginLeft","filter","intem","i","IoMdClose","CardFooter","CustomButton","loading","updateDestination","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","Wrapper","link","isLastItem","active","classnames","_ref","Button","disabled","src","loadingAnimation","alt","useHttp","httpService","axios","create","baseURL","process","headers","Accept","interceptors","response","use","async","message","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","createRatingProfileSchema","LoadId","Category","Subject","setLoadings","getDestinations","createDestination","deleteDestination","paginates","setPaginates","current","total","createDestinationController","useFormik","initialValues","validationSchema","post","method","params","status","err"],"mappings":"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","file":"static/js/94.d47740c1.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport useDestinations from \"../../../../hooks/use_destionations\";\nimport { IoMdClose } from \"react-icons/io\";\n\nconst DestinationsUpdate = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { updateDestinationController, loadings } = useDestinations();\n\n  const [PrefixesValue, setPrefixesValue] = useState(\"\");\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      toast.success(`You are in update mode for ${entity_id}`);\n    } else {\n      navigate(\"/rules/destinations\");\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Destination\"\n        data={[{ title: \"Update Destination\" }]}\n      />\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          window.scroll({ top: 0, behavior: \"smooth\" });\n          updateDestinationController.handleSubmit();\n        }}\n        className=\"d-flex flex-column align-items-center\"\n      >\n        <Card className=\"w-100\">\n          {/* card header */}\n          <CardHeader className=\"border-bottom\">\n            <CardTitle>Update Destination Form</CardTitle>\n          </CardHeader>\n          {/* card body */}\n          <CardBody className=\"pt-2\">\n            {/* form fields */}\n            <Row>\n              {/* TPid */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"TPid\">\n                  TPid\n                </Label>\n                <Input\n                  id=\"TPid\"\n                  name=\"TPid\"\n                  value={updateDestinationController.values.TPid}\n                  onChange={updateDestinationController.handleChange}\n                  invalid={\n                    updateDestinationController.touched.TPid &&\n                    updateDestinationController.errors.TPid\n                  }\n                />\n                {updateDestinationController.touched.TPid &&\n                updateDestinationController.errors.TPid ? (\n                  <FormFeedback>\n                    {updateDestinationController.errors.TPid}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* ID */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"ID\">\n                  ID\n                </Label>\n                <Input\n                  id=\"ID\"\n                  name=\"ID\"\n                  value={updateDestinationController.values.ID}\n                  onChange={updateDestinationController.handleChange}\n                  invalid={\n                    updateDestinationController.touched.ID &&\n                    updateDestinationController.errors.ID\n                  }\n                />\n                {updateDestinationController.touched.ID &&\n                updateDestinationController.errors.ID ? (\n                  <FormFeedback>\n                    {updateDestinationController.errors.ID}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* Prefixes */}\n              <Col xs=\"12\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"Prefixes\">\n                  Prefixes\n                </Label>\n                <div className=\"position-relative d-flex align-items-center\">\n                  <Input\n                    id=\"Prefixes\"\n                    name=\"Prefixes\"\n                    value={PrefixesValue}\n                    onChange={(e) => setPrefixesValue(e.target.value)}\n                    invalid={\n                      updateDestinationController.touched.Prefixes &&\n                      updateDestinationController.errors.Prefixes\n                    }\n                  />\n                  <button\n                    type=\"button\"\n                    style={{\n                      right: 35,\n                      borderRadius: \"50%\",\n                      border: \"none\",\n                      background: \"transparent\",\n                      width: 30,\n                      height: 30,\n                      border: \"1px solid rgba(200,200,200,.5)\",\n                      fontSize: 18,\n                      color: \"#73bcf0\",\n                      cursor: \"pointer\",\n                    }}\n                    className=\"position-absolute\"\n                    onClick={() => {\n                      if (PrefixesValue.length === 0) {\n                        toast.error(\"Enter Filter ID value.\");\n                      } else {\n                        let array = [\n                          ...updateDestinationController.values.Prefixes,\n                        ];\n                        array.push(PrefixesValue);\n                        updateDestinationController.setFieldValue(\n                          \"Prefixes\",\n                          array\n                        );\n                        setPrefixesValue(\"\");\n                      }\n                    }}\n                  >\n                    +\n                  </button>\n                </div>\n                {updateDestinationController.touched.Prefixes &&\n                updateDestinationController.errors.Prefixes ? (\n                  <FormFeedback style={{ display: \"block\" }}>\n                    {updateDestinationController.errors.Prefixes}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {updateDestinationController.values.Prefixes.map(\n                (item, index) => (\n                  <Col xs=\"12\" className=\"mb-1 d-flex align-items-center\">\n                    <span>{index + 1} -</span>\n                    <span>{item}</span>\n                    <button\n                      type=\"button\"\n                      style={{\n                        background: \"transparent\",\n                        border: \"none\",\n                        marginLeft: \"auto\",\n                      }}\n                      onClick={() => {\n                        let array = [\n                          ...updateDestinationController.values.Prefixes,\n                        ];\n                        array = array.filter((intem, i) => i !== index);\n                        updateDestinationController.setFieldValue(\n                          \"Prefixes\",\n                          array\n                        );\n                      }}\n                    >\n                      <IoMdClose style={{ fontSize: 14, color: \"red\" }} />\n                    </button>\n                  </Col>\n                )\n              )}\n            </Row>\n          </CardBody>\n          {/* card footer */}\n          <CardFooter className=\"border-top d-flex justify-content-center\">\n            {/* submit button */}\n            <CustomButton\n              loading={loadings.updateDestination}\n              type=\"submit\"\n              color=\"primary\"\n              style={{ minWidth: 150 }}\n            >\n              Submit\n            </CustomButton>\n          </CardFooter>\n        </Card>\n      </Form>\n    </Fragment>\n  );\n};\nexport default DestinationsUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","export default __webpack_public_path__ + \"static/media/button_loading.bbd49f26.svg\";","import { Button } from \"reactstrap\";\nimport loadingAnimation from \"../../assets/loadings/button_loading.svg\";\n\nconst CustomButton = ({ loading, children, ...props }) => {\n  return (\n    <Button disabled={loading} {...props}>\n      {!loading ? children : null}\n      {loading ? <img width={14} src={loadingAnimation} alt=\"loading\" /> : null}\n    </Button>\n  );\n};\nexport default CustomButton;\n","import axios from \"axios\";\nimport { message } from \"antd\";\n\nconst useHttp = () => {\n  const httpService = axios.create({\n    baseURL: process.env.REACT_APP_BASE_URL,\n    headers: {\n      Accept: \"application/json\",\n    },\n  });\n\n  httpService.interceptors.response.use(\n    (response) => response,\n    async ({ error, response }) => {\n      message.error(\"Server Error!\");\n    }\n  );\n\n  const exports = { httpService };\n\n  return exports;\n};\n\nexport default useHttp;\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\n// export const registerSchema = yup.object({\n//   first_name: yup.string().required(\"The first name field is required.\"),\n//   last_name: yup.string().required(\"The last name field is required.\"),\n//   email: yup\n//     .string()\n//     .required(\"The email field is required.\")\n//     .email(\"The entered email structure is incorrect.\"),\n//   password: yup.string().required(\"The password field is required.\"),\n//   password_confirmation: yup\n//     .string()\n//     .required(\"The repeat password field is required.\"),\n//   privacy: yup.bool().required(\"\"),\n// });\n","import { useState } from \"react\";\nimport { createDestinationSchema } from \"../utility/schemas/index\";\nimport { useFormik } from \"formik\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"./use_http\";\n\nconst useDestinations = () => {\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n  const [loadings, setLoadings] = useState({\n    getDestinations: false,\n    createDestination: false,\n    updateDestination: false,\n    deleteDestination: false,\n  });\n\n  const [paginates, setPaginates] = useState({\n    current: 1,\n    total: 1,\n  });\n\n  const createDestinationController = useFormik({\n    initialValues: {\n      TPid: \"\",\n      ID: \"\",\n      Prefixes: [],\n    },\n    validationSchema: createDestinationSchema,\n    onSubmit: (values) => {\n      createDestination(values);\n    },\n  });\n\n  const createDestination = async (values) => {\n    try {\n      setLoadings({ ...loadings, createDestination: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestination\",\n        params: [\n          {\n            TPid: values.TPid,\n            ID: values.ID,\n            Prefixes: values.Prefixes,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createDestination: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/destinations\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createDestination: false });\n    }\n  };\n\n  const updateDestinationController = useFormik({\n    initialValues: {\n      TPid: \"\",\n      ID: \"\",\n      Prefixes: [],\n    },\n    validationSchema: createDestinationSchema,\n    onSubmit: (values) => {\n      updateDestination(values);\n    },\n  });\n\n  const updateDestination = async (values) => {\n    try {\n      setLoadings({ ...loadings, updateDestination: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestination\",\n        params: [\n          {\n            TPid: values.TPid,\n            ID: values.ID,\n            Prefixes: values.Prefixes,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateDestination: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/destinations\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateDestination: false });\n    }\n  };\n\n  const exports = {\n    createDestinationController,\n    updateDestinationController,\n    loadings,\n    paginates,\n    setPaginates,\n  };\n  return exports;\n};\nexport default useDestinations;\n"],"sourceRoot":""}