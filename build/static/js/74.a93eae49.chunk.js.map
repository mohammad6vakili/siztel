{"version":3,"sources":["views/rules/shared_groups/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","hooks/use_shared_groups.js","views/rules/shared_groups/root/components/slot_action.jsx","views/rules/shared_groups/root/datatable/slots_columns.js"],"names":["SharedGroupsUpdate","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","searchParams","useSearchParams","getEntityById","updateSharedGroupController","loadings","useSharedGroups","slotFormData","setSlotFormData","useState","Account","Strategy","RatingSubject","getAllTpIdsLoading","useSelector","state","app","selectedTpId","slots","sharedGroups","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","ProgressLoading","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","CustomButton","onClick","handleAddSlot","array","length","toast","error","push","Math","random","setSlots","outline","color","type","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","updateSharedGroup","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","httpService","useHttp","setLoadings","getSharedGroups","createSharedGroup","deleteEntity","listData","setListData","async","_response$data","_response$data$result","response","post","method","params","result","err","createSharedGroupController","useFormik","initialValues","SharedGroups","validationSchema","enableReinitialize","newSlots","obj","rest","status","success","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","setFieldValue","setDeleteModal","SlotAction","_ref","Button","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/74.a93eae49.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/shared_groups_slice\";\nimport useSharedGroups from \"../../../../hooks/use_shared_groups\";\n\nconst SharedGroupsUpdate = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  const { getEntityById, updateSharedGroupController, loadings } =\n    useSharedGroups();\n\n  const [slotFormData, setSlotFormData] = useState({\n    Account: \"\",\n    Strategy: \"\",\n    RatingSubject: \"\",\n  });\n\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n  const slots = useSelector((state) => state.sharedGroups.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.Account.length === 0) {\n      toast.error(\"Please enter Account.\");\n    } else if (slotFormData.Strategy.length === 0) {\n      toast.error(\"Please enter Strategy.\");\n    } else if (slotFormData.RatingSubject.length === 0) {\n      toast.error(\"Please enter RatingSubject.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        Account: \"\",\n        Strategy: \"\",\n        RatingSubject: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getEntityById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/shared_groups\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Shared Group\"\n        data={[{ title: \"Update Shared Group\" }]}\n      />\n      {loadings.getEntityById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getEntityById ? (\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            window.scroll({ top: 0, behavior: \"smooth\" });\n            updateSharedGroupController.handleSubmit();\n          }}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Shared Group Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row className=\"border-bottom mb-1\">\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateSharedGroupController.values.TPid}\n                    onChange={updateSharedGroupController.handleChange}\n                    invalid={\n                      updateSharedGroupController.touched.TPid &&\n                      updateSharedGroupController.errors.TPid\n                    }\n                  />\n                  {updateSharedGroupController.touched.TPid &&\n                  updateSharedGroupController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateSharedGroupController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* ID */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ID\">\n                    ID\n                  </Label>\n                  <Input\n                    id=\"ID\"\n                    name=\"ID\"\n                    disabled\n                    value={updateSharedGroupController.values.ID}\n                    onChange={updateSharedGroupController.handleChange}\n                    invalid={\n                      updateSharedGroupController.touched.ID &&\n                      updateSharedGroupController.errors.ID\n                    }\n                  />\n                  {updateSharedGroupController.touched.ID &&\n                  updateSharedGroupController.errors.ID ? (\n                    <FormFeedback>\n                      {updateSharedGroupController.errors.ID}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n              </Row>\n              {/* SharedGroups */}\n              <Row>\n                <Col xs=\"12\">\n                  <CardTitle>Shared Groups</CardTitle>\n                </Col>\n                {/* Account */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Account\">\n                    Account\n                  </Label>\n                  <Input\n                    value={slotFormData.Account}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Account: e.target.value,\n                      })\n                    }\n                    id=\"Account\"\n                    name=\"Account\"\n                  />\n                </Col>\n                {/* Strategy */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Strategy\">\n                    Strategy\n                  </Label>\n                  <Input\n                    id=\"Strategy\"\n                    name=\"Strategy\"\n                    value={slotFormData.Strategy}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Strategy: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* RatingSubject */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"RatingSubject\">\n                    RatingSubject\n                  </Label>\n                  <Input\n                    id=\"RatingSubject\"\n                    name=\"RatingSubject\"\n                    value={slotFormData.RatingSubject}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        RatingSubject: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* add button */}\n                <Col\n                  xs=\"12\"\n                  sm=\"6\"\n                  md=\"3\"\n                  className=\"mb-1 d-flex align-items-end\"\n                >\n                  <CustomButton\n                    onClick={handleAddSlot}\n                    outline\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Add\n                  </CustomButton>\n                </Col>\n                {/* datatable */}\n                <Col xs=\"12\">\n                  <DataTable\n                    noDataComponent={\n                      <div style={{ margin: \"24px 0\" }}>\n                        No Shared Group Added Yet.\n                      </div>\n                    }\n                    noHeader\n                    columns={slots_columns}\n                    className=\"react-dataTable\"\n                    style={{ background: \"red\" }}\n                    sortIcon={<ChevronDown size={10} />}\n                    data={slots}\n                    theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                  />\n                </Col>\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.updateSharedGroup}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default SharedGroupsUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { setSlots, setDeleteModal } from \"../redux/shared_groups_slice\";\n\nconst useSharedGroups = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getSharedGroups: false,\n    getEntityById: false,\n    createSharedGroup: false,\n    updateSharedGroup: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getSharedGroups = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getSharedGroups: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPSharedGroupIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getSharedGroups: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getSharedGroups: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/shared_groups\");\n      } else {\n        updateSharedGroupController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        dispatch(setSlots(response?.data?.result?.SharedGroups));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createSharedGroupController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      SharedGroups: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one shared group.\");\n      } else {\n        createSharedGroup(values, slots);\n      }\n    },\n  });\n\n  const createSharedGroup = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createSharedGroup: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            SharedGroups: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createSharedGroup: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/shared_groups\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createSharedGroup: false });\n    }\n  };\n\n  const updateSharedGroupController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      SharedGroups: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one shared group.\");\n      } else {\n        updateSharedGroup(values, slots);\n      }\n    },\n  });\n\n  const updateSharedGroup = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateSharedGroup: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            SharedGroups: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateSharedGroup: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/shared_groups\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateSharedGroup: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPSharedGroups\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getSharedGroups();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getSharedGroups,\n    getEntityById,\n    createSharedGroupController,\n    updateSharedGroupController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useSharedGroups;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/shared_groups_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.sharedGroups.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"Account\",\n    minWidth: \"100px\",\n    selector: (row) => row.Account,\n  },\n  {\n    name: \"Strategy\",\n    minWidth: \"100px\",\n    selector: (row) => row.Strategy,\n  },\n  {\n    name: \"RatingSubject\",\n    minWidth: \"100px\",\n    selector: (row) => row.RatingSubject,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}