{"version":3,"sources":["views/apps/chat/Chat.js","views/apps/chat/SidebarLeft.js","views/apps/chat/UserProfileSidebar.js","views/apps/chat/index.js","@core/components/avatar/index.js"],"names":["ChatLog","props","handleUser","handleUserSidebarRight","handleSidebar","store","userSidebarLeft","userProfile","selectedUser","chatArea","useRef","dispatch","useDispatch","msg","setMsg","useState","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","ChatWrapper","chat","PerfectScrollbar","_jsxs","className","children","classnames","_jsx","MessageSquare","onClick","handleStartConversation","window","innerWidth","Menu","size","Avatar","imgHeight","imgWidth","img","contact","avatar","status","handleAvatarClick","obj","fullName","PhoneCall","Video","Search","UncontrolledDropdown","DropdownToggle","color","MoreVertical","DropdownMenu","end","DropdownItem","href","e","preventDefault","ref","options","wheelPropagation","formattedChatData","chatLog","formattedChatLog","chatMessageSenderId","senderId","undefined","msgGroup","messages","forEach","index","push","message","time","map","item","Form","onSubmit","sendMsg","handleSendMsg","InputGroup","InputGroupText","Mic","Input","value","onChange","target","placeholder","Label","for","Image","type","id","hidden","Button","Send","SidebarLeft","sidebar","handleUserSidebarLeft","chats","contacts","query","setQuery","about","setAbout","active","setActive","setStatus","filteredChat","setFilteredChat","filteredContacts","setFilteredContacts","handleUserClick","selectChat","isObjEmpty","show","X","role","rows","defaultValue","label","checked","CheckSquare","name","defaultChecked","Bell","User","Trash","searchFilterFunction","toLowerCase","includes","filteredChatsArr","filter","filteredContactssArr","renderChats","formatDateToMonthShort","lastMessage","Date","CardText","unseenMsgs","Badge","pill","renderContacts","UserProfileSidebar","user","userSidebarRight","Mail","Clock","Tag","Star","Slash","AppChat","useSelector","state","setUser","setSidebar","setUserSidebarRight","setUserSidebarLeft","getChatContacts","getUserProfile","Fragment","Sidebar","handleOverlayClick","Chat","forwardRef","icon","badgeUp","content","tag","initials","badgeText","badgeColor","imgClassName","contentStyles","rest","concat","style","str","results","split","join","getInitials","src","alt","height","width","defaultProps"],"mappings":"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","file":"static/js/87.b9ccffd5.chunk.js","sourcesContent":["// ** React Imports\nimport ReactDOM from 'react-dom'\nimport { useState, useEffect, useRef } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { sendMsg } from './store'\nimport { useDispatch } from 'react-redux'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { MessageSquare, Menu, PhoneCall, Video, Search, MoreVertical, Mic, Image, Send } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Form,\n  Label,\n  Input,\n  Button,\n  InputGroup,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  InputGroupText,\n  UncontrolledDropdown\n} from 'reactstrap'\n\nconst ChatLog = props => {\n  // ** Props & Store\n  const { handleUser, handleUserSidebarRight, handleSidebar, store, userSidebarLeft } = props\n  const { userProfile, selectedUser } = store\n\n  // ** Refs & Dispatch\n  const chatArea = useRef(null)\n  const dispatch = useDispatch()\n\n  // ** State\n  const [msg, setMsg] = useState('')\n\n  // ** Scroll to chat bottom\n  const scrollToBottom = () => {\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\n  }\n\n  // ** If user chat is not empty scrollToBottom\n  useEffect(() => {\n    const selectedUserLen = Object.keys(selectedUser).length\n\n    if (selectedUserLen) {\n      scrollToBottom()\n    }\n  }, [selectedUser])\n\n  // ** Formats chat data based on sender\n  const formattedChatData = () => {\n    let chatLog = []\n    if (selectedUser.chat) {\n      chatLog = selectedUser.chat.chat\n    }\n\n    const formattedChatLog = []\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\n    let msgGroup = {\n      senderId: chatMessageSenderId,\n      messages: []\n    }\n    chatLog.forEach((msg, index) => {\n      if (chatMessageSenderId === msg.senderId) {\n        msgGroup.messages.push({\n          msg: msg.message,\n          time: msg.time\n        })\n      } else {\n        chatMessageSenderId = msg.senderId\n        formattedChatLog.push(msgGroup)\n        msgGroup = {\n          senderId: msg.senderId,\n          messages: [\n            {\n              msg: msg.message,\n              time: msg.time\n            }\n          ]\n        }\n      }\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\n    })\n    return formattedChatLog\n  }\n\n  // ** Renders user chat\n  const renderChats = () => {\n    return formattedChatData().map((item, index) => {\n      return (\n        <div\n          key={index}\n          className={classnames('chat', {\n            'chat-left': item.senderId !== 11\n          })}\n        >\n          <div className='chat-avatar'>\n            <Avatar\n              imgWidth={36}\n              imgHeight={36}\n              className='box-shadow-1 cursor-pointer'\n              img={item.senderId === 11 ? userProfile.avatar : selectedUser.contact.avatar}\n            />\n          </div>\n\n          <div className='chat-body'>\n            {item.messages.map(chat => (\n              <div key={chat.msg} className='chat-content'>\n                <p>{chat.msg}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    })\n  }\n\n  // ** Opens right sidebar & handles its data\n  const handleAvatarClick = obj => {\n    handleUserSidebarRight()\n    handleUser(obj)\n  }\n\n  // ** On mobile screen open left sidebar on Start Conversation Click\n  const handleStartConversation = () => {\n    if (!Object.keys(selectedUser).length && !userSidebarLeft && window.innerWidth < 992) {\n      handleSidebar()\n    }\n  }\n\n  // ** Sends New Msg\n  const handleSendMsg = e => {\n    e.preventDefault()\n    if (msg.length) {\n      dispatch(sendMsg({ ...selectedUser, message: msg }))\n      setMsg('')\n    }\n  }\n\n  // ** ChatWrapper tag based on chat's length\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\n\n  return (\n    <div className='chat-app-window'>\n      <div className={classnames('start-chat-area', { 'd-none': Object.keys(selectedUser).length })}>\n        <div className='start-chat-icon mb-1'>\n          <MessageSquare />\n        </div>\n        <h4 className='sidebar-toggle start-chat-text' onClick={handleStartConversation}>\n          Start Conversation\n        </h4>\n      </div>\n      {Object.keys(selectedUser).length ? (\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\n          <div className='chat-navbar'>\n            <header className='chat-header'>\n              <div className='d-flex align-items-center'>\n                <div className='sidebar-toggle d-block d-lg-none me-1' onClick={handleSidebar}>\n                  <Menu size={21} />\n                </div>\n                <Avatar\n                  imgHeight='36'\n                  imgWidth='36'\n                  img={selectedUser.contact.avatar}\n                  status={selectedUser.contact.status}\n                  className='avatar-border user-profile-toggle m-0 me-1'\n                  onClick={() => handleAvatarClick(selectedUser.contact)}\n                />\n                <h6 className='mb-0'>{selectedUser.contact.fullName}</h6>\n              </div>\n              <div className='d-flex align-items-center'>\n                <PhoneCall size={18} className='cursor-pointer d-sm-block d-none me-1' />\n                <Video size={18} className='cursor-pointer d-sm-block d-none me-1' />\n                <Search size={18} className='cursor-pointer d-sm-block d-none' />\n                <UncontrolledDropdown className='more-options-dropdown'>\n                  <DropdownToggle className='btn-icon' color='transparent' size='sm'>\n                    <MoreVertical size='18' />\n                  </DropdownToggle>\n                  <DropdownMenu end>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      View Contact\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Mute Notifications\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Block Contact\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Clear Chat\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Report\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div>\n            </header>\n          </div>\n\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> : null}\n          </ChatWrapper>\n\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\n            <InputGroup className='input-group-merge me-1 form-send-message'>\n              <InputGroupText>\n                <Mic className='cursor-pointer' size={14} />\n              </InputGroupText>\n              <Input\n                value={msg}\n                onChange={e => setMsg(e.target.value)}\n                placeholder='Type your message or use speech to text'\n              />\n              <InputGroupText>\n                <Label className='attachment-icon mb-0' for='attach-doc'>\n                  <Image className='cursor-pointer text-secondary' size={14} />\n                  <input type='file' id='attach-doc' hidden />\n                </Label>\n              </InputGroupText>\n            </InputGroup>\n            <Button className='send' color='primary'>\n              <Send size={14} className='d-lg-none' />\n              <span className='d-none d-lg-block'>Send</span>\n            </Button>\n          </Form>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default ChatLog\n","// ** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { selectChat } from './store'\nimport { useDispatch } from 'react-redux'\n\n// ** Utils\nimport { formatDateToMonthShort, isObjEmpty } from '@utils'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, Search, CheckSquare, Bell, User, Trash } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { CardText, InputGroup, InputGroupText, Badge, Input, Button, Label } from 'reactstrap'\n\nconst SidebarLeft = props => {\n  // ** Props & Store\n  const { store, sidebar, handleSidebar, userSidebarLeft, handleUserSidebarLeft } = props\n  const { chats, contacts, userProfile } = store\n\n  // ** Dispatch\n  const dispatch = useDispatch()\n\n  // ** State\n  const [query, setQuery] = useState('')\n  const [about, setAbout] = useState('')\n  const [active, setActive] = useState(0)\n  const [status, setStatus] = useState('online')\n  const [filteredChat, setFilteredChat] = useState([])\n  const [filteredContacts, setFilteredContacts] = useState([])\n\n  // ** Handles User Chat Click\n  const handleUserClick = id => {\n    dispatch(selectChat(id))\n    setActive(id)\n    if (sidebar === true) {\n      handleSidebar()\n    }\n  }\n\n  useEffect(() => {\n    if (!isObjEmpty(store.selectedUser)) {\n      if (store.selectedUser.chat) {\n        setActive(store.selectedUser.chat.id)\n      } else {\n        setActive(store.selectedUser.contact.id)\n      }\n    }\n  }, [])\n\n  // ** Renders Chat\n  const renderChats = () => {\n    if (chats && chats.length) {\n      if (query.length && !filteredChat.length) {\n        return (\n          <li className='no-results show'>\n            <h6 className='mb-0'>No Chats Found</h6>\n          </li>\n        )\n      } else {\n        const arrToMap = query.length && filteredChat.length ? filteredChat : chats\n\n        return arrToMap.map(item => {\n          const time = formatDateToMonthShort(item.chat.lastMessage ? item.chat.lastMessage.time : new Date())\n\n          return (\n            <li\n              key={item.id}\n              onClick={() => handleUserClick(item.id)}\n              className={classnames({\n                active: active === item.id\n              })}\n            >\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' status={item.status} />\n              <div className='chat-info flex-grow-1'>\n                <h5 className='mb-0'>{item.fullName}</h5>\n                <CardText className='text-truncate'>\n                  {item.chat.lastMessage ? item.chat.lastMessage.message : chats[chats.length - 1].message}\n                </CardText>\n              </div>\n              <div className='chat-meta text-nowrap'>\n                <small className='float-end mb-25 chat-time ms-25'>{time}</small>\n                {item.chat.unseenMsgs >= 1 ? (\n                  <Badge className='float-end' color='danger' pill>\n                    {item.chat.unseenMsgs}\n                  </Badge>\n                ) : null}\n              </div>\n            </li>\n          )\n        })\n      }\n    } else {\n      return null\n    }\n  }\n\n  // ** Renders Contact\n  const renderContacts = () => {\n    if (contacts && contacts.length) {\n      if (query.length && !filteredContacts.length) {\n        return (\n          <li className='no-results show'>\n            <h6 className='mb-0'>No Chats Found</h6>\n          </li>\n        )\n      } else {\n        const arrToMap = query.length && filteredContacts.length ? filteredContacts : contacts\n        return arrToMap.map(item => {\n          return (\n            <li key={item.fullName} onClick={() => handleUserClick(item.id)}>\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' />\n              <div className='chat-info flex-grow-1'>\n                <h5 className='mb-0'>{item.fullName}</h5>\n                <CardText className='text-truncate'>{item.about}</CardText>\n              </div>\n            </li>\n          )\n        })\n      }\n    } else {\n      return null\n    }\n  }\n\n  // ** Handles Filter\n  const handleFilter = e => {\n    setQuery(e.target.value)\n    const searchFilterFunction = contact => contact.fullName.toLowerCase().includes(e.target.value.toLowerCase())\n    const filteredChatsArr = chats.filter(searchFilterFunction)\n    const filteredContactssArr = contacts.filter(searchFilterFunction)\n    setFilteredChat([...filteredChatsArr])\n    setFilteredContacts([...filteredContactssArr])\n  }\n\n  const renderAboutCount = () => {\n    if (userProfile && userProfile.about && userProfile.about.length && about.length === 0) {\n      return userProfile.about.length\n    } else {\n      return about.length\n    }\n  }\n\n  return store ? (\n    <div className='sidebar-left'>\n      <div className='sidebar'>\n        <div\n          className={classnames('chat-profile-sidebar', {\n            show: userSidebarLeft\n          })}\n        >\n          <header className='chat-profile-header'>\n            <div className='close-icon' onClick={handleUserSidebarLeft}>\n              <X size={14} />\n            </div>\n            <div className='header-profile-sidebar'>\n              <Avatar className='box-shadow-1 avatar-border' img={userProfile.avatar} status={status} size='xl' />\n              <h4 className='chat-user-name'>{userProfile.fullName}</h4>\n              <span className='user-post'>{userProfile.role}</span>\n            </div>\n          </header>\n          <PerfectScrollbar className='profile-sidebar-area' options={{ wheelPropagation: false }}>\n            <h6 className='section-label mb-1'>About</h6>\n            <div className='about-user'>\n              <Input\n                rows='5'\n                type='textarea'\n                defaultValue={userProfile.about}\n                onChange={e => setAbout(e.target.value)}\n                className={classnames('char-textarea', {\n                  'text-danger': about && about.length > 120\n                })}\n              />\n              <small className='counter-value float-end'>\n                <span className='char-count'>{renderAboutCount()}</span> / 120\n              </small>\n            </div>\n            <h6 className='section-label mb-1 mt-3'>Status</h6>\n            <ul className='list-unstyled user-status'>\n              <li className='pb-1'>\n                <div className='form-check form-check-success'>\n                  <Input\n                    type='radio'\n                    label='Online'\n                    id='user-online'\n                    checked={status === 'online'}\n                    onChange={() => setStatus('online')}\n                  />\n                  <Label className='form-check-label' for='user-online'>\n                    Online\n                  </Label>\n                </div>\n              </li>\n              <li className='pb-1'>\n                <div className='form-check form-check-danger'>\n                  <Input\n                    type='radio'\n                    id='user-busy'\n                    label='Do Not Disturb'\n                    checked={status === 'busy'}\n                    onChange={() => setStatus('busy')}\n                  />\n                  <Label className='form-check-label' for='user-busy'>\n                    Busy\n                  </Label>\n                </div>\n              </li>\n              <li className='pb-1'>\n                <div className='form-check form-check-warning'>\n                  <Input\n                    type='radio'\n                    label='Away'\n                    id='user-away'\n                    checked={status === 'away'}\n                    onChange={() => setStatus('away')}\n                  />\n                  <Label className='form-check-label' for='user-away'>\n                    Away\n                  </Label>\n                </div>\n              </li>\n              <li className='pb-1'>\n                <div className='form-check form-check-secondary'>\n                  <Input\n                    type='radio'\n                    label='Offline'\n                    id='user-offline'\n                    checked={status === 'offline'}\n                    onChange={() => setStatus('offline')}\n                  />\n                  <Label className='form-check-label' for='user-offline'>\n                    Offline\n                  </Label>\n                </div>\n              </li>\n            </ul>\n            <h6 className='section-label mb-1 mt-2'>Settings</h6>\n            <ul className='list-unstyled'>\n              <li className='d-flex justify-content-between align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <CheckSquare className='me-75' size='18' />\n                  <span className='align-middle'>Two-step Verification</span>\n                </div>\n                <div className='form-switch'>\n                  <Input type='switch' id='verification' name='verification' defaultChecked />\n                </div>\n              </li>\n              <li className='d-flex justify-content-between align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <Bell className='me-75' size='18' />\n                  <span className='align-middle'>Notification</span>\n                </div>\n                <div className='form-switch'>\n                  <Input type='switch' id='notifications' name='notifications' />\n                </div>\n              </li>\n              <li className='d-flex align-items-center cursor-pointer mb-1'>\n                <User className='me-75' size='18' />\n                <span className='align-middle'>Invite Friends</span>\n              </li>\n              <li className='d-flex align-items-center cursor-pointer'>\n                <Trash className='me-75' size='18' />\n                <span className='align-middle'>Delete Account</span>\n              </li>\n            </ul>\n            <div className='mt-3'>\n              <Button color='primary'>Logout</Button>\n            </div>\n          </PerfectScrollbar>\n        </div>\n        <div\n          className={classnames('sidebar-content', {\n            show: sidebar === true\n          })}\n        >\n          <div className='sidebar-close-icon' onClick={handleSidebar}>\n            <X size={14} />\n          </div>\n          <div className='chat-fixed-search'>\n            <div className='d-flex align-items-center w-100'>\n              <div className='sidebar-profile-toggle' onClick={handleUserSidebarLeft}>\n                {Object.keys(userProfile).length ? (\n                  <Avatar\n                    className='avatar-border'\n                    img={userProfile.avatar}\n                    status={status}\n                    imgHeight='42'\n                    imgWidth='42'\n                  />\n                ) : null}\n              </div>\n              <InputGroup className='input-group-merge ms-1 w-100'>\n                <InputGroupText className='round'>\n                  <Search className='text-muted' size={14} />\n                </InputGroupText>\n                <Input\n                  value={query}\n                  className='round'\n                  placeholder='Search or start a new chat'\n                  onChange={handleFilter}\n                />\n              </InputGroup>\n            </div>\n          </div>\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\n            <h4 className='chat-list-title'>Chats</h4>\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\n            <h4 className='chat-list-title'>Contacts</h4>\n            <ul className='chat-users-list contact-list media-list'>{renderContacts()}</ul>\n          </PerfectScrollbar>\n        </div>\n      </div>\n    </div>\n  ) : null\n}\n\nexport default SidebarLeft\n","// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// ** Reactstrap Imports\nimport { X, Mail, PhoneCall, Clock, Tag, Star, Image, Trash, Slash } from 'react-feather'\n\nconst UserProfileSidebar = props => {\n  // ** Props\n  const { user, handleUserSidebarRight, userSidebarRight } = props\n\n  return (\n    <div className={classnames('user-profile-sidebar', { show: userSidebarRight === true })}>\n      <header className='user-profile-header'>\n        <span className='close-icon' onClick={handleUserSidebarRight}>\n          <X size={14} />\n        </span>\n        <div className='header-profile-sidebar'>\n          <Avatar\n            className='box-shadow-1 avatar-border'\n            size='xl'\n            status={user.status}\n            img={user.avatar}\n            imgHeight='70'\n            imgWidth='70'\n          />\n          <h4 className='chat-user-name'>{user.fullName}</h4>\n          <span className='user-post'>{user.role}</span>\n        </div>\n      </header>\n      <PerfectScrollbar className='user-profile-sidebar-area' options={{ wheelPropagation: false }}>\n        <h6 className='section-label mb-1'>About</h6>\n        <p>{user.about}</p>\n        <div className='personal-info'>\n          <h6 className='section-label mb-1 mt-3'>Personal Information</h6>\n          <ul className='list-unstyled'>\n            <li className='mb-1'>\n              <Mail className='me-75' size={17} />\n              <span className='align-middle'>lucifer@email.com</span>\n            </li>\n            <li className='mb-1'>\n              <PhoneCall className='me-50' size={17} />\n              <span className='align-middle'> +1(123) 456 - 7890</span>\n            </li>\n            <li>\n              <Clock className='me-50' size={17} />\n              <span className='align-middle'> Mon - Fri 10AM - 8PM</span>\n            </li>\n          </ul>\n        </div>\n        <div className='more-options'>\n          <h6 className='section-label mb-1 mt-3'>Options</h6>\n          <ul className='list-unstyled'>\n            <li className='cursor-pointer mb-1'>\n              <Tag className='me-50' size={17} />\n              <span className='align-middle'> Add Tag</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Star className='me-50' size={17} />\n              <span className='align-middle'> Important Contact</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Image className='me-50' size={17} />\n              <span className='align-middle'> Shared Media</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Trash className='me-50' size={17} />\n              <span className='align-middle'> Delete Contact</span>\n            </li>\n            <li className='cursor-pointer'>\n              <Slash className='me-75' size={17} />\n              <span className='align-middle'>Block Contact</span>\n            </li>\n          </ul>\n        </div>\n      </PerfectScrollbar>\n    </div>\n  )\n}\n\nexport default UserProfileSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Chat App Component Imports\nimport Chat from './Chat'\nimport Sidebar from './SidebarLeft'\nimport UserProfileSidebar from './UserProfileSidebar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserProfile, getChatContacts } from './store'\n\nimport '@styles/base/pages/app-chat.scss'\nimport '@styles/base/pages/app-chat-list.scss'\n\nconst AppChat = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.chat)\n\n  // ** States\n  const [user, setUser] = useState({})\n  const [sidebar, setSidebar] = useState(false)\n  const [userSidebarRight, setUserSidebarRight] = useState(false)\n  const [userSidebarLeft, setUserSidebarLeft] = useState(false)\n\n  // ** Sidebar & overlay toggle functions\n  const handleSidebar = () => setSidebar(!sidebar)\n  const handleUserSidebarLeft = () => setUserSidebarLeft(!userSidebarLeft)\n  const handleUserSidebarRight = () => setUserSidebarRight(!userSidebarRight)\n  const handleOverlayClick = () => {\n    setSidebar(false)\n    setUserSidebarRight(false)\n    setUserSidebarLeft(false)\n  }\n\n  // ** Set user function for Right Sidebar\n  const handleUser = obj => setUser(obj)\n\n  // ** Get data on Mount\n  useEffect(() => {\n    dispatch(getChatContacts())\n    dispatch(getUserProfile())\n  }, [dispatch])\n\n  return (\n    <Fragment>\n      <Sidebar\n        store={store}\n        sidebar={sidebar}\n        handleSidebar={handleSidebar}\n        userSidebarLeft={userSidebarLeft}\n        handleUserSidebarLeft={handleUserSidebarLeft}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div\n              className={classnames('body-content-overlay', {\n                show: userSidebarRight === true || sidebar === true || userSidebarLeft === true\n              })}\n              onClick={handleOverlayClick}\n            ></div>\n            <Chat\n              store={store}\n              handleUser={handleUser}\n              handleSidebar={handleSidebar}\n              userSidebarLeft={userSidebarLeft}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n            <UserProfileSidebar\n              user={user}\n              userSidebarRight={userSidebarRight}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default AppChat\n","// ** React Imports\nimport { forwardRef } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Badge } from 'reactstrap'\n\nconst Avatar = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    img,\n    size,\n    icon,\n    color,\n    status,\n    badgeUp,\n    content,\n    tag: Tag,\n    initials,\n    imgWidth,\n    className,\n    badgeText,\n    imgHeight,\n    badgeColor,\n    imgClassName,\n    contentStyles,\n    ...rest\n  } = props\n\n  // ** Function to extract initials from content\n  const getInitials = str => {\n    const results = []\n    const wordArray = str.split(' ')\n    wordArray.forEach(e => {\n      results.push(e[0])\n    })\n    return results.join('')\n  }\n\n  return (\n    <Tag\n      className={classnames('avatar', {\n        [className]: className,\n        [`bg-${color}`]: color,\n        [`avatar-${size}`]: size\n      })}\n      ref={ref}\n      {...rest}\n    >\n      {img === false || img === undefined ? (\n        <span\n          className={classnames('avatar-content', {\n            'position-relative': badgeUp\n          })}\n          style={contentStyles}\n        >\n          {initials ? getInitials(content) : content}\n\n          {icon ? icon : null}\n          {badgeUp ? (\n            <Badge color={badgeColor ? badgeColor : 'primary'} className='badge-sm badge-up' pill>\n              {badgeText ? badgeText : '0'}\n            </Badge>\n          ) : null}\n        </span>\n      ) : (\n        <img\n          className={classnames({\n            [imgClassName]: imgClassName\n          })}\n          src={img}\n          alt='avatarImg'\n          height={imgHeight && !size ? imgHeight : 32}\n          width={imgWidth && !size ? imgWidth : 32}\n        />\n      )}\n      {status ? (\n        <span\n          className={classnames({\n            [`avatar-status-${status}`]: status,\n            [`avatar-status-${size}`]: size\n          })}\n        ></span>\n      ) : null}\n    </Tag>\n  )\n})\n\nexport default Avatar\n\n// ** PropTypes\nAvatar.propTypes = {\n  icon: Proptypes.node,\n  src: Proptypes.string,\n  badgeUp: Proptypes.bool,\n  content: Proptypes.string,\n  badgeText: Proptypes.string,\n  className: Proptypes.string,\n  imgClassName: Proptypes.string,\n  contentStyles: Proptypes.object,\n  size: Proptypes.oneOf(['sm', 'lg', 'xl']),\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string]),\n  status: Proptypes.oneOf(['online', 'offline', 'away', 'busy']),\n  imgHeight: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\n  imgWidth: Proptypes.oneOfType([Proptypes.string, Proptypes.number]),\n  badgeColor: Proptypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'info',\n    'warning',\n    'dark',\n    'light-primary',\n    'light-secondary',\n    'light-success',\n    'light-danger',\n    'light-info',\n    'light-warning',\n    'light-dark'\n  ]),\n  color: Proptypes.oneOf([\n    'primary',\n    'secondary',\n    'success',\n    'danger',\n    'info',\n    'warning',\n    'dark',\n    'light-primary',\n    'light-secondary',\n    'light-success',\n    'light-danger',\n    'light-info',\n    'light-warning',\n    'light-dark'\n  ]),\n  initials(props) {\n    if (props['initials'] && props['content'] === undefined) {\n      return new Error('content prop is required with initials prop.')\n    }\n    if (props['initials'] && typeof props['content'] !== 'string') {\n      return new Error('content prop must be a string.')\n    }\n    if (typeof props['initials'] !== 'boolean' && props['initials'] !== undefined) {\n      return new Error('initials must be a boolean!')\n    }\n  }\n}\n\n// ** Default Props\nAvatar.defaultProps = {\n  tag: 'div'\n}\n"],"sourceRoot":""}