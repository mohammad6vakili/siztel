{"version":3,"sources":["views/rules/rating_profiles/new/index.jsx","@core/components/breadcrumbs/index.js","assets/loadings/button_loading.svg","components/button/index.js","utility/schemas/index.js","components/datepicker/index.jsx","hooks/use_rating_profiles.js","views/rules/rating_profiles/root/components/slot_action.jsx","views/rules/rating_profiles/root/datatable/slots_columns.js"],"names":["RatingProfilesNew","skin","useSkin","dispatch","useDispatch","createRatingProfileController","loadings","useRatingProfiles","ActivationTime","setActivationTime","useState","slotFormData","setSlotFormData","RatingPlanId","FallbackKeys","slots","useSelector","state","ratingProfiles","useEffect","setSlots","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","LoadId","Tenant","Category","Subject","CustomDatePicker","inputPlaceholder","concat","year","month","day","target","CustomButton","onClick","handleAddSlot","array","length","toast","error","push","Math","random","outline","color","type","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","createRatingProfile","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","_ref","Button","width","src","loadingAnimation","alt","createActionSchema","yup","required","ID","createChargerSchema","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","inputClassName","minimumDate","maximumDate","DatePicker","colorPrimary","colorPrimaryLight","locale","calendarPopperPosition","calendarClassName","AiOutlineCalendar","fontSize","navigate","useNavigate","httpService","useHttp","setLoadings","getRatingProfiles","getEntityById","updateRatingProfile","deleteEntity","listData","setListData","selectedTpId","app","async","_response$data","_response$data$result","response","post","method","params","result","err","useFormik","initialValues","Overwrite","RatingPlanActivations","APIOpts","validationSchema","enableReinitialize","newSlots","obj","rest","status","success","updateRatingProfileController","_response$data2","RatingProfileID","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","_response$data6","_response$data6$resul","_response$data7","_response$data7$resul","_response$data8","_response$data8$resul","_response$data9","_response$data9$resul","setFieldValue","setDeleteModal","SlotAction","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/66.0e54ee13.chunk.js","sourcesContent":["import { Fragment, useEffect, useState } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/rating_profiles_slice\";\nimport useRatingProfiles from \"../../../../hooks/use_rating_profiles\";\nimport CustomDatePicker from \"../../../../components/datepicker\";\n\nconst RatingProfilesNew = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n\n  const { createRatingProfileController, loadings } = useRatingProfiles();\n\n  const [ActivationTime, setActivationTime] = useState(null);\n\n  const [slotFormData, setSlotFormData] = useState({\n    ActivationTime: \"\",\n    RatingPlanId: \"\",\n    FallbackKeys: \"\",\n  });\n\n  const slots = useSelector((state) => state.ratingProfiles.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.ActivationTime.length === 0) {\n      toast.error(\"Please enter ActivationTime.\");\n    } else if (slotFormData.RatingPlanId.length === 0) {\n      toast.error(\"Please enter RatingPlanId.\");\n    } else if (slotFormData.FallbackKeys.length === 0) {\n      toast.error(\"Please enter FallbackKeys.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        ActivationTime: \"\",\n        RatingPlanId: \"\",\n        FallbackKeys: \"\",\n      });\n      setActivationTime(null);\n    }\n  };\n\n  useEffect(() => {\n    dispatch(setSlots([]));\n  }, []);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"New Rating Profile\"\n        data={[{ title: \"New Rating Profile\" }]}\n      />\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          window.scroll({ top: 0, behavior: \"smooth\" });\n          createRatingProfileController.handleSubmit();\n        }}\n        className=\"d-flex flex-column align-items-center\"\n      >\n        <Card className=\"w-100\">\n          {/* card header */}\n          <CardHeader className=\"border-bottom\">\n            <CardTitle>New Rating Profile Form</CardTitle>\n          </CardHeader>\n          {/* card body */}\n          <CardBody className=\"pt-2\">\n            {/* form fields */}\n            <Row className=\"border-bottom mb-1\">\n              {/* TPid */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"TPid\">\n                  TPid\n                </Label>\n                <Input\n                  id=\"TPid\"\n                  name=\"TPid\"\n                  disabled\n                  value={createRatingProfileController.values.TPid}\n                  onChange={createRatingProfileController.handleChange}\n                  invalid={\n                    createRatingProfileController.touched.TPid &&\n                    createRatingProfileController.errors.TPid\n                  }\n                />\n                {createRatingProfileController.touched.TPid &&\n                createRatingProfileController.errors.TPid ? (\n                  <FormFeedback>\n                    {createRatingProfileController.errors.TPid}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* LoadId */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"LoadId\">\n                  LoadId\n                </Label>\n                <Input\n                  id=\"LoadId\"\n                  name=\"LoadId\"\n                  value={createRatingProfileController.values.LoadId}\n                  onChange={createRatingProfileController.handleChange}\n                  invalid={\n                    createRatingProfileController.touched.LoadId &&\n                    createRatingProfileController.errors.LoadId\n                  }\n                />\n                {createRatingProfileController.touched.LoadId &&\n                createRatingProfileController.errors.LoadId ? (\n                  <FormFeedback>\n                    {createRatingProfileController.errors.LoadId}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* Tenant */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"Tenant\">\n                  Tenant\n                </Label>\n                <Input\n                  id=\"Tenant\"\n                  name=\"Tenant\"\n                  value={createRatingProfileController.values.Tenant}\n                  onChange={createRatingProfileController.handleChange}\n                  invalid={\n                    createRatingProfileController.touched.Tenant &&\n                    createRatingProfileController.errors.Tenant\n                  }\n                />\n                {createRatingProfileController.touched.Tenant &&\n                createRatingProfileController.errors.Tenant ? (\n                  <FormFeedback>\n                    {createRatingProfileController.errors.Tenant}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* Category */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"Category\">\n                  Category\n                </Label>\n                <Input\n                  id=\"Category\"\n                  name=\"Category\"\n                  value={createRatingProfileController.values.Category}\n                  onChange={createRatingProfileController.handleChange}\n                  invalid={\n                    createRatingProfileController.touched.Category &&\n                    createRatingProfileController.errors.Category\n                  }\n                />\n                {createRatingProfileController.touched.Category &&\n                createRatingProfileController.errors.Category ? (\n                  <FormFeedback>\n                    {createRatingProfileController.errors.Category}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* Subject */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"Subject\">\n                  Subject\n                </Label>\n                <Input\n                  id=\"Subject\"\n                  name=\"Subject\"\n                  value={createRatingProfileController.values.Subject}\n                  onChange={createRatingProfileController.handleChange}\n                  invalid={\n                    createRatingProfileController.touched.Subject &&\n                    createRatingProfileController.errors.Subject\n                  }\n                />\n                {createRatingProfileController.touched.Subject &&\n                createRatingProfileController.errors.Subject ? (\n                  <FormFeedback>\n                    {createRatingProfileController.errors.Subject}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n            </Row>\n            {/* RatingPlanActivations */}\n            <Row>\n              <Col xs=\"12\">\n                <CardTitle>Rating Plan Activations</CardTitle>\n              </Col>\n              {/* ActivationTime */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"ActivationTime\">\n                  ActivationTime\n                </Label>\n                <CustomDatePicker\n                  inputPlaceholder=\"Click to open calendar\"\n                  value={ActivationTime}\n                  onChange={(value) => {\n                    setActivationTime(value);\n                    setSlotFormData({\n                      ...slotFormData,\n                      ActivationTime: `${value.year}-${value.month}-${value.day}T00:00:00Z`,\n                    });\n                  }}\n                />\n              </Col>\n              {/* RatingPlanId */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RatingPlanId\">\n                  RatingPlanId\n                </Label>\n                <Input\n                  id=\"RatingPlanId\"\n                  name=\"RatingPlanId\"\n                  value={slotFormData.RatingPlanId}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RatingPlanId: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* FallbackKeys */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"FallbackKeys\">\n                  FallbackKeys\n                </Label>\n                <Input\n                  id=\"FallbackKeys\"\n                  name=\"FallbackKeys\"\n                  value={slotFormData.FallbackKeys}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      FallbackKeys: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* add button */}\n              <Col\n                xs=\"12\"\n                sm=\"6\"\n                md=\"3\"\n                className=\"mb-1 d-flex align-items-end\"\n              >\n                <CustomButton\n                  onClick={handleAddSlot}\n                  outline\n                  color=\"primary\"\n                  type=\"button\"\n                >\n                  Add\n                </CustomButton>\n              </Col>\n              {/* datatable */}\n              <Col xs=\"12\">\n                <DataTable\n                  noDataComponent={\n                    <div style={{ margin: \"24px 0\" }}>\n                      No Rating Plan Activation Added Yet.\n                    </div>\n                  }\n                  noHeader\n                  columns={slots_columns}\n                  className=\"react-dataTable\"\n                  style={{ background: \"red\" }}\n                  sortIcon={<ChevronDown size={10} />}\n                  data={slots}\n                  theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                />\n              </Col>\n            </Row>\n          </CardBody>\n          {/* card footer */}\n          <CardFooter className=\"border-top d-flex justify-content-center\">\n            {/* submit button */}\n            <CustomButton\n              loading={loadings.createRatingProfile}\n              type=\"submit\"\n              color=\"primary\"\n              style={{ minWidth: 150 }}\n            >\n              Submit\n            </CustomButton>\n          </CardFooter>\n        </Card>\n      </Form>\n    </Fragment>\n  );\n};\nexport default RatingProfilesNew;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","export default __webpack_public_path__ + \"static/media/button_loading.bbd49f26.svg\";","import { Button } from \"reactstrap\";\nimport loadingAnimation from \"../../assets/loadings/button_loading.svg\";\n\nconst CustomButton = ({ loading, children, ...props }) => {\n  return (\n    <Button disabled={loading} {...props}>\n      {!loading ? children : null}\n      {loading ? <img width={14} src={loadingAnimation} alt=\"loading\" /> : null}\n    </Button>\n  );\n};\nexport default CustomButton;\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\n// export const registerSchema = yup.object({\n//   first_name: yup.string().required(\"The first name field is required.\"),\n//   last_name: yup.string().required(\"The last name field is required.\"),\n//   email: yup\n//     .string()\n//     .required(\"The email field is required.\")\n//     .email(\"The entered email structure is incorrect.\"),\n//   password: yup.string().required(\"The password field is required.\"),\n//   password_confirmation: yup\n//     .string()\n//     .required(\"The repeat password field is required.\"),\n//   privacy: yup.bool().required(\"\"),\n// });\n","import \"./datepicker.scss\";\nimport DatePicker from \"@hassanmojab/react-modern-calendar-datepicker\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\nimport { useSkin } from \"@hooks/useSkin\";\n\nconst CustomDatePicker = ({\n  inputClassName,\n  minimumDate,\n  maximumDate,\n  ...props\n}) => {\n  const { skin } = useSkin();\n\n  return (\n    <div className=\"custom_datepicker_wrapper\">\n      <DatePicker\n        colorPrimary=\"#73bcf0\"\n        colorPrimaryLight=\"#73bcf03b\"\n        inputClassName={`${inputClassName}\n          ${skin === \"light\" ? \"custom_datepicker\" : \"custom_datepicker_dark\"}\n        `}\n        minimumDate={minimumDate}\n        maximumDate={maximumDate}\n        locale={\"en\"}\n        calendarPopperPosition=\"top\"\n        calendarClassName=\"responsive-calendar\"\n        {...props}\n      />\n      <AiOutlineCalendar fontSize={20} />\n    </div>\n  );\n};\nexport default CustomDatePicker;\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createRatingProfileSchema } from \"../utility/schemas/index\";\nimport { setSlots, setDeleteModal } from \"../redux/rating_profiles_slice\";\n\nconst useRatingProfiles = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getRatingProfiles: false,\n    getEntityById: false,\n    createRatingProfile: false,\n    updateRatingProfile: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.ratingProfiles.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getRatingProfiles = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getRatingProfiles: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPRatingProfileIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getRatingProfiles: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getRatingProfiles: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            RatingProfileID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/rating_profiles\");\n      } else {\n        updateRatingProfileController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        updateRatingProfileController.setFieldValue(\n          \"LoadId\",\n          response?.data?.result?.LoadId\n        );\n        updateRatingProfileController.setFieldValue(\n          \"Tenant\",\n          response?.data?.result?.Tenant\n        );\n        updateRatingProfileController.setFieldValue(\n          \"Category\",\n          response?.data?.result?.Category\n        );\n        updateRatingProfileController.setFieldValue(\n          \"Subject\",\n          response?.data?.result?.Subject\n        );\n        dispatch(setSlots(response?.data?.result?.RatingPlanActivations));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createRatingProfileController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      LoadId: \"\",\n      Tenant: \"\",\n      Category: \"\",\n      Subject: \"\",\n      Overwrite: true,\n      RatingPlanActivations: [],\n      APIOpts: {},\n    },\n    validationSchema: createRatingProfileSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one rating plan activation.\");\n      } else {\n        createRatingProfile(values, slots);\n      }\n    },\n  });\n\n  const createRatingProfile = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createRatingProfile: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            LoadId: values.LoadId,\n            Tenant: values.Tenant,\n            Category: values.Category,\n            Subject: values.Subject,\n            Overwrite: values.Overwrite,\n            RatingPlanActivations: newSlots,\n            APIOpts: {},\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createRatingProfile: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/rating_profiles\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createRatingProfile: false });\n    }\n  };\n\n  const updateRatingProfileController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      LoadId: \"\",\n      Tenant: \"\",\n      Category: \"\",\n      Subject: \"\",\n      Overwrite: true,\n      RatingPlanActivations: [],\n      APIOpts: {},\n    },\n    validationSchema: createRatingProfileSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one rating plan activation.\");\n      } else {\n        updateRatingProfile(values, slots);\n      }\n    },\n  });\n\n  const updateRatingProfile = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateRatingProfile: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            LoadId: values.LoadId,\n            Tenant: values.Tenant,\n            Category: values.Category,\n            Subject: values.Subject,\n            Overwrite: values.Overwrite,\n            RatingPlanActivations: newSlots,\n            APIOpts: {},\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateRatingProfile: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/rating_profiles\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateRatingProfile: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            RatingProfileID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getRatingProfiles();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getRatingProfiles,\n    getEntityById,\n    createRatingProfileController,\n    updateRatingProfileController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useRatingProfiles;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/rating_profiles_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.ratingProfiles.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"ActivationTime\",\n    minWidth: \"100px\",\n    selector: (row) => row.ActivationTime,\n  },\n  {\n    name: \"RatingPlanId\",\n    minWidth: \"100px\",\n    selector: (row) => row.RatingPlanId,\n  },\n  {\n    name: \"FallbackKeys\",\n    minWidth: \"100px\",\n    selector: (row) => row.FallbackKeys,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}