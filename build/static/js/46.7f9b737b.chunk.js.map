{"version":3,"sources":["views/rules/rating_profiles/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","components/datepicker/index.jsx","hooks/use_rating_profiles.js","views/rules/rating_profiles/root/components/slot_action.jsx","views/rules/rating_profiles/root/datatable/slots_columns.js"],"names":["RatingProfilesUpdate","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","searchParams","useSearchParams","getEntityById","updateRatingProfileController","loadings","useRatingProfiles","ActivationTime","setActivationTime","useState","slotFormData","setSlotFormData","RatingPlanId","FallbackKeys","getAllTpIdsLoading","useSelector","state","app","selectedTpId","slots","ratingProfiles","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","ProgressLoading","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","LoadId","Tenant","Category","Subject","CustomDatePicker","inputPlaceholder","concat","year","month","day","target","CustomButton","onClick","handleAddSlot","array","length","toast","error","push","Math","random","setSlots","outline","color","type","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","updateRatingProfile","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","ID","createChargerSchema","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","createAccountSchema","Account","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","_ref","inputClassName","minimumDate","maximumDate","DatePicker","colorPrimary","colorPrimaryLight","locale","calendarPopperPosition","calendarClassName","AiOutlineCalendar","fontSize","httpService","useHttp","setLoadings","getRatingProfiles","createRatingProfile","deleteEntity","listData","setListData","async","_response$data","_response$data$result","response","post","method","params","result","err","createRatingProfileController","useFormik","initialValues","Overwrite","RatingPlanActivations","APIOpts","validationSchema","enableReinitialize","newSlots","obj","rest","status","success","_response$data2","RatingProfileID","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","_response$data6","_response$data6$resul","_response$data7","_response$data7$resul","_response$data8","_response$data8$resul","_response$data9","_response$data9$resul","setFieldValue","setDeleteModal","SlotAction","Button","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/46.7f9b737b.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/rating_profiles_slice\";\nimport useRatingProfiles from \"../../../../hooks/use_rating_profiles\";\nimport CustomDatePicker from \"../../../../components/datepicker\";\n\nconst RatingProfilesUpdate = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  const { getEntityById, updateRatingProfileController, loadings } =\n    useRatingProfiles();\n\n  const [ActivationTime, setActivationTime] = useState(null);\n\n  const [slotFormData, setSlotFormData] = useState({\n    ActivationTime: \"\",\n    RatingPlanId: \"\",\n    FallbackKeys: \"\",\n  });\n\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n  const slots = useSelector((state) => state.ratingProfiles.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.ActivationTime.length === 0) {\n      toast.error(\"Please enter ActivationTime.\");\n    } else if (slotFormData.RatingPlanId.length === 0) {\n      toast.error(\"Please enter RatingPlanId.\");\n    } else if (slotFormData.FallbackKeys.length === 0) {\n      toast.error(\"Please enter FallbackKeys.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        ActivationTime: \"\",\n        RatingPlanId: \"\",\n        FallbackKeys: \"\",\n      });\n      setActivationTime(null);\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getEntityById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/rating_profiles\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Rating Profile\"\n        data={[{ title: \"Update Rating Profile\" }]}\n      />\n      {loadings.getEntityById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getEntityById ? (\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            window.scroll({ top: 0, behavior: \"smooth\" });\n            updateRatingProfileController.handleSubmit();\n          }}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Rating Profile Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row className=\"border-bottom mb-1\">\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateRatingProfileController.values.TPid}\n                    onChange={updateRatingProfileController.handleChange}\n                    invalid={\n                      updateRatingProfileController.touched.TPid &&\n                      updateRatingProfileController.errors.TPid\n                    }\n                  />\n                  {updateRatingProfileController.touched.TPid &&\n                  updateRatingProfileController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateRatingProfileController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* LoadId */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"LoadId\">\n                    LoadId\n                  </Label>\n                  <Input\n                    id=\"LoadId\"\n                    name=\"LoadId\"\n                    disabled\n                    value={updateRatingProfileController.values.LoadId}\n                    onChange={updateRatingProfileController.handleChange}\n                    invalid={\n                      updateRatingProfileController.touched.LoadId &&\n                      updateRatingProfileController.errors.LoadId\n                    }\n                  />\n                  {updateRatingProfileController.touched.LoadId &&\n                  updateRatingProfileController.errors.LoadId ? (\n                    <FormFeedback>\n                      {updateRatingProfileController.errors.LoadId}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* Tenant */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Tenant\">\n                    Tenant\n                  </Label>\n                  <Input\n                    id=\"Tenant\"\n                    name=\"Tenant\"\n                    disabled\n                    value={updateRatingProfileController.values.Tenant}\n                    onChange={updateRatingProfileController.handleChange}\n                    invalid={\n                      updateRatingProfileController.touched.Tenant &&\n                      updateRatingProfileController.errors.Tenant\n                    }\n                  />\n                  {updateRatingProfileController.touched.Tenant &&\n                  updateRatingProfileController.errors.Tenant ? (\n                    <FormFeedback>\n                      {updateRatingProfileController.errors.Tenant}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* Category */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Category\">\n                    Category\n                  </Label>\n                  <Input\n                    id=\"Category\"\n                    name=\"Category\"\n                    disabled\n                    value={updateRatingProfileController.values.Category}\n                    onChange={updateRatingProfileController.handleChange}\n                    invalid={\n                      updateRatingProfileController.touched.Category &&\n                      updateRatingProfileController.errors.Category\n                    }\n                  />\n                  {updateRatingProfileController.touched.Category &&\n                  updateRatingProfileController.errors.Category ? (\n                    <FormFeedback>\n                      {updateRatingProfileController.errors.Category}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* Subject */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Subject\">\n                    Subject\n                  </Label>\n                  <Input\n                    id=\"Subject\"\n                    name=\"Subject\"\n                    disabled\n                    value={updateRatingProfileController.values.Subject}\n                    onChange={updateRatingProfileController.handleChange}\n                    invalid={\n                      updateRatingProfileController.touched.Subject &&\n                      updateRatingProfileController.errors.Subject\n                    }\n                  />\n                  {updateRatingProfileController.touched.Subject &&\n                  updateRatingProfileController.errors.Subject ? (\n                    <FormFeedback>\n                      {updateRatingProfileController.errors.Subject}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n              </Row>\n              {/* RatingPlanActivations */}\n              <Row>\n                <Col xs=\"12\">\n                  <CardTitle>Rating Plan Activations</CardTitle>\n                </Col>\n                {/* ActivationTime */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ActivationTime\">\n                    ActivationTime\n                  </Label>\n                  <CustomDatePicker\n                    inputPlaceholder=\"Click to open calendar\"\n                    value={ActivationTime}\n                    onChange={(value) => {\n                      setActivationTime(value);\n                      setSlotFormData({\n                        ...slotFormData,\n                        ActivationTime: `${value.year}-${value.month}-${value.day}T00:00:00Z`,\n                      });\n                    }}\n                  />\n                </Col>\n                {/* RatingPlanId */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"RatingPlanId\">\n                    RatingPlanId\n                  </Label>\n                  <Input\n                    id=\"RatingPlanId\"\n                    name=\"RatingPlanId\"\n                    value={slotFormData.RatingPlanId}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        RatingPlanId: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* FallbackKeys */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"FallbackKeys\">\n                    FallbackKeys\n                  </Label>\n                  <Input\n                    id=\"FallbackKeys\"\n                    name=\"FallbackKeys\"\n                    value={slotFormData.FallbackKeys}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        FallbackKeys: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* add button */}\n                <Col\n                  xs=\"12\"\n                  sm=\"6\"\n                  md=\"3\"\n                  className=\"mb-1 d-flex align-items-end\"\n                >\n                  <CustomButton\n                    onClick={handleAddSlot}\n                    outline\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Add\n                  </CustomButton>\n                </Col>\n                {/* datatable */}\n                <Col xs=\"12\">\n                  <DataTable\n                    noDataComponent={\n                      <div style={{ margin: \"24px 0\" }}>\n                        No Rating Plan Activation Added Yet.\n                      </div>\n                    }\n                    noHeader\n                    columns={slots_columns}\n                    className=\"react-dataTable\"\n                    style={{ background: \"red\" }}\n                    sortIcon={<ChevronDown size={10} />}\n                    data={slots}\n                    theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                  />\n                </Col>\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.updateRatingProfile}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default RatingProfilesUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import \"./datepicker.scss\";\nimport DatePicker from \"@hassanmojab/react-modern-calendar-datepicker\";\nimport { AiOutlineCalendar } from \"react-icons/ai\";\nimport { useSkin } from \"@hooks/useSkin\";\n\nconst CustomDatePicker = ({\n  inputClassName,\n  minimumDate,\n  maximumDate,\n  ...props\n}) => {\n  const { skin } = useSkin();\n\n  return (\n    <div className=\"custom_datepicker_wrapper\">\n      <DatePicker\n        colorPrimary=\"#73bcf0\"\n        colorPrimaryLight=\"#73bcf03b\"\n        inputClassName={`${inputClassName}\n          ${skin === \"light\" ? \"custom_datepicker\" : \"custom_datepicker_dark\"}\n        `}\n        minimumDate={minimumDate}\n        maximumDate={maximumDate}\n        locale={\"en\"}\n        calendarPopperPosition=\"top\"\n        calendarClassName=\"responsive-calendar\"\n        {...props}\n      />\n      <AiOutlineCalendar fontSize={20} />\n    </div>\n  );\n};\nexport default CustomDatePicker;\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createRatingProfileSchema } from \"../utility/schemas/index\";\nimport { setSlots, setDeleteModal } from \"../redux/rating_profiles_slice\";\n\nconst useRatingProfiles = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getRatingProfiles: false,\n    getEntityById: false,\n    createRatingProfile: false,\n    updateRatingProfile: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.ratingProfiles.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getRatingProfiles = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getRatingProfiles: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPRatingProfileIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getRatingProfiles: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getRatingProfiles: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            RatingProfileID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/rating_profiles\");\n      } else {\n        updateRatingProfileController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        updateRatingProfileController.setFieldValue(\n          \"LoadId\",\n          response?.data?.result?.LoadId\n        );\n        updateRatingProfileController.setFieldValue(\n          \"Tenant\",\n          response?.data?.result?.Tenant\n        );\n        updateRatingProfileController.setFieldValue(\n          \"Category\",\n          response?.data?.result?.Category\n        );\n        updateRatingProfileController.setFieldValue(\n          \"Subject\",\n          response?.data?.result?.Subject\n        );\n        dispatch(setSlots(response?.data?.result?.RatingPlanActivations));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createRatingProfileController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      LoadId: \"\",\n      Tenant: \"\",\n      Category: \"\",\n      Subject: \"\",\n      Overwrite: true,\n      RatingPlanActivations: [],\n      APIOpts: {},\n    },\n    validationSchema: createRatingProfileSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one rating plan activation.\");\n      } else {\n        createRatingProfile(values, slots);\n      }\n    },\n  });\n\n  const createRatingProfile = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createRatingProfile: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            LoadId: values.LoadId,\n            Tenant: values.Tenant,\n            Category: values.Category,\n            Subject: values.Subject,\n            Overwrite: values.Overwrite,\n            RatingPlanActivations: newSlots,\n            APIOpts: {},\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createRatingProfile: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/rating_profiles\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createRatingProfile: false });\n    }\n  };\n\n  const updateRatingProfileController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      LoadId: \"\",\n      Tenant: \"\",\n      Category: \"\",\n      Subject: \"\",\n      Overwrite: true,\n      RatingPlanActivations: [],\n      APIOpts: {},\n    },\n    validationSchema: createRatingProfileSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one rating plan activation.\");\n      } else {\n        updateRatingProfile(values, slots);\n      }\n    },\n  });\n\n  const updateRatingProfile = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateRatingProfile: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            LoadId: values.LoadId,\n            Tenant: values.Tenant,\n            Category: values.Category,\n            Subject: values.Subject,\n            Overwrite: values.Overwrite,\n            RatingPlanActivations: newSlots,\n            APIOpts: {},\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateRatingProfile: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/rating_profiles\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateRatingProfile: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPRatingProfile\",\n        params: [\n          {\n            TPid: selectedTpId,\n            RatingProfileID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getRatingProfiles();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getRatingProfiles,\n    getEntityById,\n    createRatingProfileController,\n    updateRatingProfileController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useRatingProfiles;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/rating_profiles_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.ratingProfiles.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"ActivationTime\",\n    minWidth: \"100px\",\n    selector: (row) => row.ActivationTime,\n  },\n  {\n    name: \"RatingPlanId\",\n    minWidth: \"100px\",\n    selector: (row) => row.RatingPlanId,\n  },\n  {\n    name: \"FallbackKeys\",\n    minWidth: \"100px\",\n    selector: (row) => row.FallbackKeys,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}