{"version":3,"sources":["views/components/spinners/SpinnerFlex.js","views/components/spinners/SpinnerFloat.js","views/components/spinners/SpinnerSizes.js","views/components/spinners/SpinnerGrowing.js","views/components/spinners/SpinnerBorder.js","views/components/spinners/SpinnerColors.js","views/components/spinners/SpinnerButtons.js","views/components/spinners/SpinnerGrowingColored.js","views/components/spinners/SpinnerTextAlignment.js","views/components/spinners/SpinnerSourceCode.js","views/components/spinners/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["SpinnerFlex","_jsxs","Fragment","children","_jsx","className","Spinner","SpinnerFloat","SpinnerSizes","size","type","style","height","width","SpinnerGrowing","SpinnerBorder","SpinnerColors","color","SpinnerButton","Button","outline","disabled","SpinnerGrowColors","SpinnerTextAlignment","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","Spinners","useEffect","Prism","highlightAll","BreadCrumbs","title","data","Row","Col","md","sm","Card","code","CardText","SpinnerGrow","SpinnerButtons","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","length","active","classnames","CardSnippet","noBody","iconCode","isOpen","setIsOpen","useState","IconCode","Code","CardBody","CardHeader","CardTitle","onClick","toggle","Collapse"],"mappings":"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","file":"static/js/152.e0121546.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFlex = () => {\n  return (\n    <Fragment>\n      <div className='d-flex justify-content-center my-1'>\n        <Spinner />\n      </div>\n\n      <div className='d-flex justify-content-between align-items-center'>\n        <strong>Loading...</strong>\n        <Spinner />\n      </div>\n    </Fragment>\n  )\n}\nexport default SpinnerFlex\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFloat = () => {\n  return <Spinner className='float-end mb-2' />\n}\nexport default SpinnerFloat\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerSizes = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <div>\n        <Spinner className='me-25' size='sm' />\n        <Spinner type='grow' size='sm' />\n      </div>\n      <div>\n        <Spinner className='me-25' />\n        <Spinner type='grow' />\n      </div>\n      <div>\n        <Spinner className='me-25' style={{ height: '3rem', width: '3rem' }} />\n        <Spinner type='grow' style={{ height: '3rem', width: '3rem' }} />\n      </div>\n    </div>\n  )\n}\nexport default SpinnerSizes\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowing = () => {\n  return <Spinner type='grow' />\n}\nexport default SpinnerGrowing\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerBorder = () => {\n  return <Spinner />\n}\nexport default SpinnerBorder\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerColors = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Spinner color='primary' />\n      <Spinner color='secondary' />\n      <Spinner color='success' />\n      <Spinner color='danger' />\n      <Spinner color='warning' />\n      <Spinner color='info' />\n      <Spinner color='light' />\n      <Spinner color='dark' />\n    </div>\n  )\n}\nexport default SpinnerColors\n","// ** Reactstrap Imports\nimport { Button, Spinner } from 'reactstrap'\n\nconst SpinnerButton = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' />\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' type='grow' />\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' type='grow' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n    </div>\n  )\n}\nexport default SpinnerButton\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowColors = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Spinner type='grow' color='primary' />\n      <Spinner type='grow' color='secondary' />\n      <Spinner type='grow' color='success' />\n      <Spinner type='grow' color='danger' />\n      <Spinner type='grow' color='warning' />\n      <Spinner type='grow' color='info' />\n      <Spinner type='grow' color='light' />\n      <Spinner type='grow' color='dark' />\n    </div>\n  )\n}\nexport default SpinnerGrowColors\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerTextAlignment = () => {\n  return (\n    <div className='text-center'>\n      <Spinner />\n    </div>\n  )\n}\nexport default SpinnerTextAlignment\n","export const spinnerBorder = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerBorder = () => {\n  return <Spinner />\n}\nexport default SpinnerBorder\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerColors = () => {\n  return (\n    <React.Fragment>\n      <Spinner color='primary' />\n      <Spinner color='secondary' />\n      <Spinner color='success' />\n      <Spinner color='danger' />\n      <Spinner color='warning' />\n      <Spinner color='info' />\n      <Spinner color='light' />\n      <Spinner color='dark' />\n    </React.Fragment>\n  )\n}\nexport default SpinnerColors\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowing = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowing = () => {\n  return <Spinner type='grow' color='primary' />\n}\nexport default SpinnerGrowing\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowColors = () => {\n  return (\n    <React.Fragment>\n      <Spinner type='grow' color='primary' />\n      <Spinner type='grow' color='secondary' />\n      <Spinner type='grow' color='success' />\n      <Spinner type='grow' color='danger' />\n      <Spinner type='grow' color='warning' />\n      <Spinner type='grow' color='info' />\n      <Spinner type='grow' color='light' />\n      <Spinner type='grow' color='dark' />\n    </React.Fragment>\n  )\n}\nexport default SpinnerGrowColors`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFlex = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFlex = () => {\n  return (\n    <React.Fragment>\n      <div className='d-flex justify-content-center my-1'>\n        <Spinner />\n      </div>\n\n      <div className='d-flex justify-content-between align-items-center'>\n        <strong>Loading...</strong>\n        <Spinner />\n      </div>\n    </React.Fragment>\n  )\n}\nexport default SpinnerFlex\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFloat = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFloat = () => {\n  return <Spinner className='float-end mb-2' />\n}\nexport default SpinnerFloat\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerTextAlignment = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerTextAlignment = () => {\n  return (\n    <div className='text-center'>\n      <Spinner />\n    </div>\n  )\n}\nexport default SpinnerTextAlignment\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerSizes = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerSizes = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <div>\n        <Spinner className='me-25' size='sm' />\n        <Spinner type='grow' size='sm' />\n      </div>\n      <div>\n        <Spinner className='me-25' />\n        <Spinner type='grow' />\n      </div>\n      <div>\n        <Spinner className='me-25' size='lg' />\n        <Spinner type='grow' size='lg' />\n      </div>\n    </div>\n  )\n}\nexport default SpinnerSizes\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerButton = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Button, Spinner } from 'reactstrap'\n\nconst SpinnerButton = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary'>\n        <Spinner color='white' size='sm' />\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' type='grow' />\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' type='grow' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n    </div>\n  )\n}\nexport default SpinnerButton\n`}\n    </code>\n  </pre>\n)\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport SpinnerFlex from './SpinnerFlex'\nimport SpinnerFloat from './SpinnerFloat'\nimport SpinnerSizes from './SpinnerSizes'\nimport SpinnerGrow from './SpinnerGrowing'\nimport SpinnerBorder from './SpinnerBorder'\nimport SpinnerColors from './SpinnerColors'\nimport SpinnerButtons from './SpinnerButtons'\nimport SpinnerGrowColors from './SpinnerGrowingColored'\nimport SpinnerTextAlignment from './SpinnerTextAlignment'\n\n// ** Source Code\nimport {\n  spinnerFlex,\n  spinnerFloat,\n  spinnerSizes,\n  spinnerBorder,\n  spinnerButton,\n  spinnerColors,\n  spinnerGrowing,\n  spinnerGrowColors,\n  spinnerTextAlignment\n} from './SpinnerSourceCode'\n\nconst Spinners = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Spinners' data={[{ title: 'Components' }, { title: 'Spinners' }]} />\n      <Row className='match-height'>\n        <Col md='6' sm='12'>\n          <Card title='Border Spinner' code={spinnerBorder}>\n            <CardText>\n              Use <code>Spinner</code> tag to create a bordered spinner.\n            </CardText>\n            <SpinnerBorder />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Colors' code={spinnerColors}>\n            <CardText className='mb-0'>\n              Use <code>color</code> attribute to create a colored spinner.\n            </CardText>\n            <SpinnerColors />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Growing Spinner' code={spinnerGrowing}>\n            <CardText>\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing spinner.\n            </CardText>\n            <SpinnerGrow />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Colored Growing Spinners' code={spinnerGrowColors}>\n            <CardText className='mb-0'>\n              Use <code>color</code> and <code>type</code> attribute to create a colored growing spinner.\n            </CardText>\n            <SpinnerGrowColors />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Flex' code={spinnerFlex}>\n            <CardText>\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code> and <code>.justify-content-[side]</code>.\n            </CardText>\n            <SpinnerFlex />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Float' code={spinnerFloat}>\n            <CardText>\n              Use <code>.float-[side]</code> with spinner tag to change spinner's position.\n            </CardText>\n            <SpinnerFloat />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Text Alignment' code={spinnerTextAlignment}>\n            <CardText>\n              You can also use <code>.text-[side]</code> as a wrapper to spinner tag to change spinner's position.\n            </CardText>\n            <SpinnerTextAlignment />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Sizes' code={spinnerSizes}>\n            <CardText className='mb-0'>\n              Use prop <code>size=\"sm\"</code> for Small spinner or use <code>style</code> prop for custom size.\n            </CardText>\n            <SpinnerSizes />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Buttons' code={spinnerButton}>\n            <SpinnerButtons />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Spinners\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}