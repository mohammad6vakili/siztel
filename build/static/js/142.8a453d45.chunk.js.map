{"version":3,"sources":["views/components/alerts/AlertIcon.js","views/components/alerts/AlertTitle.js","views/components/alerts/AlertColors.js","views/components/alerts/AlertExample.js","views/components/alerts/DefaultAlert.js","views/components/alerts/AlertDismissable.js","views/components/alerts/AlertUncontrolled.js","views/components/alerts/AlertSourceCode.js","views/components/alerts/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["AlertIcon","_jsx","className","children","Alert","color","_jsxs","Star","size","AlertTitle","href","onClick","e","preventDefault","AlertColors","AlertExample","_useState","useState","_useState2","_slicedToArray","visible","setVisible","_useState3","_useState4","inputTerm","setInputTerm","Label","htmlFor","Input","placeholder","value","onChange","target","length","isNaN","handleInput","isOpen","AlertCircle","DefaultAlert","AlertDismissable","toggle","AlertUncontrolled","UncontrolledAlert","defaultAlert","alertTitle","alertColors","alertDismissable","alertUncontrolled","alertIcon","alertExample","Alerts","useEffect","Prism","highlightAll","Fragment","BreadCrumbs","title","data","Row","Col","sm","Card","code","CardText","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","_objectSpread","CardSnippet","noBody","iconCode","setIsOpen","IconCode","Code","CardBody","CardHeader","CardTitle","Collapse"],"mappings":"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","file":"static/js/142.8a453d45.chunk.js","sourcesContent":["// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\n// ** Icons Imports\nimport { Star } from 'react-feather'\n\nconst AlertIcon = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary'>\n        <div className='alert-body d-flex align-items-center'>\n          <Star size={15} />\n          <span className='ms-50'>\n            Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n          </span>\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertIcon\n","// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst AlertTitle = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Lorem ipsum dolor sit amet</h4>\n        <div className='alert-body'>\n          Lorem ipsum dolor sit amet{' '}\n          <a className='alert-link' href='/' onClick={e => e.preventDefault()}>\n            consectetur\n          </a>{' '}\n          adipisicing elit. Ducimus, laborum!.\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertTitle\n","// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst AlertColors = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary'>\n        <h4 className='alert-heading'>Primary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='secondary'>\n        <h4 className='alert-heading'>Secondary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='success'>\n        <h4 className='alert-heading'>Success</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Danger</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Warning</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='info'>\n        <h4 className='alert-heading'>Info</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='dark'>\n        <h4 className='alert-heading'>Dark</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertColors\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Icons Imports\nimport { AlertCircle } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Alert, Label, Input } from 'reactstrap'\n\nconst AlertExample = () => {\n  // ** States\n  const [visible, setVisible] = useState(true)\n  const [inputTerm, setInputTerm] = useState('')\n\n  const handleInput = e => {\n    setInputTerm(e.target.value)\n\n    if (e.target.value.length > 0 && isNaN(e.target.value)) {\n      setVisible(true)\n    } else {\n      setVisible(false)\n    }\n  }\n\n  return (\n    <div className='demo-spacing-0'>\n      <div className='mb-2'>\n        <Label className='form-label' htmlFor='numbers'>\n          Enter numbers only\n        </Label>\n        <Input className='w-25 h-25 ps-1' placeholder='0123456789' value={inputTerm} onChange={e => handleInput(e)} />\n      </div>\n      <Alert color='danger' isOpen={visible}>\n        <div className='alert-body'>\n          <AlertCircle size={15} />{' '}\n          <span className='ms-1'>\n            The value is <strong>invalid</strong> you can only enter numbers\n          </span>\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertExample\n","// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst DefaultAlert = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <span className='fw-bold'>Good Morning!</span>\n          <span> Start your day with some alerts.</span>\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default DefaultAlert\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Alert } from 'reactstrap'\n\nconst AlertDismissable = () => {\n  // ** State\n  const [visible, setVisible] = useState(true)\n\n  return (\n    <div className='demo-spacing-0'>\n      <Alert color='primary' isOpen={visible} toggle={() => setVisible(false)}>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </Alert>\n    </div>\n  )\n}\nexport default AlertDismissable\n","// ** Reactstrap Imports\nimport { UncontrolledAlert } from 'reactstrap'\n\nconst AlertUncontrolled = () => {\n  return (\n    <div className='demo-spacing-0'>\n      <UncontrolledAlert color='primary'>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </UncontrolledAlert>\n    </div>\n  )\n}\nexport default AlertUncontrolled\n","export const defaultAlert = (\n  <pre className='language-jsx'>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst DefaultAlert = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <span className='fw-bold'>Good Morning!</span>\n          <span> Start your day with some alerts.</span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default DefaultAlert\n  `}\n    </code>\n  </pre>\n)\n\nexport const alertTitle = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst AlertTitle = () => {\n  return (\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Lorem ipsum dolor sit amet</h4>\n        <div className='alert-body'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Ducimus, laborum!.</div>\n      </Alert>\n  )\n}\nexport default AlertTitle\n`}\n    </code>\n  </pre>\n)\n\nexport const alertColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\n\nconst AlertColors = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <h4 className='alert-heading'>Primary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='secondary'>\n        <h4 className='alert-heading'>Secondary</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='success'>\n        <h4 className='alert-heading'>Success</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Danger</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='warning'>\n        <h4 className='alert-heading'>Warning</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='info'>\n        <h4 className='alert-heading'>Info</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n      <Alert color='dark'>\n        <h4 className='alert-heading'>Dark</h4>\n        <div className='alert-body'>\n          Tootsie roll lollipop lollipop icing. Wafer cookie danish macaroon. Liquorice fruitcake apple pie I love\n          cupcake cupcake.\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertColors\n`}\n    </code>\n  </pre>\n)\n\nexport const alertDismissable = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Alert } from 'reactstrap'\n\nconst AlertDismissable = () => {\n  const [visible, setVisible] = useState(true)\n\n  return (\n    <React.Fragment>\n      <Alert color='info' isOpen={visible} toggle={() => setVisible(false)}>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertDismissable\n    `}\n    </code>\n  </pre>\n)\n\nexport const alertUncontrolled = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { UncontrolledAlert } from 'reactstrap'\n\nconst AlertUncontrolled = () => {\n  return (\n    <React.Fragment>\n      <UncontrolledAlert color='danger'>\n        <div className='alert-body'>\n          Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n        </div>\n      </UncontrolledAlert>\n    </React.Fragment>\n  )\n}\nexport default AlertUncontrolled\n      `}\n    </code>\n  </pre>\n)\n\nexport const alertIcon = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Alert } from 'reactstrap'\nimport { Star } from 'react-feather'\n\nconst AlertIcon = () => {\n  return (\n    <React.Fragment>\n      <Alert color='primary'>\n        <div className='alert-body'>\n          <Star size={15} />\n          <span className='ms-1'>\n            Chupa chups topping bonbon. Jelly-o toffee I love. Sweet I love wafer I love wafer.\n          </span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertIcon\n        `}\n    </code>\n  </pre>\n)\n\nexport const alertExample = (\n  <pre>\n    <code className='language-jsx'>\n      {`\nimport React, { useState } from 'react'\nimport { Alert,  Label, Input } from 'reactstrap'\nimport { AlertCircle } from 'react-feather'\n\nconst AlertExample = () => {\n  const [inputTerm, setInputTerm] = useState('')\n  const [visible, setVisible] = useState('')\n\n  const handleInput = e => {\n    setInputTerm(e.target.value)\n\n    if (e.target.value.length > 0 && isNaN(e.target.value)) {\n      setVisible(true)\n    } else {\n      setVisible(false)\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div className='mb-2'>\n        <Label className='form-label' htmlFor='numbers'>Enter numbers only</Label>\n        <Input\n          className='w-25 h-25 ps-1'\n          placeholder='0123456789'\n          value={inputTerm}\n          onChange={e => handleInput(e)}\n        />\n      </div>\n      <Alert color='danger' isOpen={visible}>\n        <div className='alert-body'>\n          <AlertCircle size={15} />{' '}\n          <span className='ms-1'>\n            the value is <strong>invalid</strong> you can only enter numbers\n          </span>\n        </div>\n      </Alert>\n    </React.Fragment>\n  )\n}\nexport default AlertExample\n        `}\n    </code>\n  </pre>\n)\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport AlertIcon from './AlertIcon'\nimport AlertTitle from './AlertTitle'\nimport AlertColors from './AlertColors'\nimport AlertExample from './AlertExample'\nimport DefaultAlert from './DefaultAlert'\nimport AlertDismissable from './AlertDismissable'\nimport AlertUncontrolled from './AlertUncontrolled'\n\n// ** Source Code\nimport {\n  alertIcon,\n  alertTitle,\n  alertColors,\n  defaultAlert,\n  alertExample,\n  alertDismissable,\n  alertUncontrolled\n} from './AlertSourceCode'\n\nconst Alerts = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n  return (\n    <Fragment>\n      <BreadCrumbs title='Alerts' data={[{ title: 'Components' }, { title: 'Alerts' }]} />\n      <Row>\n        <Col sm='12'>\n          <Card title='Default' code={defaultAlert}>\n            <CardText>\n              Alerts are available for any length of text, as well as an optional dismiss button. Use <code>Alert</code>{' '}\n              Component & <code>color</code> prop for alert with all theme colors.\n            </CardText>\n            <DefaultAlert />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Title' code={alertTitle}>\n            <CardText>\n              Add a title to the alert with the <code>.alert-heading</code>\n            </CardText>\n            <AlertTitle />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Colors' code={alertColors}>\n            <CardText>\n              Use <code>color</code> prop to for alert with all theme colors.\n            </CardText>\n            <AlertColors />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Dismissable Alert' code={alertDismissable}>\n            <CardText>\n              Using <code>isOpen</code> and <code>toggle</code> you can create a dismissable alert.\n            </CardText>\n            <AlertDismissable />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Uncontrolled Alert' code={alertUncontrolled}>\n            <CardText>\n              For the most basic use-case an uncontrolled component can provide the functionality wanted without the\n              need to manage/control the state of the component. UncontrolledAlert does not require isOpen nor toggle\n              props to work.\n            </CardText>\n            <AlertUncontrolled />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Icon' code={alertIcon}>\n            <AlertIcon />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Example' code={alertExample}>\n            <CardText>An example would be to have an input and when a condition is met, show the alert.</CardText>\n            <AlertExample />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Alerts\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}