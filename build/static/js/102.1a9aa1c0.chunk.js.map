{"version":3,"sources":["@core/components/card-actions/index.js","views/ui-elements/cards/actions/index.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","reload","setReload","useState","collapse","setCollapse","visibility","setVisibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","UiLoader","_jsx","blocking","_jsxs","Card","className","classnames","CardHeader","CardTitle","tag","renderIcons","Array","isArray","map","i","Tag","length","size","onClick","isOpen","Breadcrumbs","data","Row","Col","sm","CardAction","endLoading","setTimeout","CardBody","Table","responsive","bordered","md","CardText","BreadCrumbs","Breadcrumb","BreadcrumbItem","Link","to","item","index","Wrapper","link","isLastItem","active","UILoader","loader","overlayColor","show","style","backgroundColor","defaultProps","Spinner","color"],"mappings":"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","file":"static/js/102.1a9aa1c0.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'me-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport Breadcrumbs from '@components/breadcrumbs'\nimport CardAction from '@components/card-actions'\n\n// ** Icons Imports\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { CardBody, CardText, Row, Col, Table } from 'reactstrap'\n\nconst CardActions = () => {\n  return (\n    <Fragment>\n      <Breadcrumbs title='Card Actions' data={[{ title: 'Cards' }, { title: 'Card Actions' }]} />\n      <Row>\n        <Col sm='12'>\n          <CardAction\n            title='Card Actions'\n            actions={['collapse', 'reload', 'remove']}\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <Table responsive bordered>\n                <thead>\n                  <tr>\n                    <th>Action</th>\n                    <th>Icon</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Collapse</td>\n                    <td className='text-center'>\n                      <ChevronDown className='collapse-icon' size={15} />\n                    </td>\n                    <td> Collapse card content using collapse action.</td>\n                  </tr>\n                  <tr>\n                    <td>Refresh Content</td>\n                    <td className='text-center'>\n                      <RotateCw size={15} />\n                    </td>\n                    <td>Refresh your card content using refresh action.</td>\n                  </tr>\n                  <tr>\n                    <td>Remove Card</td>\n                    <td className='text-center'>\n                      <X size={15} />\n                    </td>\n                    <td> Remove card from page using remove card action</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n      <Row>\n        <Col md='6' sm='12'>\n          <CardAction title='Collapse' actions='collapse'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can create a collapsible content by using our <code>CardAction</code> component and by passing prop{' '}\n                <code>actions='collapse'</code>.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <ChevronDown size={15} /> to see card collapse in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction\n            title='Reload'\n            actions='reload'\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <CardText>\n                To create a re-loadable card pass prop <code>actions='reload'</code> and pass prop{' '}\n                <code>endReload</code> to end the loading.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction title='Remove' actions='remove'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can add refresh content action to card by adding class <code>.card-reload</code> with your card tag,\n                and add conditional spinner into card body to show when card is refreshing.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default CardActions\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n"],"sourceRoot":""}