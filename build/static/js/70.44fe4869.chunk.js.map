{"version":3,"sources":["views/rules/action_plans/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","hooks/use_action_plans.js","views/rules/action_plans/root/components/slot_action.jsx","views/rules/action_plans/root/datatable/slots_columns.js"],"names":["ActionPlansUpdate","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","searchParams","useSearchParams","getEntityById","updateActionPlanController","loadings","useActionPlans","slotFormData","setSlotFormData","useState","ActionsId","TimingId","Weight","getAllTpIdsLoading","useSelector","state","app","selectedTpId","slots","actionPlans","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","ProgressLoading","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","type","parseFloat","CustomButton","onClick","handleAddSlot","array","length","toast","error","push","Math","random","setSlots","outline","color","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","createActionPlan","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","Account","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","httpService","useHttp","setLoadings","getActionPlans","updateActionPlan","deleteEntity","listData","setListData","async","_response$data","_response$data$result","response","post","method","params","result","err","createActionPlanController","useFormik","initialValues","Actions","validationSchema","enableReinitialize","newSlots","obj","rest","ActionPlan","status","success","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","setFieldValue","setDeleteModal","SlotAction","_ref","Button","filter","padding","selector","row","maxWidth","cell"],"mappings":"oJAAA,6JAiQeA,UAtOWA,KACxB,MAAM,KAAEC,GAASC,cACXC,EAAWC,cACXC,EAAWC,eACVC,GAAgBC,eACjB,cAAEC,EAAa,2BAAEC,EAA0B,SAAEC,GACjDC,eAEKC,EAAcC,GAAmBC,mBAAS,CAC/CC,UAAW,GACXC,SAAU,GACVC,OAAQ,IAGJC,EAAqBC,aACxBC,GAAUA,EAAMC,IAAIH,qBAEjBI,EAAeH,aAAaC,GAAUA,EAAMC,IAAIC,eAChDC,EAAQJ,aAAaC,GAAUA,EAAMI,YAAYD,QA8BvD,OAXAE,qBAAU,KACR,IAAIC,EAAYpB,EAAaqB,IAAI,aAC7BD,EACEJ,GACFd,EAAckB,GAGhBtB,EAAS,sBACX,GACC,CAACkB,IAGFM,eAACC,WAAQ,CAAAC,SAAA,CACPC,cAACC,IAAW,CACVC,MAAM,qBACNC,KAAM,CAAC,CAAED,MAAO,yBAEjBvB,EAASF,cAAgBuB,cAACI,IAAe,IAAM,KAC9CjB,GAAuBR,EAASF,cA2K9B,KA1KFuB,cAACK,IAAI,CACHC,SAAWC,IACTA,EAAEC,iBACFC,OAAOC,OAAO,CAAEC,IAAK,EAAGC,SAAU,WAClClC,EAA2BmC,cAAc,EAE3CC,UAAU,wCAAuCf,SAEjDF,eAACkB,IAAI,CAACD,UAAU,QAAOf,SAAA,CAErBC,cAACgB,IAAU,CAACF,UAAU,gBAAef,SACnCC,cAACiB,IAAS,CAAAlB,SAAC,8BAGbF,eAACqB,IAAQ,CAACJ,UAAU,OAAMf,SAAA,CAExBF,eAACsB,KAAG,CAACL,UAAU,qBAAoBf,SAAA,CAEjCF,eAACuB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMf,SAAA,CACzCC,cAACwB,IAAK,CAACV,UAAU,aAAaW,IAAI,OAAM1B,SAAC,SAGzCC,cAAC0B,IAAK,CACJC,GAAG,OACHC,KAAK,OACLC,UAAQ,EACRC,MAAOpD,EAA2BqD,OAAOC,KACzCC,SAAUvD,EAA2BwD,aACrCC,QACEzD,EAA2B0D,QAAQJ,MACnCtD,EAA2B2D,OAAOL,OAGrCtD,EAA2B0D,QAAQJ,MACpCtD,EAA2B2D,OAAOL,KAChChC,cAACsC,IAAY,CAAAvC,SACVrB,EAA2B2D,OAAOL,OAEnC,QAGNnC,eAACuB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMf,SAAA,CACzCC,cAACwB,IAAK,CAACV,UAAU,aAAaW,IAAI,KAAI1B,SAAC,OAGvCC,cAAC0B,IAAK,CACJC,GAAG,KACHC,KAAK,KACLC,UAAQ,EACRC,MAAOpD,EAA2BqD,OAAOQ,GACzCN,SAAUvD,EAA2BwD,aACrCC,QACEzD,EAA2B0D,QAAQG,IACnC7D,EAA2B2D,OAAOE,KAGrC7D,EAA2B0D,QAAQG,IACpC7D,EAA2B2D,OAAOE,GAChCvC,cAACsC,IAAY,CAAAvC,SACVrB,EAA2B2D,OAAOE,KAEnC,WAIR1C,eAACsB,KAAG,CAAApB,SAAA,CACFC,cAACoB,IAAG,CAACC,GAAG,KAAItB,SACVC,cAACiB,IAAS,CAAAlB,SAAC,cAGbF,eAACuB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMf,SAAA,CACzCC,cAACwB,IAAK,CAACV,UAAU,aAAaW,IAAI,YAAW1B,SAAC,cAG9CC,cAAC0B,IAAK,CACJI,MAAOjD,EAAaG,UACpBiD,SAAW1B,GACTzB,EAAgB,IACXD,EACHG,UAAWuB,EAAEiC,OAAOV,QAGxBH,GAAG,YACHC,KAAK,iBAIT/B,eAACuB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMf,SAAA,CACzCC,cAACwB,IAAK,CAACV,UAAU,aAAaW,IAAI,WAAU1B,SAAC,aAG7CC,cAAC0B,IAAK,CACJC,GAAG,WACHC,KAAK,WACLE,MAAOjD,EAAaI,SACpBgD,SAAW1B,GACTzB,EAAgB,IACXD,EACHI,SAAUsB,EAAEiC,OAAOV,aAM3BjC,eAACuB,IAAG,CAACC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIT,UAAU,OAAMf,SAAA,CACzCC,cAACwB,IAAK,CAACV,UAAU,aAAaW,IAAI,SAAQ1B,SAAC,WAG3CC,cAAC0B,IAAK,CACJe,KAAK,SACLd,GAAG,SACHC,KAAK,SACLE,MAAOjD,EAAaK,OACpB+C,SAAW1B,GACTzB,EAAgB,IACXD,EACHK,OAAQwD,WAAWnC,EAAEiC,OAAOV,cAMpC9B,cAACoB,IAAG,CACFC,GAAG,KACHC,GAAG,IACHC,GAAG,IACHT,UAAU,8BAA6Bf,SAEvCC,cAAC2C,IAAY,CACXC,QArKIC,KACpB,IAAIC,EAAQ,IAAItD,GACsB,IAAlCX,EAAaG,UAAU+D,OACzBC,IAAMC,MAAM,2BAC8B,IAAjCpE,EAAaI,SAAS8D,OAC/BC,IAAMC,MAAM,2BAEZH,EAAMI,KAAK,IAAKrE,EAAc8C,GAAoB,UAAhBwB,KAAKC,WACvCjF,EAASkF,YAASP,IAClBhE,EAAgB,CACdE,UAAW,GACXC,SAAU,GACVC,OAAQ,IAEZ,EAwJgBoE,SAAO,EACPC,MAAM,UACNd,KAAK,SAAQ1C,SACd,UAKHC,cAACoB,IAAG,CAACC,GAAG,KAAItB,SACVC,cAACwD,IAAS,CACRC,gBACEzD,cAAA,OAAK0D,MAAO,CAAEC,OAAQ,UAAW5D,SAAC,8BAIpC6D,UAAQ,EACRC,QAASC,IACThD,UAAU,kBACV4C,MAAO,CAAEK,WAAY,OACrBC,SAAUhE,cAACiE,IAAW,CAACC,KAAM,KAC7B/D,KAAMX,EACN2E,MAAgB,SAATlG,EAAkB,YAAc,aAM/C+B,cAACoE,IAAU,CAACtD,UAAU,2CAA0Cf,SAE9DC,cAAC2C,IAAY,CACX0B,QAAS1F,EAAS2F,iBAClB7B,KAAK,SACLc,MAAM,UACNG,MAAO,CAAEa,SAAU,KAAMxE,SAC1B,oBAOA,C,mCC9Pf,mDAiEeyE,IA/CMC,IAEnB,MAAM,KAAEtE,EAAI,MAAED,GAAUuE,EAqBxB,OACEzE,cAAA,OAAKc,UAAU,qBAAoBf,SACjCC,cAAA,OAAKc,UAAU,iDAAgDf,SAC7DC,cAAA,OAAKc,UAAU,sBAAqBf,SAClCF,eAAA,OAAKiB,UAAU,SAAQf,SAAA,CACpBG,EACCF,cAAA,MAAIc,UAAU,wCAAuCf,SAAEG,IAEvD,GAEFF,cAAA,OAAKc,UAAU,6DAA4Df,SACzEF,eAAC6E,IAAU,CAAA3E,SAAA,CACTC,cAAC2E,IAAc,CAACC,IAAI,KAAI7E,SACtBC,cAAC6E,IAAI,CAACC,GAAG,IAAG/E,SAAC,gBA/BpBI,EAAK4E,KAAI,CAACC,EAAMC,KACrB,MAAMC,EAAUF,EAAKG,KAAON,IAAO/E,WAC7BsF,EAAajF,EAAK4C,OAAS,IAAMkC,EACvC,OACEjF,cAAC2E,IAAc,CACbC,IAAI,KAEJS,QAASD,EACTtE,UAAWwE,IAAW,CAAE,gBAAiBF,IAAcrF,SAEvDC,cAACkF,EAAO,IAAMF,EAAKG,KAAO,CAAEL,GAAIE,EAAKG,MAAS,CAAC,EAACpF,SAC7CiF,EAAK9E,SALH+E,EAOU,iBA0Bf,C,mCC9DV,yNAEO,MAAMM,EAAqBC,IAAW,CAC3CxD,KAAMwD,MAAaC,SAAS,+BAC5BlD,GAAIiD,MAAaC,SAAS,+BAGfC,EAAsBF,IAAW,CAC5CxD,KAAMwD,MAAaC,SAAS,+BAC5BE,OAAQH,MAAaC,SAAS,iCAC9BlD,GAAIiD,MAAaC,SAAS,6BAC1BG,eAAgBJ,MAEbC,SAAS,yCACZI,WAAYL,MAAaC,SAAS,qCAClCK,MAAON,MAAaC,SAAS,gCAC7BM,UAAWP,MAAYQ,IAAI,GAAGP,SAAS,oCACvCQ,aAAcT,MAEXQ,IAAI,GACJP,SAAS,yCAGDS,EAAqBV,IAAW,CAC3CxD,KAAMwD,MAAaC,SAAS,+BAC5BlD,GAAIiD,MAAaC,SAAS,6BAC1BU,UAAWX,MAAaC,SAAS,oCACjCW,OAAQZ,MAAaC,SAAS,iCAC9BY,KAAMb,MAAaC,SAAS,+BAC5Ba,SAAUd,MAAaC,SAAS,mCAChCc,MAAOf,MAAaC,SAAS,kCAGlBe,EAA0BhB,IAAW,CAChDxD,KAAMwD,MAAaC,SAAS,+BAC5BlD,GAAIiD,MAAaC,SAAS,6BAC1BgB,SAAUjB,MAAYQ,IAAI,GAAGP,SAAS,qCAG3BiB,EAA4BlB,IAAW,CAClDxD,KAAMwD,MAAaC,SAAS,+BAC5BkB,OAAQnB,MAAaC,SAAS,iCAC9BE,OAAQH,MAAaC,SAAS,iCAC9BmB,SAAUpB,MAAaC,SAAS,mCAChCoB,QAASrB,MAAaC,SAAS,oCAGpBqB,EAAsBtB,IAAW,CAC5CuB,QAASvB,MAAaC,SAAS,kCAC/BE,OAAQH,MAAaC,SAAS,iCAC9BuB,cAAexB,MAEZyB,UAAS,GACTxB,SAAS,wCACZyB,iBAAkB1B,MAEfyB,UAAS,GACTxB,SAAS,2CACZ0B,SAAU3B,MAEPQ,IAAI,EAAG,gCACPP,SAAS,iC,mCC7Dd,uBAUerF,IAPSA,IAEpBJ,cAAA,OAAKc,UAAU,kBAAiBf,SAC9BC,cAAA,OAAKc,UAAU,mB,yDCNrB,wEAwMelC,IA/LQA,KACrB,MAAMT,EAAWC,cACXC,EAAWC,eACX,YAAE8I,GAAgBC,eACjB1I,EAAU2I,GAAevI,mBAAS,CACvCwI,gBAAgB,EAChB9I,eAAe,EACf6F,kBAAkB,EAClBkD,kBAAkB,EAClBC,cAAc,KAGTC,EAAUC,GAAe5I,mBAAS,IAEnCS,EAAQJ,aAAaC,GAAUA,EAAMI,YAAYD,QACjDD,EAAeH,aAAaC,GAAUA,EAAMC,IAAIC,eAEhDgI,EAAiBK,UACrB,IAAI9E,EAAQ,GACZ,IAAK,IAAD+E,EAAAC,EACFR,EAAY,IAAK3I,EAAU4I,gBAAgB,IAC3C,MAAMQ,QAAiBX,EAAYY,KAAK,GAAI,CAC1CC,OAAQ,8BACRC,OAAQ,CACN,CACElG,KAAMzC,MAIZ+H,EAAY,IAAK3I,EAAU4I,gBAAgB,IACnC,OAARQ,QAAQ,IAARA,GAAc,QAANF,EAARE,EAAU5H,YAAI,IAAA0H,GAAQ,QAARC,EAAdD,EAAgBM,cAAM,IAAAL,GAAtBA,EAAwB/C,KAAKC,IAC3BlC,EAAMI,KAAK,CACTX,GAAIyC,GACJ,IAEJ2C,EAAY7E,EACd,CAAE,OAAO,IAAEsF,EAAG,SAAEL,IACdT,EAAY,IAAK3I,EAAU4I,gBAAgB,GAC7C,GA+BIc,EAA6BC,YAAU,CAC3CC,cAAe,CACbvG,KAAMzC,EACNgD,GAAI,GACJiG,QAAS,IAEXC,iBAAkBlD,IAClBmD,oBAAoB,EACpBpI,SAAWyB,IACY,IAAjBvC,EAAMuD,OACRC,IAAMC,MAAM,0CAEZqB,EAAiBvC,EAAQvC,EAC3B,IAIE8E,EAAmBsD,MAAO7F,EAAQvC,KACtC,MAAMmJ,EAAWnJ,EAAMuF,KAAK6D,IAC1B,MAAM,GAAEjH,KAAOkH,GAASD,EACxB,OAAOC,CAAI,IAEb,IACEvB,EAAY,IAAK3I,EAAU2F,kBAAkB,IAC7C,MAAMyD,QAAiBX,EAAYY,KAAK,GAAI,CAC1CC,OAAQ,2BACRC,OAAQ,CACN,CACElG,KAAMzC,EACNgD,GAAIR,EAAOQ,GACXuG,WAAYH,MAIlBrB,EAAY,IAAK3I,EAAU2F,kBAAkB,IACrB,MAApByD,EAASgB,SACX/F,IAAMgG,QAAQ,yBACd3K,EAAS,uBACTF,EAASkF,YAAS,KAEtB,CAAE,OAAO,IAAE+E,EAAG,SAAEL,IACdT,EAAY,IAAK3I,EAAU2F,kBAAkB,GAC/C,GAGI5F,EAA6B4J,YAAU,CAC3CC,cAAe,CACbvG,KAAMzC,EACNgD,GAAI,GACJiG,QAAS,IAEXC,iBAAkBlD,IAClBmD,oBAAoB,EACpBpI,SAAWyB,IACY,IAAjBvC,EAAMuD,OACRC,IAAMC,MAAM,0CAEZuE,EAAiBzF,EAAQvC,EAC3B,IAIEgI,EAAmBI,MAAO7F,EAAQvC,KACtC,MAAMmJ,EAAWnJ,EAAMuF,KAAK6D,IAC1B,MAAM,GAAEjH,KAAOkH,GAASD,EACxB,OAAOC,CAAI,IAEb,IACEvB,EAAY,IAAK3I,EAAU6I,kBAAkB,IAC7C,MAAMO,QAAiBX,EAAYY,KAAK,GAAI,CAC1CC,OAAQ,2BACRC,OAAQ,CACN,CACElG,KAAMzC,EACNgD,GAAIR,EAAOQ,GACXuG,WAAYH,MAIlBrB,EAAY,IAAK3I,EAAU6I,kBAAkB,IACrB,MAApBO,EAASgB,SACX/F,IAAMgG,QAAQ,yBACd3K,EAAS,uBACTF,EAASkF,YAAS,KAEtB,CAAE,OAAO,IAAE+E,EAAG,SAAEL,IACdT,EAAY,IAAK3I,EAAU6I,kBAAkB,GAC/C,GAiCF,MATgB,CACdD,iBACA9I,cA7IoBmJ,UACpB,IAAK,IAADqB,EACF3B,EAAY,IAAK3I,EAAUF,eAAe,IAC1C,MAAMsJ,QAAiBX,EAAYY,KAAK,GAAI,CAC1CC,OAAQ,2BACRC,OAAQ,CACN,CACElG,KAAMzC,EACNgD,GAAIZ,MAKkC,IAADuH,EAGpCC,EAAAC,EAAAC,EAAAC,EAHP,GADAhC,EAAY,IAAK3I,EAAUF,eAAe,IACZ,eAAlB,OAARsJ,QAAQ,IAARA,GAAc,QAANkB,EAARlB,EAAU5H,YAAI,IAAA8I,OAAN,EAARA,EAAgBhG,OAClBD,IAAMC,MAAc,OAAR8E,QAAQ,IAARA,GAAc,QAANmB,EAARnB,EAAU5H,YAAI,IAAA+I,OAAN,EAARA,EAAgBjG,OAC5B5E,EAAS,4BAETK,EAA2B6K,cACzB,KACQ,OAARxB,QAAQ,IAARA,GAAc,QAANoB,EAARpB,EAAU5H,YAAI,IAAAgJ,GAAQ,QAARC,EAAdD,EAAgBhB,cAAM,IAAAiB,OAAd,EAARA,EAAwB7G,IAE1BpE,EAASkF,YAAiB,OAAR0E,QAAQ,IAARA,GAAc,QAANsB,EAARtB,EAAU5H,YAAI,IAAAkJ,GAAQ,QAARC,EAAdD,EAAgBlB,cAAM,IAAAmB,OAAd,EAARA,EAAwBR,YAE9C,CAAE,OAAO,IAAEV,EAAG,SAAEL,IACdT,EAAY,IAAK3I,EAAUF,eAAe,GAC5C,GAqHA4J,6BACA3J,6BACA+I,aA1BmBG,UACnB,IACEN,EAAY,IAAK3I,EAAU8I,cAAc,UAClBL,EAAYY,KAAK,GAAI,CAC1CC,OAAQ,8BACRC,OAAQ,CACN,CACElG,KAAMzC,EACNgD,GAAIZ,MAIV2F,EAAY,IAAK3I,EAAU8I,cAAc,IACzCtJ,EAASqL,YAAe,OACxBxG,IAAMgG,QAAQ,yBACdzB,GACF,CAAE,OAAO,IAAEa,EAAG,SAAEL,IACdT,EAAY,IAAK3I,EAAU8I,cAAc,GAC3C,GASAC,WACA/I,WAEY,C,0GCjLD8K,MAjBIC,IAAa,IAAZ,GAAE/H,GAAI+H,EACxB,MAAMvL,EAAWC,cAEXoB,EAAQJ,aAAaC,GAAUA,EAAMI,YAAYD,QAEvD,OACEQ,cAAC2J,IAAM,CACL/G,QAASA,IAAMzE,EAASkF,YAAS7D,EAAMoK,QAAQ5E,GAASA,EAAKrD,KAAOA,MACpE+B,MAAO,CAAEmG,QAAS,GAClB3F,KAAK,KACLX,MAAM,SACNd,KAAK,SAAQ1C,SACd,UAEQ,ECdN,MAAM+D,EAAgB,CAC3B,CACElC,KAAM,YACN2C,SAAU,QACVuF,SAAWC,GAAQA,EAAI/K,WAEzB,CACE4C,KAAM,WACN2C,SAAU,QACVuF,SAAWC,GAAQA,EAAI9K,UAEzB,CACE2C,KAAM,SACN2C,SAAU,QACVuF,SAAWC,GAAQA,EAAI7K,QAEzB,CACE0C,KAAM,UACN2C,SAAU,QACVyF,SAAU,QACVF,SAAWC,GAAQA,EAAIpI,GACvBsI,KAAOF,GACE/J,cAACyJ,EAAU,CAAC9H,GAAIoI,EAAIpI,M","file":"static/js/70.44fe4869.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/action_plans_slice\";\nimport useActionPlans from \"../../../../hooks/use_action_plans\";\n\nconst ActionPlansUpdate = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { getEntityById, updateActionPlanController, loadings } =\n    useActionPlans();\n\n  const [slotFormData, setSlotFormData] = useState({\n    ActionsId: \"\",\n    TimingId: \"\",\n    Weight: 0,\n  });\n\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n  const slots = useSelector((state) => state.actionPlans.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.ActionsId.length === 0) {\n      toast.error(\"Please enter ActionsId.\");\n    } else if (slotFormData.TimingId.length === 0) {\n      toast.error(\"Please enter TimingId.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        ActionsId: \"\",\n        TimingId: \"\",\n        Weight: 0,\n      });\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getEntityById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/action_plans\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Action Plan\"\n        data={[{ title: \"Update Action Plan\" }]}\n      />\n      {loadings.getEntityById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getEntityById ? (\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            window.scroll({ top: 0, behavior: \"smooth\" });\n            updateActionPlanController.handleSubmit();\n          }}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Action Plan Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row className=\"border-bottom mb-1\">\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateActionPlanController.values.TPid}\n                    onChange={updateActionPlanController.handleChange}\n                    invalid={\n                      updateActionPlanController.touched.TPid &&\n                      updateActionPlanController.errors.TPid\n                    }\n                  />\n                  {updateActionPlanController.touched.TPid &&\n                  updateActionPlanController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateActionPlanController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* ID */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ID\">\n                    ID\n                  </Label>\n                  <Input\n                    id=\"ID\"\n                    name=\"ID\"\n                    disabled\n                    value={updateActionPlanController.values.ID}\n                    onChange={updateActionPlanController.handleChange}\n                    invalid={\n                      updateActionPlanController.touched.ID &&\n                      updateActionPlanController.errors.ID\n                    }\n                  />\n                  {updateActionPlanController.touched.ID &&\n                  updateActionPlanController.errors.ID ? (\n                    <FormFeedback>\n                      {updateActionPlanController.errors.ID}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n              </Row>\n              {/* slots */}\n              <Row>\n                <Col xs=\"12\">\n                  <CardTitle>Actions</CardTitle>\n                </Col>\n                {/* ActionsId */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ActionsId\">\n                    ActionsId\n                  </Label>\n                  <Input\n                    value={slotFormData.ActionsId}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        ActionsId: e.target.value,\n                      })\n                    }\n                    id=\"ActionsId\"\n                    name=\"ActionsId\"\n                  />\n                </Col>\n                {/* TimingId */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TimingId\">\n                    TimingId\n                  </Label>\n                  <Input\n                    id=\"TimingId\"\n                    name=\"TimingId\"\n                    value={slotFormData.TimingId}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        TimingId: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* Weight */}\n                <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Weight\">\n                    Weight\n                  </Label>\n                  <Input\n                    type=\"number\"\n                    id=\"Weight\"\n                    name=\"Weight\"\n                    value={slotFormData.Weight}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Weight: parseFloat(e.target.value),\n                      })\n                    }\n                  />\n                </Col>\n                {/* add button */}\n                <Col\n                  xs=\"12\"\n                  sm=\"6\"\n                  md=\"3\"\n                  className=\"mb-1 d-flex align-items-end\"\n                >\n                  <CustomButton\n                    onClick={handleAddSlot}\n                    outline\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Add\n                  </CustomButton>\n                </Col>\n                {/* datatable */}\n                <Col xs=\"12\">\n                  <DataTable\n                    noDataComponent={\n                      <div style={{ margin: \"24px 0\" }}>\n                        No Action Plan Added Yet.\n                      </div>\n                    }\n                    noHeader\n                    columns={slots_columns}\n                    className=\"react-dataTable\"\n                    style={{ background: \"red\" }}\n                    sortIcon={<ChevronDown size={10} />}\n                    data={slots}\n                    theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                  />\n                </Col>\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.createActionPlan}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default ActionPlansUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { setDeleteModal, setSlots } from \"../redux/action_plans_slice\";\n\nconst useActionPlans = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n  const [loadings, setLoadings] = useState({\n    getActionPlans: false,\n    getEntityById: false,\n    createActionPlan: false,\n    updateActionPlan: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.actionPlans.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getActionPlans = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getActionPlans: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPActionPlanIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getActionPlans: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getActionPlans: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPActionPlan\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/action_plans\");\n      } else {\n        updateActionPlanController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        dispatch(setSlots(response?.data?.result?.ActionPlan));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createActionPlanController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      Actions: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one action plan.\");\n      } else {\n        createActionPlan(values, slots);\n      }\n    },\n  });\n\n  const createActionPlan = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createActionPlan: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPActionPlan\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            ActionPlan: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createActionPlan: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/action_plans\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createActionPlan: false });\n    }\n  };\n\n  const updateActionPlanController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      Actions: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one action plan.\");\n      } else {\n        updateActionPlan(values, slots);\n      }\n    },\n  });\n\n  const updateActionPlan = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateActionPlan: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPActionPlan\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            ActionPlan: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateActionPlan: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/action_plans\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateActionPlan: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPActionPlan\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getActionPlans();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getActionPlans,\n    getEntityById,\n    createActionPlanController,\n    updateActionPlanController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useActionPlans;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/action_plans_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.actionPlans.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import { Button } from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"ActionsId\",\n    minWidth: \"100px\",\n    selector: (row) => row.ActionsId,\n  },\n  {\n    name: \"TimingId\",\n    minWidth: \"100px\",\n    selector: (row) => row.TimingId,\n  },\n  {\n    name: \"Weight\",\n    minWidth: \"100px\",\n    selector: (row) => row.Weight,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}