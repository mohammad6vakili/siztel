{"version":3,"sources":["views/rules/rates/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","hooks/use_rates.js","views/rules/rates/root/components/slot_action.jsx","views/rules/rates/root/datatable/slots_columns.js"],"names":["RatesUpdate","navigate","useNavigate","_useSearchParams","useSearchParams","searchParams","_slicedToArray","skin","useSkin","dispatch","useDispatch","_useRates","useRates","getEntityById","updateRateController","loadings","_useState","useState","ConnectFee","RateUnit","RateIncrement","GroupIntervalStart","Rate","_useState2","slotFormData","setSlotFormData","slots","useSelector","state","rates","getAllTpIdsLoading","app","selectedTpId","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","ProgressLoading","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","_objectSpread","parseFloat","target","type","CustomButton","onClick","array","_toConsumableArray","length","toast","error","push","Math","random","setSlots","outline","color","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","updateRate","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","Account","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","updateAccountSchema","httpService","useHttp","getRates","createRate","deleteEntity","setLoadings","_useState3","_useState4","listData","setListData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_response$data","_response$data$result","response","wrap","_context","prev","next","post","method","params","sent","result","t0","err","stop","apply","arguments","_ref3","_callee2","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","_context2","setFieldValue","RateSlots","_x","createRateController","useFormik","initialValues","validationSchema","enableReinitialize","_ref5","_callee3","newSlots","_context3","obj","_objectWithoutProperties","_excluded","status","success","_x2","_x3","_ref7","_callee4","_context4","_excluded2","_x4","_x5","_ref9","_callee5","_context5","setDeleteModal","_x6","SlotAction","Button","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/74.e14eebd3.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/rates_slice\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport useRates from \"../../../../hooks/use_rates\";\n\nconst RatesUpdate = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n\n  const { getEntityById, updateRateController, loadings } = useRates();\n\n  const [slotFormData, setSlotFormData] = useState({\n    ConnectFee: 0,\n    RateUnit: \"\",\n    RateIncrement: \"\",\n    GroupIntervalStart: \"\",\n    Rate: 0,\n  });\n\n  const slots = useSelector((state) => state.rates.slots);\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.RateUnit.length === 0) {\n      toast.error(\"Please enter RateUnit.\");\n    } else if (slotFormData.RateIncrement.length === 0) {\n      toast.error(\"Please enter RateIncrement.\");\n    } else if (slotFormData.GroupIntervalStart.length === 0) {\n      toast.error(\"Please enter GroupIntervalStart.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        ConnectFee: 0,\n        RateUnit: \"\",\n        RateIncrement: \"\",\n        GroupIntervalStart: \"\",\n        Rate: 0,\n      });\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getEntityById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/rates\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs title=\"Update Rate\" data={[{ title: \"Update Rate\" }]} />\n      {loadings.getEntityById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getEntityById ? (\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            window.scroll({ top: 0, behavior: \"smooth\" });\n            updateRateController.handleSubmit();\n          }}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Rate Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row className=\"border-bottom mb-1\">\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateRateController.values.TPid}\n                    onChange={updateRateController.handleChange}\n                    invalid={\n                      updateRateController.touched.TPid &&\n                      updateRateController.errors.TPid\n                    }\n                  />\n                  {updateRateController.touched.TPid &&\n                  updateRateController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateRateController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* ID */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ID\">\n                    ID\n                  </Label>\n                  <Input\n                    id=\"ID\"\n                    name=\"ID\"\n                    disabled\n                    value={updateRateController.values.ID}\n                    onChange={updateRateController.handleChange}\n                    invalid={\n                      updateRateController.touched.ID &&\n                      updateRateController.errors.ID\n                    }\n                  />\n                  {updateRateController.touched.ID &&\n                  updateRateController.errors.ID ? (\n                    <FormFeedback>\n                      {updateRateController.errors.ID}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n              </Row>\n              {/* RateSlots */}\n              <Row>\n                <Col xs=\"12\">\n                  <CardTitle>Rate Slots</CardTitle>\n                </Col>\n                {/* ConnectFee */}\n                <Col xs=\"12\" sm=\"6\" md=\"2\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ConnectFee\">\n                    Connect Fee\n                  </Label>\n                  <Input\n                    value={slotFormData.ConnectFee}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        ConnectFee: parseFloat(e.target.value),\n                      })\n                    }\n                    type=\"number\"\n                    id=\"ConnectFee\"\n                    name=\"ConnectFee\"\n                  />\n                </Col>\n                {/* RateUnit */}\n                <Col xs=\"12\" sm=\"6\" md=\"2\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"RateUnit\">\n                    Rate Unit\n                  </Label>\n                  <Input\n                    id=\"RateUnit\"\n                    name=\"RateUnit\"\n                    value={slotFormData.RateUnit}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        RateUnit: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* RateIncrement */}\n                <Col xs=\"12\" sm=\"6\" md=\"2\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"RateIncrement\">\n                    Rate Increment\n                  </Label>\n                  <Input\n                    id=\"RateIncrement\"\n                    name=\"RateIncrement\"\n                    value={slotFormData.RateIncrement}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        RateIncrement: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* GroupIntervalStart */}\n                <Col xs=\"12\" sm=\"6\" md=\"2\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"GroupIntervalStart\">\n                    Group IntervalStart\n                  </Label>\n                  <Input\n                    id=\"GroupIntervalStart\"\n                    name=\"GroupIntervalStart\"\n                    value={slotFormData.GroupIntervalStart}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        GroupIntervalStart: e.target.value,\n                      })\n                    }\n                  />\n                </Col>\n                {/* Rate */}\n                <Col xs=\"12\" sm=\"6\" md=\"2\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Rate\">\n                    Rate\n                  </Label>\n                  <Input\n                    type=\"number\"\n                    id=\"Rate\"\n                    name=\"Rate\"\n                    value={slotFormData.Rate}\n                    onChange={(e) =>\n                      setSlotFormData({\n                        ...slotFormData,\n                        Rate: parseFloat(e.target.value),\n                      })\n                    }\n                  />\n                </Col>\n                {/* add button */}\n                <Col\n                  xs=\"12\"\n                  sm=\"6\"\n                  md=\"2\"\n                  className=\"mb-1 d-flex align-items-end\"\n                >\n                  <CustomButton\n                    onClick={handleAddSlot}\n                    outline\n                    color=\"primary\"\n                    type=\"button\"\n                  >\n                    Add\n                  </CustomButton>\n                </Col>\n                {/* datatable */}\n                <Col xs=\"12\">\n                  <DataTable\n                    noDataComponent={\n                      <div style={{ margin: \"24px 0\" }}>\n                        No Rate Slot Added Yet.\n                      </div>\n                    }\n                    noHeader\n                    columns={slots_columns}\n                    className=\"react-dataTable\"\n                    style={{ background: \"red\" }}\n                    sortIcon={<ChevronDown size={10} />}\n                    data={slots}\n                    theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                  />\n                </Col>\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.updateRate}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default RatesUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n\nexport const updateAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\nimport { setDeleteModal, setSlots } from \"../redux/rates_slice\";\n\nconst useRates = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n  const [loadings, setLoadings] = useState({\n    getRates: false,\n    getEntityById: false,\n    createRate: false,\n    updateRate: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const slots = useSelector((state) => state.rates.slots);\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getRates = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getRates: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPRateIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getRates: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getRates: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/rates\");\n      } else {\n        updateRateController.setFieldValue(\"ID\", response?.data?.result?.ID);\n        dispatch(setSlots(response?.data?.result?.RateSlots));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createRateController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      RateSlots: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one rate slot.\");\n      } else {\n        createRate(values, slots);\n      }\n    },\n  });\n\n  const createRate = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createRate: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            RateSlots: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createRate: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/rates\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createRate: false });\n    }\n  };\n\n  const updateRateController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      RateSlots: [],\n    },\n    validationSchema: createActionSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one rate slot.\");\n      } else {\n        updateRate(values, slots);\n      }\n    },\n  });\n\n  const updateRate = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateRate: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            RateSlots: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateRate: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/rates\");\n        dispatch(setSlots([]));\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateRate: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPRate\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getRates();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getRates,\n    getEntityById,\n    createRateController,\n    updateRateController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useRates;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/rates_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.rates.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"ConnectFee\",\n    minWidth: \"100px\",\n    selector: (row) => row.ConnectFee,\n  },\n  {\n    name: \"RateUnit\",\n    minWidth: \"100px\",\n    selector: (row) => row.RateUnit,\n  },\n  {\n    name: \"RateIncrement\",\n    minWidth: \"100px\",\n    selector: (row) => row.RateIncrement,\n  },\n  {\n    name: \"GroupIntervalStart\",\n    minWidth: \"100px\",\n    selector: (row) => row.GroupIntervalStart,\n  },\n  {\n    name: \"Rate\",\n    minWidth: \"100px\",\n    selector: (row) => row.Rate,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}