{"version":3,"sources":["views/rules/destination_rates/update/index.jsx","@core/components/breadcrumbs/index.js","assets/loadings/button_loading.svg","components/button/index.js","hooks/use_http.js","utility/schemas/index.js","hooks/use_destination_rates.js","views/rules/destination_rates/root/components/slot_action.jsx","views/rules/destination_rates/root/datatable/slots_columns.js"],"names":["DestinationRatesUpdate","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","searchParams","useSearchParams","updateDestinationRateController","loadings","useDestinationRates","slotFormData","setSlotFormData","useState","DestinationId","RateId","RoundingMethod","RoundingDecimals","MaxCost","MaxCostStrategy","slots","useSelector","state","destinationRates","useEffect","entity_id","get","toast","success","concat","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","type","CustomButton","onClick","handleAddSlot","array","length","error","push","Math","random","setSlots","outline","color","DataTable","noDataComponent","style","margin","noHeader","columns","slots_columns","background","sortIcon","ChevronDown","size","theme","CardFooter","loading","updateDestinationRate","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","active","classnames","_ref","Button","disabled","width","src","loadingAnimation","alt","useHttp","httpService","axios","create","baseURL","process","headers","Accept","interceptors","response","use","async","message","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","setLoadings","getDestinationRates","createDestinationRate","deleteDestinationRate","paginates","setPaginates","current","total","createDestinationRateController","useFormik","initialValues","DestinationRates","validationSchema","newSlots","obj","rest","post","method","params","status","err","SlotAction","filter","padding","selector","row","maxWidth","cell"],"mappings":"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","file":"static/js/77.a158d6bc.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport DataTable from \"react-data-table-component\";\nimport { ChevronDown } from \"react-feather\";\nimport { slots_columns } from \"../root/datatable/slots_columns\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport { useSkin } from \"@hooks/useSkin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../redux/destination_rates_slice\";\nimport useDestinationRates from \"../../../../hooks/use_destination_rates\";\n\nconst DestinationRatesUpdate = () => {\n  const { skin } = useSkin();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n\n  const { updateDestinationRateController, loadings } = useDestinationRates();\n\n  const [slotFormData, setSlotFormData] = useState({\n    DestinationId: \"\",\n    RateId: \"\",\n    RoundingMethod: \"\",\n    RoundingDecimals: 0,\n    MaxCost: 0,\n    MaxCostStrategy: \"\",\n  });\n\n  const slots = useSelector((state) => state.destinationRates.slots);\n\n  const handleAddSlot = () => {\n    let array = [...slots];\n    if (slotFormData.DestinationId.length === 0) {\n      toast.error(\"Please enter DestinationId.\");\n    } else if (slotFormData.RateId.length === 0) {\n      toast.error(\"Please enter RateId.\");\n    } else if (slotFormData.RoundingMethod.length === 0) {\n      toast.error(\"Please enter RoundingMethod.\");\n    } else if (slotFormData.MaxCostStrategy.length === 0) {\n      toast.error(\"Please enter MaxCostStrategy.\");\n    } else {\n      array.push({ ...slotFormData, id: Math.random() * 326782382 });\n      dispatch(setSlots(array));\n      setSlotFormData({\n        DestinationId: \"\",\n        RateId: \"\",\n        RoundingMethod: \"\",\n        RoundingDecimals: 0,\n        MaxCost: 0,\n        MaxCostStrategy: \"\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      toast.success(`You are in update mode for ${entity_id}`);\n    } else {\n      navigate(\"/rules/destination_rates\");\n    }\n  }, []);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Destination Rate\"\n        data={[{ title: \"Update Destination Rate\" }]}\n      />\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          window.scroll({ top: 0, behavior: \"smooth\" });\n          updateDestinationRateController.handleSubmit();\n        }}\n        className=\"d-flex flex-column align-items-center\"\n      >\n        <Card className=\"w-100\">\n          {/* card header */}\n          <CardHeader className=\"border-bottom\">\n            <CardTitle>Update Destination Rate Form</CardTitle>\n          </CardHeader>\n          {/* card body */}\n          <CardBody className=\"pt-2\">\n            {/* form fields */}\n            <Row className=\"border-bottom mb-1\">\n              {/* TPid */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"TPid\">\n                  TPid\n                </Label>\n                <Input\n                  id=\"TPid\"\n                  name=\"TPid\"\n                  value={updateDestinationRateController.values.TPid}\n                  onChange={updateDestinationRateController.handleChange}\n                  invalid={\n                    updateDestinationRateController.touched.TPid &&\n                    updateDestinationRateController.errors.TPid\n                  }\n                />\n                {updateDestinationRateController.touched.TPid &&\n                updateDestinationRateController.errors.TPid ? (\n                  <FormFeedback>\n                    {updateDestinationRateController.errors.TPid}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* ID */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"ID\">\n                  ID\n                </Label>\n                <Input\n                  id=\"ID\"\n                  name=\"ID\"\n                  value={updateDestinationRateController.values.ID}\n                  onChange={updateDestinationRateController.handleChange}\n                  invalid={\n                    updateDestinationRateController.touched.ID &&\n                    updateDestinationRateController.errors.ID\n                  }\n                />\n                {updateDestinationRateController.touched.ID &&\n                updateDestinationRateController.errors.ID ? (\n                  <FormFeedback>\n                    {updateDestinationRateController.errors.ID}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n            </Row>\n            {/* slots */}\n            <Row>\n              <Col xs=\"12\">\n                <CardTitle>Destination Rates</CardTitle>\n              </Col>\n              {/* DestinationId */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"DestinationId\">\n                  DestinationId\n                </Label>\n                <Input\n                  value={slotFormData.DestinationId}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      DestinationId: e.target.value,\n                    })\n                  }\n                  id=\"DestinationId\"\n                  name=\"DestinationId\"\n                />\n              </Col>\n              {/* RateId */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RateId\">\n                  RateId\n                </Label>\n                <Input\n                  id=\"RateId\"\n                  name=\"RateId\"\n                  value={slotFormData.RateId}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RateId: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* RoundingMethod */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RoundingMethod\">\n                  RoundingMethod\n                </Label>\n                <Input\n                  id=\"RoundingMethod\"\n                  name=\"RoundingMethod\"\n                  value={slotFormData.RoundingMethod}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RoundingMethod: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* RoundingDecimals */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"RoundingDecimals\">\n                  RoundingDecimals\n                </Label>\n                <Input\n                  id=\"RoundingDecimals\"\n                  name=\"RoundingDecimals\"\n                  value={slotFormData.RoundingDecimals}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      RoundingDecimals: e.target.value,\n                    })\n                  }\n                  type=\"number\"\n                />\n              </Col>\n              {/* MaxCost */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"MaxCost\">\n                  MaxCost\n                </Label>\n                <Input\n                  type=\"number\"\n                  id=\"MaxCost\"\n                  name=\"MaxCost\"\n                  value={slotFormData.MaxCost}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      MaxCost: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* MaxCostStrategy */}\n              <Col xs=\"12\" sm=\"6\" md=\"3\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"MaxCostStrategy\">\n                  MaxCostStrategy\n                </Label>\n                <Input\n                  id=\"MaxCostStrategy\"\n                  name=\"MaxCostStrategy\"\n                  value={slotFormData.MaxCostStrategy}\n                  onChange={(e) =>\n                    setSlotFormData({\n                      ...slotFormData,\n                      MaxCostStrategy: e.target.value,\n                    })\n                  }\n                />\n              </Col>\n              {/* add button */}\n              <Col\n                xs=\"12\"\n                sm=\"6\"\n                md=\"3\"\n                className=\"mb-1 d-flex align-items-end\"\n              >\n                <CustomButton\n                  onClick={handleAddSlot}\n                  outline\n                  color=\"primary\"\n                  type=\"button\"\n                >\n                  Add\n                </CustomButton>\n              </Col>\n              {/* datatable */}\n              <Col xs=\"12\">\n                <DataTable\n                  noDataComponent={\n                    <div style={{ margin: \"24px 0\" }}>\n                      No Destination Rate Added Yet.\n                    </div>\n                  }\n                  noHeader\n                  columns={slots_columns}\n                  className=\"react-dataTable\"\n                  style={{ background: \"red\" }}\n                  sortIcon={<ChevronDown size={10} />}\n                  data={slots}\n                  theme={skin === \"dark\" ? \"darkTheme\" : \"\"}\n                />\n              </Col>\n            </Row>\n          </CardBody>\n          {/* card footer */}\n          <CardFooter className=\"border-top d-flex justify-content-center\">\n            {/* submit button */}\n            <CustomButton\n              loading={loadings.updateDestinationRate}\n              type=\"submit\"\n              color=\"primary\"\n              style={{ minWidth: 150 }}\n            >\n              Submit\n            </CustomButton>\n          </CardFooter>\n        </Card>\n      </Form>\n    </Fragment>\n  );\n};\nexport default DestinationRatesUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","export default __webpack_public_path__ + \"static/media/button_loading.bbd49f26.svg\";","import { Button } from \"reactstrap\";\nimport loadingAnimation from \"../../assets/loadings/button_loading.svg\";\n\nconst CustomButton = ({ loading, children, ...props }) => {\n  return (\n    <Button disabled={loading} {...props}>\n      {!loading ? children : null}\n      {loading ? <img width={14} src={loadingAnimation} alt=\"loading\" /> : null}\n    </Button>\n  );\n};\nexport default CustomButton;\n","import axios from \"axios\";\nimport { message } from \"antd\";\n\nconst useHttp = () => {\n  const httpService = axios.create({\n    baseURL: process.env.REACT_APP_BASE_URL,\n    headers: {\n      Accept: \"application/json\",\n    },\n  });\n\n  httpService.interceptors.response.use(\n    (response) => response,\n    async ({ error, response }) => {\n      message.error(\"Server Error!\");\n    }\n  );\n\n  const exports = { httpService };\n\n  return exports;\n};\n\nexport default useHttp;\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\n// export const registerSchema = yup.object({\n//   first_name: yup.string().required(\"The first name field is required.\"),\n//   last_name: yup.string().required(\"The last name field is required.\"),\n//   email: yup\n//     .string()\n//     .required(\"The email field is required.\")\n//     .email(\"The entered email structure is incorrect.\"),\n//   password: yup.string().required(\"The password field is required.\"),\n//   password_confirmation: yup\n//     .string()\n//     .required(\"The repeat password field is required.\"),\n//   privacy: yup.bool().required(\"\"),\n// });\n","import { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport { useSelector } from \"react-redux\";\nimport useHttp from \"./use_http\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createActionSchema } from \"../utility/schemas/index\";\n\nconst useDestinationRates = () => {\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n  const [loadings, setLoadings] = useState({\n    getDestinationRates: false,\n    createDestinationRate: false,\n    updateDestinationRate: false,\n    deleteDestinationRate: false,\n  });\n\n  const [paginates, setPaginates] = useState({\n    current: 1,\n    total: 1,\n  });\n\n  const slots = useSelector((state) => state.destinationRates.slots);\n\n  const createDestinationRateController = useFormik({\n    initialValues: {\n      TPid: \"\",\n      ID: \"\",\n      DestinationRates: [],\n    },\n    validationSchema: createActionSchema,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one destination rate.\");\n      } else {\n        createDestinationRate(values, slots);\n      }\n    },\n  });\n\n  const createDestinationRate = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, createDestinationRate: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestinationRate\",\n        params: [\n          {\n            TPid: values.TPid,\n            ID: values.ID,\n            DestinationRates: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createDestinationRate: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/destination_rates\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createDestinationRate: false });\n    }\n  };\n\n  const updateDestinationRateController = useFormik({\n    initialValues: {\n      TPid: \"\",\n      ID: \"\",\n      DestinationRates: [],\n    },\n    validationSchema: createActionSchema,\n    onSubmit: (values) => {\n      if (slots.length === 0) {\n        toast.error(\"You must add at least one destination rate.\");\n      } else {\n        updateDestinationRate(values, slots);\n      }\n    },\n  });\n\n  const updateDestinationRate = async (values, slots) => {\n    const newSlots = slots.map((obj) => {\n      const { id, ...rest } = obj;\n      return rest;\n    });\n    try {\n      setLoadings({ ...loadings, updateDestinationRate: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestinationRate\",\n        params: [\n          {\n            TPid: values.TPid,\n            ID: values.ID,\n            DestinationRates: newSlots,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateDestinationRate: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Updated!\");\n        navigate(\"/rules/destination_rates\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateDestinationRate: false });\n    }\n  };\n\n  const exports = {\n    createDestinationRateController,\n    updateDestinationRateController,\n    loadings,\n    paginates,\n    setPaginates,\n  };\n  return exports;\n};\nexport default useDestinationRates;\n","import { Button } from \"reactstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setSlots } from \"../../../../../redux/destination_rates_slice\";\n\nconst SlotAction = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const slots = useSelector((state) => state.destinationRates.slots);\n\n  return (\n    <Button\n      onClick={() => dispatch(setSlots(slots.filter((item) => item.id !== id)))}\n      style={{ padding: 6 }}\n      size=\"sm\"\n      color=\"danger\"\n      type=\"button\"\n    >\n      Delete\n    </Button>\n  );\n};\nexport default SlotAction;\n","import SlotAction from \"../components/slot_action\";\n\nexport const slots_columns = [\n  {\n    name: \"DestinationId\",\n    minWidth: \"100px\",\n    selector: (row) => row.DestinationId,\n  },\n  {\n    name: \"RateId\",\n    minWidth: \"100px\",\n    selector: (row) => row.RateId,\n  },\n  {\n    name: \"RoundingMethod\",\n    minWidth: \"100px\",\n    selector: (row) => row.RoundingMethod,\n  },\n  {\n    name: \"RoundingDecimals\",\n    minWidth: \"100px\",\n    selector: (row) => row.RoundingDecimals,\n  },\n  {\n    name: \"MaxCost\",\n    minWidth: \"100px\",\n    selector: (row) => row.MaxCost,\n  },\n  {\n    name: \"MaxCostStrategy\",\n    minWidth: \"100px\",\n    selector: (row) => row.MaxCostStrategy,\n  },\n  {\n    name: \"Actions\",\n    minWidth: \"120px\",\n    maxWidth: \"120px\",\n    selector: (row) => row.id,\n    cell: (row) => {\n      return <SlotAction id={row.id} />;\n    },\n  },\n];\n"],"sourceRoot":""}