{"version":3,"sources":["views/rules/destinations/update/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","components/progress_loading/index.js","hooks/use_destionations.js"],"names":["DestinationsUpdate","navigate","useNavigate","searchParams","useSearchParams","getEntityById","updateDestinationController","loadings","useDestinations","PrefixesValue","setPrefixesValue","useState","getAllTpIdsLoading","useSelector","state","app","selectedTpId","useEffect","entity_id","get","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","ProgressLoading","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","disabled","value","values","TPid","onChange","handleChange","invalid","touched","errors","FormFeedback","ID","target","Prefixes","type","style","right","borderRadius","border","background","width","height","fontSize","color","cursor","onClick","length","toast","error","array","push","setFieldValue","display","map","item","index","marginLeft","filter","intem","i","IoMdClose","CardFooter","CustomButton","loading","updateDestination","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","Wrapper","link","isLastItem","active","classnames","createActionSchema","yup","required","createChargerSchema","Tenant","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","Account","ActionPlanIDs","nullable","ActionTriggerIDs","Balances","dispatch","useDispatch","httpService","useHttp","setLoadings","getDestinations","createDestination","deleteEntity","listData","setListData","async","_response$data","_response$data$result","response","post","method","params","result","err","createDestinationController","useFormik","initialValues","validationSchema","enableReinitialize","status","success","_response$data2","_response$data3","_response$data4","_response$data4$resul","_response$data5","_response$data5$resul","setDeleteModal"],"mappings":"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","file":"static/js/80.f0de216c.chunk.js","sourcesContent":["import { Fragment, useState, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport toast from \"react-hot-toast\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport ProgressLoading from \"../../../../components/progress_loading\";\nimport CustomButton from \"../../../../components/button\";\nimport useDestinations from \"../../../../hooks/use_destionations\";\nimport { IoMdClose } from \"react-icons/io\";\nimport { useSelector } from \"react-redux\";\n\nconst DestinationsUpdate = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { getEntityById, updateDestinationController, loadings } =\n    useDestinations();\n\n  const [PrefixesValue, setPrefixesValue] = useState(\"\");\n\n  const getAllTpIdsLoading = useSelector(\n    (state) => state.app.getAllTpIdsLoading\n  );\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  useEffect(() => {\n    let entity_id = searchParams.get(\"entity_id\");\n    if (entity_id) {\n      if (selectedTpId) {\n        getEntityById(entity_id);\n      }\n    } else {\n      navigate(\"/rules/destinations\");\n    }\n  }, [selectedTpId]);\n\n  return (\n    <Fragment>\n      <Breadcrumbs\n        title=\"Update Destination\"\n        data={[{ title: \"Update Destination\" }]}\n      />\n      {loadings.getEntityById ? <ProgressLoading /> : null}\n      {!getAllTpIdsLoading && !loadings.getEntityById ? (\n        <Form\n          onSubmit={(e) => {\n            e.preventDefault();\n            window.scroll({ top: 0, behavior: \"smooth\" });\n            updateDestinationController.handleSubmit();\n          }}\n          className=\"d-flex flex-column align-items-center\"\n        >\n          <Card className=\"w-100\">\n            {/* card header */}\n            <CardHeader className=\"border-bottom\">\n              <CardTitle>Update Destination Form</CardTitle>\n            </CardHeader>\n            {/* card body */}\n            <CardBody className=\"pt-2\">\n              {/* form fields */}\n              <Row>\n                {/* TPid */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"TPid\">\n                    TPid\n                  </Label>\n                  <Input\n                    id=\"TPid\"\n                    name=\"TPid\"\n                    disabled\n                    value={updateDestinationController.values.TPid}\n                    onChange={updateDestinationController.handleChange}\n                    invalid={\n                      updateDestinationController.touched.TPid &&\n                      updateDestinationController.errors.TPid\n                    }\n                  />\n                  {updateDestinationController.touched.TPid &&\n                  updateDestinationController.errors.TPid ? (\n                    <FormFeedback>\n                      {updateDestinationController.errors.TPid}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* ID */}\n                <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"ID\">\n                    ID\n                  </Label>\n                  <Input\n                    id=\"ID\"\n                    name=\"ID\"\n                    disabled\n                    value={updateDestinationController.values.ID}\n                    onChange={updateDestinationController.handleChange}\n                    invalid={\n                      updateDestinationController.touched.ID &&\n                      updateDestinationController.errors.ID\n                    }\n                  />\n                  {updateDestinationController.touched.ID &&\n                  updateDestinationController.errors.ID ? (\n                    <FormFeedback>\n                      {updateDestinationController.errors.ID}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {/* Prefixes */}\n                <Col xs=\"12\" className=\"mb-1\">\n                  <Label className=\"form-label\" for=\"Prefixes\">\n                    Prefixes\n                  </Label>\n                  <div className=\"position-relative d-flex align-items-center\">\n                    <Input\n                      id=\"Prefixes\"\n                      name=\"Prefixes\"\n                      value={PrefixesValue}\n                      onChange={(e) => setPrefixesValue(e.target.value)}\n                      invalid={\n                        updateDestinationController.touched.Prefixes &&\n                        updateDestinationController.errors.Prefixes\n                      }\n                    />\n                    <button\n                      type=\"button\"\n                      style={{\n                        right: 35,\n                        borderRadius: \"50%\",\n                        border: \"none\",\n                        background: \"transparent\",\n                        width: 30,\n                        height: 30,\n                        border: \"1px solid rgba(200,200,200,.5)\",\n                        fontSize: 18,\n                        color: \"#73bcf0\",\n                        cursor: \"pointer\",\n                      }}\n                      className=\"position-absolute\"\n                      onClick={() => {\n                        if (PrefixesValue.length === 0) {\n                          toast.error(\"Enter Filter ID value.\");\n                        } else {\n                          let array = [\n                            ...updateDestinationController.values.Prefixes,\n                          ];\n                          array.push(PrefixesValue);\n                          updateDestinationController.setFieldValue(\n                            \"Prefixes\",\n                            array\n                          );\n                          setPrefixesValue(\"\");\n                        }\n                      }}\n                    >\n                      +\n                    </button>\n                  </div>\n                  {updateDestinationController.touched.Prefixes &&\n                  updateDestinationController.errors.Prefixes ? (\n                    <FormFeedback style={{ display: \"block\" }}>\n                      {updateDestinationController.errors.Prefixes}\n                    </FormFeedback>\n                  ) : null}\n                </Col>\n                {updateDestinationController.values.Prefixes.map(\n                  (item, index) => (\n                    <Col xs=\"12\" className=\"mb-1 d-flex align-items-center\">\n                      <span>{index + 1} -</span>\n                      <span>{item}</span>\n                      <button\n                        type=\"button\"\n                        style={{\n                          background: \"transparent\",\n                          border: \"none\",\n                          marginLeft: \"auto\",\n                        }}\n                        onClick={() => {\n                          let array = [\n                            ...updateDestinationController.values.Prefixes,\n                          ];\n                          array = array.filter((intem, i) => i !== index);\n                          updateDestinationController.setFieldValue(\n                            \"Prefixes\",\n                            array\n                          );\n                        }}\n                      >\n                        <IoMdClose style={{ fontSize: 14, color: \"red\" }} />\n                      </button>\n                    </Col>\n                  )\n                )}\n              </Row>\n            </CardBody>\n            {/* card footer */}\n            <CardFooter className=\"border-top d-flex justify-content-center\">\n              {/* submit button */}\n              <CustomButton\n                loading={loadings.updateDestination}\n                type=\"submit\"\n                color=\"primary\"\n                style={{ minWidth: 150 }}\n              >\n                Submit\n              </CustomButton>\n            </CardFooter>\n          </Card>\n        </Form>\n      ) : null}\n    </Fragment>\n  );\n};\nexport default DestinationsUpdate;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import React from \"react\";\nimport \"./styles/progress_loading.scss\";\n\nconst ProgressLoading = () => {\n  return (\n    <div className=\"linear-activity\">\n      <div className=\"indeterminate\"></div>\n    </div>\n  );\n};\nexport default ProgressLoading;\n","import { useState } from \"react\";\nimport { createDestinationSchema } from \"../utility/schemas/index\";\nimport { useFormik } from \"formik\";\nimport toast from \"react-hot-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport useHttp from \"./use_http\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setDeleteModal } from \"../redux/destinations_slice\";\n\nconst useDestinations = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n  const [loadings, setLoadings] = useState({\n    getDestinations: false,\n    getEntityById: false,\n    createDestination: false,\n    updateDestination: false,\n    deleteEntity: false,\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getDestinations = async () => {\n    let array = [];\n    try {\n      setLoadings({ ...loadings, getDestinations: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPDestinationIDs\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getDestinations: false });\n      response?.data?.result?.map((item) => {\n        array.push({\n          ID: item,\n        });\n      });\n      setListData(array);\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getDestinations: false });\n    }\n  };\n\n  const getEntityById = async (id) => {\n    try {\n      setLoadings({ ...loadings, getEntityById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPDestination\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getEntityById: false });\n      if (response?.data?.error === \"NOT_FOUND\") {\n        toast.error(response?.data?.error);\n        navigate(\"/rules/destinations\");\n      } else {\n        updateDestinationController.setFieldValue(\n          \"ID\",\n          response?.data?.result?.ID\n        );\n        updateDestinationController.setFieldValue(\n          \"Prefixes\",\n          response?.data?.result?.Prefixes\n        );\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getEntityById: false });\n    }\n  };\n\n  const createDestinationController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      Prefixes: [],\n    },\n    validationSchema: createDestinationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      createDestination(values);\n    },\n  });\n\n  const createDestination = async (values) => {\n    try {\n      setLoadings({ ...loadings, createDestination: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestination\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            Prefixes: values.Prefixes,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, createDestination: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/destinations\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createDestination: false });\n    }\n  };\n\n  const updateDestinationController = useFormik({\n    initialValues: {\n      TPid: selectedTpId,\n      ID: \"\",\n      Prefixes: [],\n    },\n    validationSchema: createDestinationSchema,\n    enableReinitialize: true,\n    onSubmit: (values) => {\n      updateDestination(values);\n    },\n  });\n\n  const updateDestination = async (values) => {\n    try {\n      setLoadings({ ...loadings, updateDestination: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.SetTPDestination\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: values.ID,\n            Prefixes: values.Prefixes,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, updateDestination: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/rules/destinations\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, updateDestination: false });\n    }\n  };\n\n  const deleteEntity = async (id) => {\n    try {\n      setLoadings({ ...loadings, deleteEntity: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.RemoveTPDestination\",\n        params: [\n          {\n            TPid: selectedTpId,\n            ID: id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, deleteEntity: false });\n      dispatch(setDeleteModal(null));\n      toast.success(\"Successfully Deleted.\");\n      getDestinations();\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, deleteEntity: false });\n    }\n  };\n\n  const exports = {\n    getDestinations,\n    getEntityById,\n    createDestinationController,\n    updateDestinationController,\n    deleteEntity,\n    listData,\n    loadings,\n  };\n  return exports;\n};\nexport default useDestinations;\n"],"sourceRoot":""}