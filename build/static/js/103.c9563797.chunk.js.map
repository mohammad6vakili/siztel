{"version":3,"sources":["views/admin/accounts/new/index.jsx","@core/components/breadcrumbs/index.js","utility/schemas/index.js","hooks/use_accounts.js","constant/balance_data.js"],"names":["AccountsNew","getActionPlans","getActionTriggers","createAccountController","actionPlans","actionTriggers","loadings","getActionPlansLoading","getActionTriggersLoading","useAccounts","selectedTpId","useSelector","state","app","useEffect","_jsxs","Fragment","children","_jsx","Breadcrumbs","title","data","Form","onSubmit","e","preventDefault","window","scroll","top","behavior","handleSubmit","className","Card","CardHeader","CardTitle","CardBody","Row","Col","xs","sm","md","Label","for","Input","id","name","value","values","Account","onChange","handleChange","invalid","touched","errors","FormFeedback","Tenant","Select","placeholder","isLoading","isClearable","options","concat","ActionPlanIDs","classNamePrefix","theme","selectThemeColors","setFieldValue","style","display","ActionTriggerIDs","BALANCE_DATA","isMulti","Balances","CardFooter","CustomButton","loading","createAccount","createBalance","type","color","minWidth","BreadCrumbs","props","Breadcrumb","BreadcrumbItem","tag","Link","to","map","item","index","Wrapper","link","isLastItem","length","active","classnames","createActionSchema","yup","TPid","required","ID","createChargerSchema","ActivationTime","ExpiryTime","RunID","FilterIDs","min","AttributeIDs","createTimingSchema","MonthDays","Months","Time","WeekDays","Years","createDestinationSchema","Prefixes","createRatingProfileSchema","LoadId","Category","Subject","createAccountSchema","nullable","dispatch","useDispatch","navigate","useNavigate","httpService","useHttp","setLoadings","useState","getAccounts","updateAccount","deleteAccount","getAccountById","setGetActionPlansLoading","setGetActionTriggersLoading","setGetActionPlans","setGetActionTriggers","filters","setFilters","listData","setListData","useFormik","initialValues","ActionPlansOverwrite","ActionTriggerOverwrite","ExtraOptions","ReloadScheduler","validationSchema","async","postData","response","post","method","params","status","err","balanceArray","push","toast","success","updateAccountController","without_filter","result","array","_response$data","_response$data$result","label","_response$data2","_response$data2$resul","getAccount","tenant_id","account_id","setViewAccountDetailLoading","setViewAccountDetail","console","log","split","ActionTriggers","BalanceMap","Object","keys","Math","random","BalanceType","Value","Balance","Uuid","moment","add","format","Weight","DestinationIDs","RatingSubject","Categories","SharedGroups","TimingIDs","Disabled","Blocker","ActionExtraData","Cdrlog"],"mappings":"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","file":"static/js/103.c9563797.chunk.js","sourcesContent":["import { Fragment, useEffect } from \"react\";\nimport Breadcrumbs from \"@components/breadcrumbs\";\nimport {\n  Card,\n  CardBody,\n  Input,\n  Row,\n  Col,\n  Form,\n  Label,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  FormFeedback,\n} from \"reactstrap\";\nimport CustomButton from \"../../../../components/button\";\nimport useAccounts from \"../../../../hooks/use_accounts\";\nimport Select from \"react-select\";\nimport { selectThemeColors } from \"@utils\";\nimport { BALANCE_DATA } from \"../../../../constant/balance_data\";\nimport { useSelector } from \"react-redux\";\n\nconst AccountsNew = () => {\n  const {\n    getActionPlans,\n    getActionTriggers,\n    createAccountController,\n    actionPlans,\n    actionTriggers,\n    loadings,\n    getActionPlansLoading,\n    getActionTriggersLoading,\n  } = useAccounts();\n\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  useEffect(() => {\n    if (selectedTpId) {\n      getActionPlans();\n      getActionTriggers();\n    }\n  }, [selectedTpId]);\n  return (\n    <Fragment>\n      <Breadcrumbs title=\"New Account\" data={[{ title: \"New Account\" }]} />\n      <Form\n        onSubmit={(e) => {\n          e.preventDefault();\n          window.scroll({ top: 0, behavior: \"smooth\" });\n          createAccountController.handleSubmit();\n        }}\n        className=\"d-flex flex-column align-items-center\"\n      >\n        <Card className=\"w-100\">\n          {/* card header */}\n          <CardHeader className=\"border-bottom\">\n            <CardTitle>New Account Form</CardTitle>\n          </CardHeader>\n          {/* card body */}\n          <CardBody className=\"pt-2\">\n            {/* form fields */}\n            <Row>\n              {/* Account */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"mobile\">\n                  Account\n                </Label>\n                <Input\n                  id=\"Account\"\n                  name=\"Account\"\n                  value={createAccountController.values.Account}\n                  onChange={createAccountController.handleChange}\n                  invalid={\n                    createAccountController.touched.Account &&\n                    createAccountController.errors.Account\n                  }\n                />\n                {createAccountController.touched.Account &&\n                createAccountController.errors.Account ? (\n                  <FormFeedback>\n                    {createAccountController.errors.Account}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* Tenant */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"mobile\">\n                  Tenant\n                </Label>\n                <Input\n                  id=\"Tenant\"\n                  name=\"Tenant\"\n                  value={createAccountController.values.Tenant}\n                  onChange={createAccountController.handleChange}\n                  invalid={\n                    createAccountController.touched.Tenant &&\n                    createAccountController.errors.Tenant\n                  }\n                />\n                {createAccountController.touched.Tenant &&\n                createAccountController.errors.Tenant ? (\n                  <FormFeedback>\n                    {createAccountController.errors.Tenant}\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* ActionPlanIDs */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"mobile\">\n                  ActionPlanIDs\n                </Label>\n                <Select\n                  placeholder=\"Select ActionPlanIDs\"\n                  isLoading={getActionPlansLoading}\n                  isClearable={false}\n                  options={actionPlans}\n                  className={`react-select ${\n                    createAccountController.touched.ActionPlanIDs &&\n                    createAccountController.errors.ActionPlanIDs\n                      ? \"form_error\"\n                      : \"\"\n                  }`}\n                  classNamePrefix=\"select\"\n                  theme={selectThemeColors}\n                  value={createAccountController.values.ActionPlanIDs}\n                  onChange={(value) => {\n                    createAccountController.setFieldValue(\n                      \"ActionPlanIDs\",\n                      value\n                    );\n                  }}\n                />\n                {createAccountController.touched.ActionPlanIDs &&\n                createAccountController.errors.ActionPlanIDs ? (\n                  <FormFeedback style={{ display: \"block\" }}>\n                    The ActionPlanIDs field is required.\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* ActionTriggerIDs */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"mobile\">\n                  ActionTriggerIDs\n                </Label>\n                <Select\n                  placeholder=\"Select ActionTriggerIDs\"\n                  isLoading={getActionTriggersLoading}\n                  isClearable={false}\n                  options={actionTriggers}\n                  className={`react-select ${\n                    createAccountController.touched.ActionTriggerIDs &&\n                    createAccountController.errors.ActionTriggerIDs\n                      ? \"form_error\"\n                      : \"\"\n                  }`}\n                  classNamePrefix=\"select\"\n                  theme={selectThemeColors}\n                  value={createAccountController.values.ActionTriggerIDs}\n                  onChange={(value) => {\n                    createAccountController.setFieldValue(\n                      \"ActionTriggerIDs\",\n                      value\n                    );\n                  }}\n                />\n                {createAccountController.touched.ActionTriggerIDs &&\n                createAccountController.errors.ActionTriggerIDs ? (\n                  <FormFeedback style={{ display: \"block\" }}>\n                    The ActionTriggerIDs field is required.\n                  </FormFeedback>\n                ) : null}\n              </Col>\n              {/* Balances */}\n              <Col xs=\"12\" sm=\"6\" md=\"4\" className=\"mb-1\">\n                <Label className=\"form-label\" for=\"mobile\">\n                  Balances\n                </Label>\n                <Select\n                  placeholder=\"Select Balances\"\n                  isClearable={false}\n                  options={BALANCE_DATA}\n                  isMulti={true}\n                  className={`react-select ${\n                    createAccountController.touched.Balances &&\n                    createAccountController.errors.Balances\n                      ? \"form_error\"\n                      : \"\"\n                  }`}\n                  classNamePrefix=\"select\"\n                  theme={selectThemeColors}\n                  value={createAccountController.values.Balances}\n                  onChange={(value) => {\n                    createAccountController.setFieldValue(\"Balances\", value);\n                  }}\n                />\n                {createAccountController.touched.Balances &&\n                createAccountController.errors.Balances ? (\n                  <FormFeedback style={{ display: \"block\" }}>\n                    The Balances field is required.\n                  </FormFeedback>\n                ) : null}\n              </Col>\n            </Row>\n          </CardBody>\n          {/* card footer */}\n          <CardFooter className=\"border-top d-flex justify-content-center\">\n            {/* submit button */}\n            <CustomButton\n              loading={loadings.createAccount || loadings.createBalance}\n              type=\"submit\"\n              color=\"primary\"\n              style={{ minWidth: 150 }}\n            >\n              Submit\n            </CustomButton>\n          </CardFooter>\n        </Card>\n      </Form>\n    </Fragment>\n  );\n};\nexport default AccountsNew;\n","// ** React Imports\nimport { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\n\n// ** Third Party Components\nimport Proptypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport {\n  Grid,\n  CheckSquare,\n  MessageSquare,\n  Mail,\n  Calendar,\n} from \"react-feather\";\n\n// ** Reactstrap Imports\nimport { Breadcrumb, BreadcrumbItem } from \"reactstrap\";\n\nconst BreadCrumbs = (props) => {\n  // ** Props\n  const { data, title } = props;\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment;\n      const isLastItem = data.length - 1 === index;\n      return (\n        <BreadcrumbItem\n          tag=\"li\"\n          key={index}\n          active={!isLastItem}\n          className={classnames({ \"text-primary\": !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>\n            {item.title}\n          </Wrapper>\n        </BreadcrumbItem>\n      );\n    });\n  };\n\n  return (\n    <div className=\"content-header row\">\n      <div className=\"content-header-left col-md-9 col-12 mb-2 w-100\">\n        <div className=\"row breadcrumbs-top\">\n          <div className=\"col-12\">\n            {title ? (\n              <h2 className=\"content-header-title float-start mb-0\">{title}</h2>\n            ) : (\n              \"\"\n            )}\n            <div className=\"breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12\">\n              <Breadcrumb>\n                <BreadcrumbItem tag=\"li\">\n                  <Link to=\"/\">Dashboard</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default BreadCrumbs;\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired,\n    })\n  ),\n};\n","import * as yup from \"yup\";\n\nexport const createActionSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n});\n\nexport const createChargerSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  ActivationTime: yup\n    .string()\n    .required(\"The ActivationTime field is required.\"),\n  ExpiryTime: yup.string().required(\"The ExpiryTime field is required.\"),\n  RunID: yup.string().required(\"The RunID field is required.\"),\n  FilterIDs: yup.array().min(1).required(\"The FilterIDs field is required.\"),\n  AttributeIDs: yup\n    .array()\n    .min(1)\n    .required(\"The AttributeIDs field is required.\"),\n});\n\nexport const createTimingSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  MonthDays: yup.string().required(\"The MonthDays field is required.\"),\n  Months: yup.string().required(\"The Months field is required.\"),\n  Time: yup.string().required(\"The Time field is required.\"),\n  WeekDays: yup.string().required(\"The WeekDays field is required.\"),\n  Years: yup.string().required(\"The Years field is required.\"),\n});\n\nexport const createDestinationSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  ID: yup.string().required(\"The ID field is required.\"),\n  Prefixes: yup.array().min(1).required(\"The Prefixes field is required.\"),\n});\n\nexport const createRatingProfileSchema = yup.object({\n  TPid: yup.string().required(\"The TPid field is required.\"),\n  LoadId: yup.string().required(\"The LoadId field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  Category: yup.string().required(\"The Category field is required.\"),\n  Subject: yup.string().required(\"The Subject field is required.\"),\n});\n\nexport const createAccountSchema = yup.object({\n  Account: yup.string().required(\"The Account field is required.\"),\n  Tenant: yup.string().required(\"The Tenant field is required.\"),\n  ActionPlanIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionPlanIDs field is required.\"),\n  ActionTriggerIDs: yup\n    .object()\n    .nullable(false)\n    .required(\"The ActionTriggerIDs field is required.\"),\n  Balances: yup\n    .array()\n    .min(1, \"You should select a balance.\")\n    .required(\"You should select a balance.\"),\n});\n","import { useFormik } from \"formik\";\nimport { useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport useHttp from \"./use_http\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createAccountSchema } from \"../utility/schemas/index\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  setViewAccountDetail,\n  setViewAccountDetailLoading,\n} from \"../redux/accounts_slice\";\n\nconst useAccounts = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { httpService } = useHttp();\n\n  const [loadings, setLoadings] = useState({\n    getAccounts: false,\n    createAccount: false,\n    updateAccount: false,\n    createBalance: false,\n    deleteAccount: false,\n    getAccountById: false,\n  });\n\n  const [getActionPlansLoading, setGetActionPlansLoading] = useState(false);\n  const [getActionTriggersLoading, setGetActionTriggersLoading] =\n    useState(false);\n\n  const [actionPlans, setGetActionPlans] = useState([]);\n  const [actionTriggers, setGetActionTriggers] = useState([]);\n\n  const [filters, setFilters] = useState({\n    Tenant: \"cgrates.org\",\n  });\n\n  const [listData, setListData] = useState([]);\n\n  const selectedTpId = useSelector((state) => state.app.selectedTpId);\n\n  const getActionPlans = async () => {\n    let array = [];\n    try {\n      setGetActionPlansLoading(true);\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPActionPlanIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setGetActionPlansLoading(false);\n      response?.data?.result?.map((item) => {\n        array.push({\n          label: item,\n          value: item,\n        });\n      });\n      setGetActionPlans(array);\n    } catch ({ err, response }) {\n      setGetActionPlansLoading(false);\n    }\n  };\n\n  const getActionTriggers = async () => {\n    let array = [];\n    try {\n      setGetActionTriggersLoading(true);\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv1.GetTPActionTriggerIds\",\n        params: [\n          {\n            TPid: selectedTpId,\n          },\n        ],\n      });\n      setGetActionTriggersLoading(false);\n      response?.data?.result?.map((item) => {\n        array.push({\n          label: item,\n          value: item,\n        });\n      });\n      setGetActionTriggers(array);\n    } catch ({ err, response }) {\n      setGetActionTriggersLoading(false);\n    }\n  };\n\n  const createAccountController = useFormik({\n    initialValues: {\n      Tenant: \"\",\n      Account: \"\",\n      ActionPlanIDs: null,\n      ActionPlansOverwrite: false,\n      ActionTriggerIDs: null,\n      ActionTriggerOverwrite: false,\n      ExtraOptions: {},\n      ReloadScheduler: false,\n      Balances: null,\n    },\n    validationSchema: createAccountSchema,\n    onSubmit: (values) => {\n      createAccount(values);\n    },\n  });\n\n  const createAccount = async (values) => {\n    let postData = {\n      Tenant: values.Tenant,\n      Account: values.Account,\n      ActionPlanIDs: [values.ActionPlanIDs.value],\n      ActionPlansOverwrite: false,\n      ActionTriggerIDs: [values.ActionTriggerIDs.value],\n      ActionTriggerOverwrite: false,\n      ExtraOptions: {},\n      ReloadScheduler: false,\n    };\n    try {\n      setLoadings({ ...loadings, createAccount: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv2.SetAccount\",\n        params: [postData],\n      });\n      setLoadings({ ...loadings, createAccount: false });\n      if (response.status === 200) {\n        createBalance(values);\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createAccount: false });\n    }\n  };\n\n  const createBalance = async (values) => {\n    let balanceArray = [];\n    values.Balances.map((item) => {\n      balanceArray.push(item.value);\n    });\n    let postData = {\n      method: \"APIerSv1.SetBalances\",\n      params: [\n        {\n          Tenant: values.Tenant,\n          Account: values.Account,\n          Balances: balanceArray,\n        },\n      ],\n      id: 6,\n    };\n    try {\n      setLoadings({ ...loadings, createBalance: true });\n      const response = await httpService.post(\"\", postData);\n      setLoadings({ ...loadings, createBalance: false });\n      if (response.status === 200) {\n        toast.success(\"Successfully Created!\");\n        navigate(\"/admin/accounts\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, createBalance: false });\n    }\n  };\n\n  const getAccounts = async (without_filter) => {\n    let postData = {\n      Tenant: \"\",\n    };\n    if (filters.Tenant.length > 0 && !without_filter) {\n      postData.Tenant = filters.Tenant;\n    }\n    try {\n      setLoadings({ ...loadings, getAccounts: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv2.GetAccounts\",\n        params: [postData],\n      });\n      setLoadings({ ...loadings, getAccounts: false });\n      if (response.data.result) {\n        setListData(response.data.result);\n      } else {\n        setListData([]);\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getAccounts: false });\n    }\n  };\n\n  const getAccount = async (tenant_id, account_id) => {\n    try {\n      dispatch(setViewAccountDetailLoading(true));\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv2.GetAccount\",\n        params: [\n          {\n            Tenant: tenant_id,\n            Account: account_id,\n          },\n        ],\n      });\n      dispatch(setViewAccountDetailLoading(false));\n      if (response.data.result) {\n        dispatch(setViewAccountDetail(response.data.result));\n      }\n    } catch ({ err, response }) {\n      dispatch(setViewAccountDetailLoading(false));\n    }\n  };\n\n  const getAccountById = async (account_id, tenant_id) => {\n    let balanceArray = [];\n    try {\n      setLoadings({ ...loadings, getAccountById: true });\n      const response = await httpService.post(\"\", {\n        method: \"APIerSv2.GetAccount\",\n        params: [\n          {\n            Tenant: tenant_id,\n            Account: account_id,\n          },\n        ],\n      });\n      setLoadings({ ...loadings, getAccountById: false });\n      if (response.data.result) {\n        console.log(response.data.result);\n        updateAccountController.setFieldValue(\n          \"Tenant\",\n          response.data.result.ID.split(\":\")[0]\n        );\n        updateAccountController.setFieldValue(\n          \"Account\",\n          response.data.result.ID.split(\":\")[1]\n        );\n        updateAccountController.setFieldValue(\"ActionTriggerIDs\", {\n          label: response.data.result.ActionTriggers[0].ID,\n          value: response.data.result.ActionTriggers[0].ID,\n        });\n        if (response.data.result.BalanceMap) {\n          Object.keys(response.data.result.BalanceMap).map((item) => {\n            if (item === \"*data\") {\n              balanceArray.push({\n                id: Math.random() * 9430430,\n                label: \"1Gigabyte Data Monthly\",\n                value: response.data.result.BalanceMap[item][0],\n              });\n            } else if (item === \"*monetary\") {\n              balanceArray.push({\n                id: Math.random() * 9430430,\n                label: \"100000 Unit Monetary\",\n                value: response.data.result.BalanceMap[item][0],\n              });\n            } else if (item === \"*voice\") {\n              balanceArray.push({\n                id: Math.random() * 9430430,\n                label: \"10 Hour Voice Monthly\",\n                value: response.data.result.BalanceMap[item][0],\n              });\n            }\n          });\n          updateAccountController.setFieldValue(\"Balances\", balanceArray);\n        }\n      } else {\n        navigate(\"/admin/accounts\");\n      }\n    } catch ({ err, response }) {\n      setLoadings({ ...loadings, getAccountById: false });\n    }\n  };\n\n  const updateAccountController = useFormik({\n    initialValues: {\n      Tenant: \"\",\n      Account: \"\",\n      ActionPlanIDs: null,\n      ActionPlansOverwrite: false,\n      ActionTriggerIDs: null,\n      ActionTriggerOverwrite: false,\n      ExtraOptions: {},\n      ReloadScheduler: false,\n      Balances: null,\n    },\n    validationSchema: createAccountSchema,\n    onSubmit: (values) => {\n      createAccount(values);\n    },\n  });\n\n  const exports = {\n    getAccounts,\n    getActionPlans,\n    getActionTriggers,\n    getAccount,\n    getAccountById,\n    createAccountController,\n    updateAccountController,\n    listData,\n    loadings,\n    actionPlans,\n    actionTriggers,\n    getActionPlansLoading,\n    getActionTriggersLoading,\n    filters,\n    setFilters,\n  };\n  return exports;\n};\nexport default useAccounts;\n","import moment from \"moment/moment\";\n\nexport const BALANCE_DATA = [\n  {\n    id: Math.random() * 9430430,\n    label: \"1Gigabyte Data Monthly\",\n    value: {\n      BalanceType: \"*data\",\n      Value: 104857600000,\n      Balance: {\n        Uuid: \"d282703e-64f2-11ee-8c99-0242ac120002\",\n        ID: \"1G_DATA\",\n        ExpiryTime: moment().add(1, \"months\").format(\"YYYY-MM-DDTHH:mm:ssZ\"), // Put time now + 1 month here!!!!\n        Weight: 10,\n        DestinationIDs: \"\",\n        RatingSubject: \"\",\n        Categories: \"data\",\n        SharedGroups: null,\n        TimingIDs: \"*any\",\n        Disabled: false,\n        Blocker: true,\n      },\n      ActionExtraData: null,\n      Cdrlog: false,\n    },\n  },\n  {\n    id: Math.random() * 9430430,\n    label: \"10 Hour Voice Monthly\",\n    value: {\n      BalanceType: \"*voice\",\n      Value: 36000,\n      Balance: {\n        Uuid: \"d282703e-64f2-11ee-8c99-0242ac120002\",\n        ID: \"10HVoice\",\n        ExpiryTime: moment().add(1, \"months\").format(\"YYYY-MM-DDTHH:mm:ssZ\"), // Put time now + 1 month here!!!!\n        Weight: 10,\n        DestinationIDs: \"\",\n        RatingSubject: \"\",\n        Categories: \"voice\",\n        SharedGroups: null,\n        TimingIDs: \"*any\",\n        Disabled: false,\n        Blocker: true,\n      },\n      ActionExtraData: null,\n      Cdrlog: false,\n    },\n  },\n  {\n    id: Math.random() * 9430430,\n    label: \"100000 Unit Monetary\",\n    value: {\n      BalanceType: \"*monetary\",\n      Value: 100000,\n      Balance: {\n        Uuid: \"d282703e-64f2-11ee-8c99-0242ac120003\",\n        ID: \"100KMoney\",\n        ExpiryTime: moment().add(1, \"months\").format(\"YYYY-MM-DDTHH:mm:ssZ\"), // Put time now + 1 month here!!!!\n        Weight: 10,\n        DestinationIDs: \"\",\n        RatingSubject: \"\",\n        Categories: null,\n        SharedGroups: null,\n        TimingIDs: \"*any\",\n        Disabled: false,\n        Blocker: true,\n      },\n      ActionExtraData: null,\n      Cdrlog: false,\n    },\n  },\n];\n"],"sourceRoot":""}